
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005bb0  08005bb0  00015bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a4  24000010  08005bc8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001b4  08005bc8  000201b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014965  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002337  00000000  00000000  000349a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e98  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000dd0  00000000  00000000  00037b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f61d  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013683  00000000  00000000  00067f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134f07  00000000  00000000  0007b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001b04ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d78  00000000  00000000  001b0540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08005b58 	.word	0x08005b58

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08005b58 	.word	0x08005b58

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005f4:	f000 fe5a 	bl	80012ac <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005f8:	f000 f82a 	bl	8000650 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005fc:	f000 f9ba 	bl	8000974 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000600:	f000 f964 	bl	80008cc <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 8000604:	f000 f9ae 	bl	8000964 <MX_USB_OTG_HS_USB_Init>
	MX_LTDC_Init();
 8000608:	f000 f8dc 	bl	80007c4 <MX_LTDC_Init>
	MX_I2C1_Init();
 800060c:	f000 f89a 	bl	8000744 <MX_I2C1_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2104      	movs	r1, #4
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <main+0x58>)
 8000616:	f001 f9bf 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	; 0x64
 800061c:	f000 fed8 	bl	80013d0 <HAL_Delay>
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, SET); // LCD reset
 8000620:	2201      	movs	r2, #1
 8000622:	2104      	movs	r1, #4
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0x58>)
 8000626:	f001 f9b7 	bl	8001998 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, SET); // background light on
 800062a:	2201      	movs	r2, #1
 800062c:	2101      	movs	r1, #1
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <main+0x5c>)
 8000630:	f001 f9b2 	bl	8001998 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0), HAL_Delay(500);
 8000634:	2101      	movs	r1, #1
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x58>)
 8000638:	f001 f9c7 	bl	80019ca <HAL_GPIO_TogglePin>
 800063c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000640:	f000 fec6 	bl	80013d0 <HAL_Delay>
 8000644:	e7f6      	b.n	8000634 <main+0x44>
 8000646:	bf00      	nop
 8000648:	58020400 	.word	0x58020400
 800064c:	58020000 	.word	0x58020000

08000650 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b09c      	sub	sp, #112	; 0x70
 8000654:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	224c      	movs	r2, #76	; 0x4c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fa72 	bl	8005b48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2220      	movs	r2, #32
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fa6c 	bl	8005b48 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000670:	2004      	movs	r0, #4
 8000672:	f001 fdb9 	bl	80021e8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <SystemClock_Config+0xec>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a2f      	ldr	r2, [pc, #188]	; (800073c <SystemClock_Config+0xec>)
 8000680:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <SystemClock_Config+0xec>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000692:	bf00      	nop
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xec>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a0:	d1f8      	bne.n	8000694 <SystemClock_Config+0x44>
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80006a2:	4b27      	ldr	r3, [pc, #156]	; (8000740 <SystemClock_Config+0xf0>)
 80006a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a6:	f023 0303 	bic.w	r3, r3, #3
 80006aa:	4a25      	ldr	r2, [pc, #148]	; (8000740 <SystemClock_Config+0xf0>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80006b2:	2321      	movs	r3, #33	; 0x21
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 70;
 80006cc:	2346      	movs	r3, #70	; 0x46
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006dc:	230c      	movs	r3, #12
 80006de:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fdd5 	bl	800229c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xac>
		Error_Handler();
 80006f8:	f000 faa0 	bl	8000c3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006fc:	233f      	movs	r3, #63	; 0x3f
 80006fe:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2303      	movs	r3, #3
 8000702:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070c:	2340      	movs	r3, #64	; 0x40
 800070e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000710:	2340      	movs	r3, #64	; 0x40
 8000712:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000718:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2107      	movs	r1, #7
 8000722:	4618      	mov	r0, r3
 8000724:	f002 f9be 	bl	8002aa4 <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xe2>
		Error_Handler();
 800072e:	f000 fa85 	bl	8000c3c <Error_Handler>
	}
}
 8000732:	bf00      	nop
 8000734:	3770      	adds	r7, #112	; 0x70
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	58024800 	.word	0x58024800
 8000740:	58024400 	.word	0x58024400

08000744 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_I2C1_Init+0x74>)
 800074a:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_I2C1_Init+0x78>)
 800074c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20B0CCFF;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000750:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x7c>)
 8000752:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 224;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000756:	22e0      	movs	r2, #224	; 0xe0
 8000758:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_I2C1_Init+0x74>)
 800075c:	2201      	movs	r2, #1
 800075e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000780:	f001 f962 	bl	8001a48 <HAL_I2C_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800078a:	f000 fa57 	bl	8000c3c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800078e:	2100      	movs	r1, #0
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x74>)
 8000792:	f001 f9e9 	bl	8001b68 <HAL_I2CEx_ConfigAnalogFilter>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800079c:	f000 fa4e 	bl	8000c3c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80007a0:	2100      	movs	r1, #0
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_I2C1_Init+0x74>)
 80007a4:	f001 fa2b 	bl	8001bfe <HAL_I2CEx_ConfigDigitalFilter>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80007ae:	f000 fa45 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2400002c 	.word	0x2400002c
 80007bc:	40005400 	.word	0x40005400
 80007c0:	20b0ccff 	.word	0x20b0ccff

080007c4 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2234      	movs	r2, #52	; 0x34
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f005 f9b9 	bl	8005b48 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80007d6:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007d8:	4a3a      	ldr	r2, [pc, #232]	; (80008c4 <MX_LTDC_Init+0x100>)
 80007da:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007dc:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 20;
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007f6:	2214      	movs	r2, #20
 80007f8:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80007fc:	2203      	movs	r2, #3
 80007fe:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 160;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000802:	22a0      	movs	r2, #160	; 0xa0
 8000804:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 23;
 8000806:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000808:	2217      	movs	r2, #23
 800080a:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 1184;
 800080c:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_LTDC_Init+0xfc>)
 800080e:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8000812:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 623;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000816:	f240 226f 	movw	r2, #623	; 0x26f
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 1344;
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_LTDC_Init+0xfc>)
 800081e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 635;
 8000824:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000826:	f240 227b 	movw	r2, #635	; 0x27b
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 800082c:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <MX_LTDC_Init+0xfc>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_LTDC_Init+0xfc>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000844:	481e      	ldr	r0, [pc, #120]	; (80008c0 <MX_LTDC_Init+0xfc>)
 8000846:	f001 fa27 	bl	8001c98 <HAL_LTDC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_LTDC_Init+0x90>
		Error_Handler();
 8000850:	f000 f9f4 	bl	8000c3c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 100;
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 900;
 8000858:	f44f 7361 	mov.w	r3, #900	; 0x384
 800085c:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 600;
 8000862:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000866:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000868:	2302      	movs	r3, #2
 800086a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800086c:	23ff      	movs	r3, #255	; 0xff
 800086e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 255;
 8000870:	23ff      	movs	r3, #255	; 0xff
 8000872:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000878:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800087a:	2305      	movs	r3, #5
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0x24000200;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_LTDC_Init+0x104>)
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 800;
 8000882:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 600;
 8000888:	f44f 7316 	mov.w	r3, #600	; 0x258
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_LTDC_Init+0xfc>)
 80008a8:	f001 fac6 	bl	8001e38 <HAL_LTDC_ConfigLayer>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_LTDC_Init+0xf2>
		Error_Handler();
 80008b2:	f000 f9c3 	bl	8000c3c <Error_Handler>
//		Error_Handler();
//	}

	/* USER CODE END LTDC_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3738      	adds	r7, #56	; 0x38
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	24000078 	.word	0x24000078
 80008c4:	50001000 	.word	0x50001000
 80008c8:	24000200 	.word	0x24000200

080008cc <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <MX_USART3_UART_Init+0x94>)
 80008d4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_USART3_UART_Init+0x90>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000916:	f003 ff7f 	bl	8004818 <HAL_UART_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000920:	f000 f98c 	bl	8000c3c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000924:	2100      	movs	r1, #0
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_USART3_UART_Init+0x90>)
 8000928:	f005 f820 	bl	800596c <HAL_UARTEx_SetTxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000932:	f000 f983 	bl	8000c3c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000936:	2100      	movs	r1, #0
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <MX_USART3_UART_Init+0x90>)
 800093a:	f005 f855 	bl	80059e8 <HAL_UARTEx_SetRxFifoThreshold>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000944:	f000 f97a 	bl	8000c3c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_USART3_UART_Init+0x90>)
 800094a:	f004 ffd6 	bl	80058fa <HAL_UARTEx_DisableFifoMode>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000954:	f000 f972 	bl	8000c3c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	24000120 	.word	0x24000120
 8000960:	40004800 	.word	0x40004800

08000964 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	; 0x38
 8000978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	4ba5      	ldr	r3, [pc, #660]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	4aa3      	ldr	r2, [pc, #652]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800099a:	4ba1      	ldr	r3, [pc, #644]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	623b      	str	r3, [r7, #32]
 80009a6:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	4b9d      	ldr	r3, [pc, #628]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	4a9c      	ldr	r2, [pc, #624]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b8:	4b99      	ldr	r3, [pc, #612]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80009c6:	4b96      	ldr	r3, [pc, #600]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009cc:	4a94      	ldr	r2, [pc, #592]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009d6:	4b92      	ldr	r3, [pc, #584]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	f003 0320 	and.w	r3, r3, #32
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009e4:	4b8e      	ldr	r3, [pc, #568]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ea:	4a8d      	ldr	r2, [pc, #564]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009f4:	4b8a      	ldr	r3, [pc, #552]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 80009f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b87      	ldr	r3, [pc, #540]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a08:	4a85      	ldr	r2, [pc, #532]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a12:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a26:	4a7e      	ldr	r2, [pc, #504]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a30:	4b7b      	ldr	r3, [pc, #492]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b78      	ldr	r3, [pc, #480]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a44:	4a76      	ldr	r2, [pc, #472]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a46:	f043 0308 	orr.w	r3, r3, #8
 8000a4a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a4e:	4b74      	ldr	r3, [pc, #464]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5c:	4b70      	ldr	r3, [pc, #448]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a62:	4a6f      	ldr	r2, [pc, #444]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a6c:	4b6c      	ldr	r3, [pc, #432]	; (8000c20 <MX_GPIO_Init+0x2ac>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin,
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4868      	ldr	r0, [pc, #416]	; (8000c24 <MX_GPIO_Init+0x2b0>)
 8000a82:	f000 ff89 	bl	8001998 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4867      	ldr	r0, [pc, #412]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000a8c:	f000 ff84 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	4864      	ldr	r0, [pc, #400]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000a96:	f000 ff7f 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aa0:	4862      	ldr	r0, [pc, #392]	; (8000c2c <MX_GPIO_Init+0x2b8>)
 8000aa2:	f000 ff79 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2104      	movs	r1, #4
 8000aaa:	4860      	ldr	r0, [pc, #384]	; (8000c2c <MX_GPIO_Init+0x2b8>)
 8000aac:	f000 ff74 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	485e      	ldr	r0, [pc, #376]	; (8000c30 <MX_GPIO_Init+0x2bc>)
 8000ab6:	f000 ff6f 	bl	8001998 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4858      	ldr	r0, [pc, #352]	; (8000c34 <MX_GPIO_Init+0x2c0>)
 8000ad2:	f000 fdb1 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	484d      	ldr	r0, [pc, #308]	; (8000c24 <MX_GPIO_Init+0x2b0>)
 8000af0:	f000 fda2 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pins : LTDC_BL_Pin I2C1_RST_Pin */
	GPIO_InitStruct.Pin = LTDC_BL_Pin | I2C1_RST_Pin;
 8000af4:	2381      	movs	r3, #129	; 0x81
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4847      	ldr	r0, [pc, #284]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000b0c:	f000 fd94 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000b10:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	4840      	ldr	r0, [pc, #256]	; (8000c2c <MX_GPIO_Init+0x2b8>)
 8000b2a:	f000 fd85 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : LTDC_RST_Pin */
	GPIO_InitStruct.Pin = LTDC_RST_Pin;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LTDC_RST_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	4619      	mov	r1, r3
 8000b44:	4839      	ldr	r0, [pc, #228]	; (8000c2c <MX_GPIO_Init+0x2b8>)
 8000b46:	f000 fd77 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4836      	ldr	r0, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x2c4>)
 8000b60:	f000 fd6a 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2C1_INT_Pin */
	GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482b      	ldr	r0, [pc, #172]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000b7c:	f000 fd5c 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	4619      	mov	r1, r3
 8000b94:	4824      	ldr	r0, [pc, #144]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000b96:	f000 fd4f 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bac:	230a      	movs	r3, #10
 8000bae:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481c      	ldr	r0, [pc, #112]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000bb8:	f000 fd3e 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
	GPIO_InitStruct.Pin = USB_FS_N_Pin | USB_FS_P_Pin;
 8000bbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <MX_GPIO_Init+0x2b4>)
 8000bd6:	f000 fd2f 	bl	8001638 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480f      	ldr	r0, [pc, #60]	; (8000c30 <MX_GPIO_Init+0x2bc>)
 8000bf2:	f000 fd21 	bl	8001638 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2017      	movs	r0, #23
 8000bfc:	f000 fce7 	bl	80015ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c00:	2017      	movs	r0, #23
 8000c02:	f000 fcfe 	bl	8001602 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2028      	movs	r0, #40	; 0x28
 8000c0c:	f000 fcdf 	bl	80015ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c10:	2028      	movs	r0, #40	; 0x28
 8000c12:	f000 fcf6 	bl	8001602 <HAL_NVIC_EnableIRQ>

}
 8000c16:	bf00      	nop
 8000c18:	3738      	adds	r7, #56	; 0x38
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58021400 	.word	0x58021400
 8000c28:	58020000 	.word	0x58020000
 8000c2c:	58020400 	.word	0x58020400
 8000c30:	58021000 	.word	0x58021000
 8000c34:	58020800 	.word	0x58020800
 8000c38:	58021800 	.word	0x58021800

08000c3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x30>)
 8000c50:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x30>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x30>)
 8000c60:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	58024400 	.word	0x58024400

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0b8      	sub	sp, #224	; 0xe0
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	22b8      	movs	r2, #184	; 0xb8
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 ff53 	bl	8005b48 <memset>
  if(hi2c->Instance==I2C1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_I2C_MspInit+0xbc>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d141      	bne.n	8000d30 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cac:	2308      	movs	r3, #8
 8000cae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fa7e 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cc6:	f7ff ffb9 	bl	8000c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000ccc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000cdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce8:	23c0      	movs	r3, #192	; 0xc0
 8000cea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d00:	2304      	movs	r3, #4
 8000d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0xc4>)
 8000d0e:	f000 fc93 	bl	8001638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000d14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_I2C_MspInit+0xc0>)
 8000d24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	37e0      	adds	r7, #224	; 0xe0
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58020400 	.word	0x58020400

08000d44 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0bc      	sub	sp, #240	; 0xf0
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	22b8      	movs	r2, #184	; 0xb8
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f004 feef 	bl	8005b48 <memset>
  if(hltdc->Instance==LTDC)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a96      	ldr	r2, [pc, #600]	; (8000fc8 <HAL_LTDC_MspInit+0x284>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	f040 8125 	bne.w	8000fc0 <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d76:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8000d80:	2312      	movs	r3, #18
 8000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d94:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fa0a 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8000dae:	f7ff ff45 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000db2:	4b86      	ldr	r3, [pc, #536]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000db4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000db8:	4a84      	ldr	r2, [pc, #528]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000dba:	f043 0308 	orr.w	r3, r3, #8
 8000dbe:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000dc2:	4b82      	ldr	r3, [pc, #520]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000dc4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000dc8:	f003 0308 	and.w	r3, r3, #8
 8000dcc:	623b      	str	r3, [r7, #32]
 8000dce:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd0:	4b7e      	ldr	r3, [pc, #504]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd6:	4a7d      	ldr	r2, [pc, #500]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000dd8:	f043 0310 	orr.w	r3, r3, #16
 8000ddc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de0:	4b7a      	ldr	r3, [pc, #488]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b77      	ldr	r3, [pc, #476]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000df4:	4a75      	ldr	r2, [pc, #468]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dfe:	4b73      	ldr	r3, [pc, #460]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
 8000e0a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b6f      	ldr	r3, [pc, #444]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e12:	4a6e      	ldr	r2, [pc, #440]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e1c:	4b6b      	ldr	r3, [pc, #428]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b68      	ldr	r3, [pc, #416]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e30:	4a66      	ldr	r2, [pc, #408]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e3a:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b60      	ldr	r3, [pc, #384]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4e:	4a5f      	ldr	r2, [pc, #380]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e58:	4b5c      	ldr	r3, [pc, #368]	; (8000fcc <HAL_LTDC_MspInit+0x288>)
 8000e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    PD2     ------> LTDC_B7
    PD6     ------> LTDC_B2
    PB8     ------> LTDC_B6
    PE0     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 8000e66:	f64d 0371 	movw	r3, #55409	; 0xd871
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e80:	230e      	movs	r3, #14
 8000e82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4850      	ldr	r0, [pc, #320]	; (8000fd0 <HAL_LTDC_MspInit+0x28c>)
 8000e8e:	f000 fbd3 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000e92:	f240 43e3 	movw	r3, #1251	; 0x4e3
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eac:	230e      	movs	r3, #14
 8000eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4846      	ldr	r0, [pc, #280]	; (8000fd4 <HAL_LTDC_MspInit+0x290>)
 8000eba:	f000 fbbd 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000ebe:	237c      	movs	r3, #124	; 0x7c
 8000ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed6:	230e      	movs	r3, #14
 8000ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	483d      	ldr	r0, [pc, #244]	; (8000fd8 <HAL_LTDC_MspInit+0x294>)
 8000ee4:	f000 fba8 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f00:	2309      	movs	r3, #9
 8000f02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4833      	ldr	r0, [pc, #204]	; (8000fdc <HAL_LTDC_MspInit+0x298>)
 8000f0e:	f000 fb93 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_8;
 8000f12:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f36:	4619      	mov	r1, r3
 8000f38:	4828      	ldr	r0, [pc, #160]	; (8000fdc <HAL_LTDC_MspInit+0x298>)
 8000f3a:	f000 fb7d 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_6;
 8000f3e:	f240 4341 	movw	r3, #1089	; 0x441
 8000f42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f58:	230e      	movs	r3, #14
 8000f5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f62:	4619      	mov	r1, r3
 8000f64:	481e      	ldr	r0, [pc, #120]	; (8000fe0 <HAL_LTDC_MspInit+0x29c>)
 8000f66:	f000 fb67 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f84:	2309      	movs	r3, #9
 8000f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <HAL_LTDC_MspInit+0x294>)
 8000f92:	f000 fb51 	bl	8001638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f96:	2304      	movs	r3, #4
 8000f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fae:	2309      	movs	r3, #9
 8000fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <HAL_LTDC_MspInit+0x29c>)
 8000fbc:	f000 fb3c 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	37f0      	adds	r7, #240	; 0xf0
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	50001000 	.word	0x50001000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	58020400 	.word	0x58020400
 8000fe0:	58020c00 	.word	0x58020c00

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b0b8      	sub	sp, #224	; 0xe0
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	22b8      	movs	r2, #184	; 0xb8
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 fd9f 	bl	8005b48 <memset>
  if(huart->Instance==USART3)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a25      	ldr	r2, [pc, #148]	; (80010a4 <HAL_UART_MspInit+0xc0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d142      	bne.n	800109a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001014:	2302      	movs	r3, #2
 8001016:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4618      	mov	r0, r3
 8001024:	f002 f8ca 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800102e:	f7ff fe05 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001034:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 800103a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001044:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001052:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <HAL_UART_MspInit+0xc4>)
 8001062:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800106e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001072:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001088:	2307      	movs	r3, #7
 800108a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <HAL_UART_MspInit+0xc8>)
 8001096:	f000 facf 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	37e0      	adds	r7, #224	; 0xe0
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40004800 	.word	0x40004800
 80010a8:	58024400 	.word	0x58024400
 80010ac:	58020c00 	.word	0x58020c00

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f948 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(I2C1_INT_Pin))
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d004      	beq.n	8001122 <EXTI9_5_IRQHandler+0x1e>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <EXTI9_5_IRQHandler+0x30>)
 800111e:	f000 fc54 	bl	80019ca <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001122:	2080      	movs	r0, #128	; 0x80
 8001124:	f000 fc6b 	bl	80019fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C1_INT_Pin);
 8001128:	f44f 7080 	mov.w	r0, #256	; 0x100
 800112c:	f000 fc67 	bl	80019fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	58020400 	.word	0x58020400

08001138 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(B1_Pin))
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <EXTI15_10_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800114c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <EXTI15_10_IRQHandler+0x2c>)
 8001152:	f000 fc3a 	bl	80019ca <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001156:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800115a:	f000 fc50 	bl	80019fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58020400 	.word	0x58020400

08001168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <SystemInit+0xd0>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <SystemInit+0xd0>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <SystemInit+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	2b02      	cmp	r3, #2
 8001186:	d807      	bhi.n	8001198 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <SystemInit+0xd4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	4a2a      	ldr	r2, [pc, #168]	; (800123c <SystemInit+0xd4>)
 8001192:	f043 0303 	orr.w	r3, r3, #3
 8001196:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <SystemInit+0xd8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a28      	ldr	r2, [pc, #160]	; (8001240 <SystemInit+0xd8>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a4:	4b26      	ldr	r3, [pc, #152]	; (8001240 <SystemInit+0xd8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <SystemInit+0xd8>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4924      	ldr	r1, [pc, #144]	; (8001240 <SystemInit+0xd8>)
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <SystemInit+0xdc>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <SystemInit+0xd4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d007      	beq.n	80011d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <SystemInit+0xd4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 030f 	bic.w	r3, r3, #15
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <SystemInit+0xd4>)
 80011cc:	f043 0303 	orr.w	r3, r3, #3
 80011d0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <SystemInit+0xd8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011d8:	4b19      	ldr	r3, [pc, #100]	; (8001240 <SystemInit+0xd8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <SystemInit+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <SystemInit+0xd8>)
 80011e6:	4a18      	ldr	r2, [pc, #96]	; (8001248 <SystemInit+0xe0>)
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <SystemInit+0xd8>)
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <SystemInit+0xe4>)
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <SystemInit+0xd8>)
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <SystemInit+0xe8>)
 80011f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <SystemInit+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <SystemInit+0xd8>)
 80011fe:	4a14      	ldr	r2, [pc, #80]	; (8001250 <SystemInit+0xe8>)
 8001200:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <SystemInit+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <SystemInit+0xd8>)
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <SystemInit+0xe8>)
 800120c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <SystemInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <SystemInit+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <SystemInit+0xd8>)
 800121a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <SystemInit+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001226:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <SystemInit+0xec>)
 8001228:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800122c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	52002000 	.word	0x52002000
 8001240:	58024400 	.word	0x58024400
 8001244:	eaf6ed7f 	.word	0xeaf6ed7f
 8001248:	02020200 	.word	0x02020200
 800124c:	01ff0000 	.word	0x01ff0000
 8001250:	01010280 	.word	0x01010280
 8001254:	52004000 	.word	0x52004000

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800125c:	f7ff ff84 	bl	8001168 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	; (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001286:	f004 fc3b 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff f9b1 	bl	80005f0 <main>
  bx  lr
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001294:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001298:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800129c:	08005bb8 	.word	0x08005bb8
  ldr r2, =_sbss
 80012a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012a4:	240001b4 	.word	0x240001b4

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f980 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012b8:	f001 fdaa 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <HAL_Init+0x68>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	4913      	ldr	r1, [pc, #76]	; (8001318 <HAL_Init+0x6c>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <HAL_Init+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <HAL_Init+0x6c>)
 80012e0:	5cd3      	ldrb	r3, [r2, r3]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_Init+0x70>)
 80012ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <HAL_Init+0x74>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f814 	bl	8001324 <HAL_InitTick>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e002      	b.n	800130c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001306:	f7ff fc9f 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	58024400 	.word	0x58024400
 8001318:	08005b70 	.word	0x08005b70
 800131c:	24000004 	.word	0x24000004
 8001320:	24000000 	.word	0x24000000

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_InitTick+0x60>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e021      	b.n	800137c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_InitTick+0x64>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_InitTick+0x60>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f965 	bl	800161e <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f000 f92f 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x68>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2400000c 	.word	0x2400000c
 8001388:	24000000 	.word	0x24000000
 800138c:	24000008 	.word	0x24000008

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2400000c 	.word	0x2400000c
 80013b4:	240001b0 	.word	0x240001b0

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	240001b0 	.word	0x240001b0

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2400000c 	.word	0x2400000c

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff8e 	bl	80014b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff29 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015dc:	f7ff ff40 	bl	8001460 <__NVIC_GetPriorityGrouping>
 80015e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	6978      	ldr	r0, [r7, #20]
 80015e8:	f7ff ff90 	bl	800150c <NVIC_EncodePriority>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015f2:	4611      	mov	r1, r2
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff5f 	bl	80014b8 <__NVIC_SetPriority>
}
 80015fa:	bf00      	nop
 80015fc:	3718      	adds	r7, #24
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff33 	bl	800147c <__NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffa4 	bl	8001574 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001646:	4b89      	ldr	r3, [pc, #548]	; (800186c <HAL_GPIO_Init+0x234>)
 8001648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800164a:	e194      	b.n	8001976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8186 	beq.w	8001970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d005      	beq.n	800167c <HAL_GPIO_Init+0x44>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d130      	bne.n	80016de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b2:	2201      	movs	r2, #1
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f003 0201 	and.w	r2, r3, #1
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d017      	beq.n	800171a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d123      	bne.n	800176e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0203 	and.w	r2, r3, #3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80e0 	beq.w	8001970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <HAL_GPIO_Init+0x238>)
 80017c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_GPIO_Init+0x23c>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_GPIO_Init+0x240>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d052      	beq.n	80018a0 <HAL_GPIO_Init+0x268>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_GPIO_Init+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_GPIO_Init+0x248>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x22a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1d      	ldr	r2, [pc, #116]	; (8001884 <HAL_GPIO_Init+0x24c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_GPIO_Init+0x250>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1b      	ldr	r2, [pc, #108]	; (800188c <HAL_GPIO_Init+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_GPIO_Init+0x25c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_GPIO_Init+0x260>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_GPIO_Init+0x264>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20e>
 8001842:	2309      	movs	r3, #9
 8001844:	e02d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001846:	230a      	movs	r3, #10
 8001848:	e02b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184a:	2308      	movs	r3, #8
 800184c:	e029      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184e:	2307      	movs	r3, #7
 8001850:	e027      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001852:	2306      	movs	r3, #6
 8001854:	e025      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001856:	2305      	movs	r3, #5
 8001858:	e023      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185a:	2304      	movs	r3, #4
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185e:	2303      	movs	r3, #3
 8001860:	e01f      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001862:	2302      	movs	r3, #2
 8001864:	e01d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001866:	2301      	movs	r3, #1
 8001868:	e01b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800186a:	bf00      	nop
 800186c:	58000080 	.word	0x58000080
 8001870:	58024400 	.word	0x58024400
 8001874:	58000400 	.word	0x58000400
 8001878:	58020000 	.word	0x58020000
 800187c:	58020400 	.word	0x58020400
 8001880:	58020800 	.word	0x58020800
 8001884:	58020c00 	.word	0x58020c00
 8001888:	58021000 	.word	0x58021000
 800188c:	58021400 	.word	0x58021400
 8001890:	58021800 	.word	0x58021800
 8001894:	58021c00 	.word	0x58021c00
 8001898:	58022000 	.word	0x58022000
 800189c:	58022400 	.word	0x58022400
 80018a0:	2300      	movs	r3, #0
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	4938      	ldr	r1, [pc, #224]	; (8001994 <HAL_GPIO_Init+0x35c>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae63 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3724      	adds	r7, #36	; 0x24
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	58000400 	.word	0x58000400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	4603      	mov	r3, r0
 8001a06:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f804 	bl	8001a32 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d106      	bne.n	8001a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff f904 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	e006      	b.n	8001ad0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ace:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d104      	bne.n	8001ae2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_I2C_Init+0x11c>)
 8001aee:	430b      	orrs	r3, r1
 8001af0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69d9      	ldr	r1, [r3, #28]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	02008000 	.word	0x02008000

08001b68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d138      	bne.n	8001bf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e032      	b.n	8001bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2224      	movs	r2, #36	; 0x24
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6819      	ldr	r1, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2220      	movs	r2, #32
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	e000      	b.n	8001bf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
  }
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d139      	bne.n	8001c88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e033      	b.n	8001c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2224      	movs	r2, #36	; 0x24
 8001c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	021b      	lsls	r3, r3, #8
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e000      	b.n	8001c8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c88:	2302      	movs	r3, #2
  }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0bf      	b.n	8001e2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff f840 	bl	8000d44 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001cda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6999      	ldr	r1, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cf0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6899      	ldr	r1, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	; (8001e34 <HAL_LTDC_Init+0x19c>)
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	041b      	lsls	r3, r3, #16
 8001d16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6899      	ldr	r1, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68d9      	ldr	r1, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <HAL_LTDC_Init+0x19c>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b33      	ldr	r3, [pc, #204]	; (8001e34 <HAL_LTDC_Init+0x19c>)
 8001d68:	400b      	ands	r3, r1
 8001d6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	041b      	lsls	r3, r3, #16
 8001d72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6959      	ldr	r1, [r3, #20]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_LTDC_Init+0x19c>)
 8001d96:	400b      	ands	r3, r1
 8001d98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6959      	ldr	r1, [r3, #20]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8001dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0206 	orr.w	r2, r2, #6
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	f000f800 	.word	0xf000f800

08001e38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_LTDC_ConfigLayer+0x1a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e02c      	b.n	8001eac <HAL_LTDC_ConfigLayer+0x74>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2134      	movs	r1, #52	; 0x34
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
 8001e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	68b9      	ldr	r1, [r7, #8]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f811 	bl	8001eb4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bdb0      	pop	{r4, r5, r7, pc}

08001eb4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	0c1b      	lsrs	r3, r3, #16
 8001ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed0:	4413      	add	r3, r2
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3384      	adds	r3, #132	; 0x84
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	4611      	mov	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	01d2      	lsls	r2, r2, #7
 8001ef0:	440a      	add	r2, r1
 8001ef2:	3284      	adds	r2, #132	; 0x84
 8001ef4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001ef8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001f0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	01db      	lsls	r3, r3, #7
 8001f18:	440b      	add	r3, r1
 8001f1a:	3384      	adds	r3, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8001f22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f32:	4413      	add	r3, r2
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	01db      	lsls	r3, r3, #7
 8001f42:	4413      	add	r3, r2
 8001f44:	3384      	adds	r3, #132	; 0x84
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	01d2      	lsls	r2, r2, #7
 8001f52:	440a      	add	r2, r1
 8001f54:	3284      	adds	r2, #132	; 0x84
 8001f56:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001f5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f6a:	4413      	add	r3, r2
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	01db      	lsls	r3, r3, #7
 8001f78:	440b      	add	r3, r1
 8001f7a:	3384      	adds	r3, #132	; 0x84
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	01db      	lsls	r3, r3, #7
 8001f8e:	4413      	add	r3, r2
 8001f90:	3384      	adds	r3, #132	; 0x84
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	4611      	mov	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	01d2      	lsls	r2, r2, #7
 8001f9e:	440a      	add	r2, r1
 8001fa0:	3284      	adds	r2, #132	; 0x84
 8001fa2:	f023 0307 	bic.w	r3, r3, #7
 8001fa6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	01db      	lsls	r3, r3, #7
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3384      	adds	r3, #132	; 0x84
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	061b      	lsls	r3, r3, #24
 8001fd8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	01db      	lsls	r3, r3, #7
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3384      	adds	r3, #132	; 0x84
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	01db      	lsls	r3, r3, #7
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3384      	adds	r3, #132	; 0x84
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002004:	461a      	mov	r2, r3
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	431a      	orrs	r2, r3
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	431a      	orrs	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4619      	mov	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	440b      	add	r3, r1
 800201a:	3384      	adds	r3, #132	; 0x84
 800201c:	4619      	mov	r1, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	01db      	lsls	r3, r3, #7
 800202e:	4413      	add	r3, r2
 8002030:	3384      	adds	r3, #132	; 0x84
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	4611      	mov	r1, r2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	01d2      	lsls	r2, r2, #7
 800203e:	440a      	add	r2, r1
 8002040:	3284      	adds	r2, #132	; 0x84
 8002042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002046:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	01db      	lsls	r3, r3, #7
 8002052:	4413      	add	r3, r2
 8002054:	3384      	adds	r3, #132	; 0x84
 8002056:	461a      	mov	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4413      	add	r3, r2
 800206a:	3384      	adds	r3, #132	; 0x84
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	01db      	lsls	r3, r3, #7
 8002078:	440b      	add	r3, r1
 800207a:	3384      	adds	r3, #132	; 0x84
 800207c:	4619      	mov	r1, r3
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <LTDC_SetConfig+0x32c>)
 8002080:	4013      	ands	r3, r2
 8002082:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	69da      	ldr	r2, [r3, #28]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	68f9      	ldr	r1, [r7, #12]
 800208e:	6809      	ldr	r1, [r1, #0]
 8002090:	4608      	mov	r0, r1
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	01c9      	lsls	r1, r1, #7
 8002096:	4401      	add	r1, r0
 8002098:	3184      	adds	r1, #132	; 0x84
 800209a:	4313      	orrs	r3, r2
 800209c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	01db      	lsls	r3, r3, #7
 80020a8:	4413      	add	r3, r2
 80020aa:	3384      	adds	r3, #132	; 0x84
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	01db      	lsls	r3, r3, #7
 80020b8:	4413      	add	r3, r2
 80020ba:	3384      	adds	r3, #132	; 0x84
 80020bc:	461a      	mov	r2, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4413      	add	r3, r2
 80020ce:	3384      	adds	r3, #132	; 0x84
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d102      	bne.n	80020e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80020e0:	2304      	movs	r3, #4
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	e01b      	b.n	800211e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80020ee:	2303      	movs	r3, #3
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e014      	b.n	800211e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00b      	beq.n	8002114 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002100:	2b02      	cmp	r3, #2
 8002102:	d007      	beq.n	8002114 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002108:	2b03      	cmp	r3, #3
 800210a:	d003      	beq.n	8002114 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002110:	2b07      	cmp	r3, #7
 8002112:	d102      	bne.n	800211a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002114:	2302      	movs	r3, #2
 8002116:	61fb      	str	r3, [r7, #28]
 8002118:	e001      	b.n	800211e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	4413      	add	r3, r2
 800212a:	3384      	adds	r3, #132	; 0x84
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	4611      	mov	r1, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	01d2      	lsls	r2, r2, #7
 8002138:	440a      	add	r2, r1
 800213a:	3284      	adds	r2, #132	; 0x84
 800213c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002140:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1acb      	subs	r3, r1, r3
 8002158:	69f9      	ldr	r1, [r7, #28]
 800215a:	fb01 f303 	mul.w	r3, r1, r3
 800215e:	3307      	adds	r3, #7
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	6809      	ldr	r1, [r1, #0]
 8002164:	4608      	mov	r0, r1
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	01c9      	lsls	r1, r1, #7
 800216a:	4401      	add	r1, r0
 800216c:	3184      	adds	r1, #132	; 0x84
 800216e:	4313      	orrs	r3, r2
 8002170:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	4413      	add	r3, r2
 800217e:	3384      	adds	r3, #132	; 0x84
 8002180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	01db      	lsls	r3, r3, #7
 800218c:	440b      	add	r3, r1
 800218e:	3384      	adds	r3, #132	; 0x84
 8002190:	4619      	mov	r1, r3
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <LTDC_SetConfig+0x330>)
 8002194:	4013      	ands	r3, r2
 8002196:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	01db      	lsls	r3, r3, #7
 80021a2:	4413      	add	r3, r2
 80021a4:	3384      	adds	r3, #132	; 0x84
 80021a6:	461a      	mov	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	01db      	lsls	r3, r3, #7
 80021b8:	4413      	add	r3, r2
 80021ba:	3384      	adds	r3, #132	; 0x84
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	4611      	mov	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	01d2      	lsls	r2, r2, #7
 80021c8:	440a      	add	r2, r1
 80021ca:	3284      	adds	r2, #132	; 0x84
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	fffff8f8 	.word	0xfffff8f8
 80021e4:	fffff800 	.word	0xfffff800

080021e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d00a      	beq.n	8002212 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e040      	b.n	8002290 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e03e      	b.n	8002290 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800221a:	491f      	ldr	r1, [pc, #124]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4313      	orrs	r3, r2
 8002220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002222:	f7ff f8c9 	bl	80013b8 <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002228:	e009      	b.n	800223e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800222a:	f7ff f8c5 	bl	80013b8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002238:	d901      	bls.n	800223e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e028      	b.n	8002290 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224a:	d1ee      	bne.n	800222a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b1e      	cmp	r3, #30
 8002250:	d008      	beq.n	8002264 <HAL_PWREx_ConfigSupply+0x7c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b2e      	cmp	r3, #46	; 0x2e
 8002256:	d005      	beq.n	8002264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b1d      	cmp	r3, #29
 800225c:	d002      	beq.n	8002264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b2d      	cmp	r3, #45	; 0x2d
 8002262:	d114      	bne.n	800228e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002264:	f7ff f8a8 	bl	80013b8 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800226a:	e009      	b.n	8002280 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800226c:	f7ff f8a4 	bl	80013b8 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800227a:	d901      	bls.n	8002280 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e007      	b.n	8002290 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_PWREx_ConfigSupply+0xb0>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d1ee      	bne.n	800226c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	58024800 	.word	0x58024800

0800229c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3f4      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80b3 	beq.w	8002422 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022bc:	4b95      	ldr	r3, [pc, #596]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022c6:	4b93      	ldr	r3, [pc, #588]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d007      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46>
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2b18      	cmp	r3, #24
 80022d6:	d112      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d10d      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8098 	beq.w	8002420 <HAL_RCC_OscConfig+0x184>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 8093 	bne.w	8002420 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e3cc      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x7a>
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e058      	b.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d112      	bne.n	8002344 <HAL_RCC_OscConfig+0xa8>
 800231e:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7c      	ldr	r2, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002330:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a76      	ldr	r2, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800233c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e041      	b.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d112      	bne.n	8002374 <HAL_RCC_OscConfig+0xd8>
 800234e:	4b71      	ldr	r3, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a70      	ldr	r2, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b6e      	ldr	r3, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a6d      	ldr	r2, [pc, #436]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002360:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b6b      	ldr	r3, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e029      	b.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800237c:	d112      	bne.n	80023a4 <HAL_RCC_OscConfig+0x108>
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a64      	ldr	r2, [pc, #400]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002390:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a5e      	ldr	r2, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	e011      	b.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 80023a4:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a57      	ldr	r2, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b55      	ldr	r3, [pc, #340]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fff2 	bl	80013b8 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe ffee 	bl	80013b8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e356      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x13c>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f8:	f7fe ffde 	bl	80013b8 <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe ffda 	bl	80013b8 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e342      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002412:	4b40      	ldr	r3, [pc, #256]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x164>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 808d 	beq.w	800254a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002430:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002438:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800243a:	4b36      	ldr	r3, [pc, #216]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d007      	beq.n	8002456 <HAL_RCC_OscConfig+0x1ba>
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b18      	cmp	r3, #24
 800244a:	d137      	bne.n	80024bc <HAL_RCC_OscConfig+0x220>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d132      	bne.n	80024bc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002456:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <HAL_RCC_OscConfig+0x1d2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e314      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800246e:	4b29      	ldr	r3, [pc, #164]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0219 	bic.w	r2, r3, #25
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4926      	ldr	r1, [pc, #152]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002480:	f7fe ff9a 	bl	80013b8 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002488:	f7fe ff96 	bl	80013b8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e2fe      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	061b      	lsls	r3, r3, #24
 80024b4:	4917      	ldr	r1, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ba:	e046      	b.n	800254a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d029      	beq.n	8002518 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f023 0219 	bic.w	r2, r3, #25
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4910      	ldr	r1, [pc, #64]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d6:	f7fe ff6f 	bl	80013b8 <HAL_GetTick>
 80024da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024de:	f7fe ff6b 	bl	80013b8 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e2d3      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	061b      	lsls	r3, r3, #24
 800250a:	4902      	ldr	r1, [pc, #8]	; (8002514 <HAL_RCC_OscConfig+0x278>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	e01b      	b.n	800254a <HAL_RCC_OscConfig+0x2ae>
 8002512:	bf00      	nop
 8002514:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002518:	4b97      	ldr	r3, [pc, #604]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a96      	ldr	r2, [pc, #600]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe ff48 	bl	80013b8 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252c:	f7fe ff44 	bl	80013b8 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e2ac      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800253e:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d06a      	beq.n	800262c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b88      	ldr	r3, [pc, #544]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800255e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002560:	4b85      	ldr	r3, [pc, #532]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d007      	beq.n	800257c <HAL_RCC_OscConfig+0x2e0>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b18      	cmp	r3, #24
 8002570:	d11b      	bne.n	80025aa <HAL_RCC_OscConfig+0x30e>
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0303 	and.w	r3, r3, #3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d116      	bne.n	80025aa <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800257c:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x2f8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b80      	cmp	r3, #128	; 0x80
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e281      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002594:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	4975      	ldr	r1, [pc, #468]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a8:	e040      	b.n	800262c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d023      	beq.n	80025fa <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025b2:	4b71      	ldr	r3, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a70      	ldr	r2, [pc, #448]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fefb 	bl	80013b8 <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025c6:	f7fe fef7 	bl	80013b8 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e25f      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d8:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0f0      	beq.n	80025c6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	4961      	ldr	r1, [pc, #388]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60cb      	str	r3, [r1, #12]
 80025f8:	e018      	b.n	800262c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025fa:	4b5f      	ldr	r3, [pc, #380]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5e      	ldr	r2, [pc, #376]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fed7 	bl	80013b8 <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800260e:	f7fe fed3 	bl	80013b8 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e23b      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002620:	4b55      	ldr	r3, [pc, #340]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d036      	beq.n	80026a6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d019      	beq.n	8002674 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002640:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	4a4c      	ldr	r2, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe feb4 	bl	80013b8 <HAL_GetTick>
 8002650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe feb0 	bl	80013b8 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e218      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x3b8>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b40      	ldr	r3, [pc, #256]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fe9a 	bl	80013b8 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe fe96 	bl	80013b8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1fe      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800269a:	4b37      	ldr	r3, [pc, #220]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800269c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d036      	beq.n	8002720 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d019      	beq.n	80026ee <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a2e      	ldr	r2, [pc, #184]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026c6:	f7fe fe77 	bl	80013b8 <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026ce:	f7fe fe73 	bl	80013b8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e1db      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x432>
 80026ec:	e018      	b.n	8002720 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fe5d 	bl	80013b8 <HAL_GetTick>
 80026fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002702:	f7fe fe59 	bl	80013b8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1c1      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f0      	bne.n	8002702 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80af 	beq.w	800288c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <HAL_RCC_OscConfig+0x4e0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a12      	ldr	r2, [pc, #72]	; (800277c <HAL_RCC_OscConfig+0x4e0>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273a:	f7fe fe3d 	bl	80013b8 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7fe fe39 	bl	80013b8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e1a1      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_OscConfig+0x4e0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d10b      	bne.n	8002780 <HAL_RCC_OscConfig+0x4e4>
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a02      	ldr	r2, [pc, #8]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	e05b      	b.n	800282e <HAL_RCC_OscConfig+0x592>
 8002776:	bf00      	nop
 8002778:	58024400 	.word	0x58024400
 800277c:	58024800 	.word	0x58024800
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <HAL_RCC_OscConfig+0x512>
 8002788:	4b9d      	ldr	r3, [pc, #628]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a9c      	ldr	r2, [pc, #624]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	4b9a      	ldr	r3, [pc, #616]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a99      	ldr	r2, [pc, #612]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800279a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	4b97      	ldr	r3, [pc, #604]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a96      	ldr	r2, [pc, #600]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	e03f      	b.n	800282e <HAL_RCC_OscConfig+0x592>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d112      	bne.n	80027dc <HAL_RCC_OscConfig+0x540>
 80027b6:	4b92      	ldr	r3, [pc, #584]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a91      	ldr	r2, [pc, #580]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	4b8f      	ldr	r3, [pc, #572]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c6:	4a8e      	ldr	r2, [pc, #568]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027cc:	6713      	str	r3, [r2, #112]	; 0x70
 80027ce:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	4a8b      	ldr	r2, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6713      	str	r3, [r2, #112]	; 0x70
 80027da:	e028      	b.n	800282e <HAL_RCC_OscConfig+0x592>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b85      	cmp	r3, #133	; 0x85
 80027e2:	d112      	bne.n	800280a <HAL_RCC_OscConfig+0x56e>
 80027e4:	4b86      	ldr	r3, [pc, #536]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a85      	ldr	r2, [pc, #532]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a82      	ldr	r2, [pc, #520]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
 80027fc:	4b80      	ldr	r3, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a7f      	ldr	r2, [pc, #508]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e011      	b.n	800282e <HAL_RCC_OscConfig+0x592>
 800280a:	4b7d      	ldr	r3, [pc, #500]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a7c      	ldr	r2, [pc, #496]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	4b7a      	ldr	r3, [pc, #488]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a79      	ldr	r2, [pc, #484]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4b77      	ldr	r3, [pc, #476]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a76      	ldr	r2, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fdbf 	bl	80013b8 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe fdbb 	bl	80013b8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e121      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x5a2>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fda9 	bl	80013b8 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fda5 	bl	80013b8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e10b      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002880:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 8100 	beq.w	8002a96 <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800289e:	2b18      	cmp	r3, #24
 80028a0:	f000 80bb 	beq.w	8002a1a <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	f040 8095 	bne.w	80029d8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80028b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fd7d 	bl	80013b8 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c2:	f7fe fd79 	bl	80013b8 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e0e1      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d4:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80028e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e4:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_OscConfig+0x768>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028f0:	0112      	lsls	r2, r2, #4
 80028f2:	430a      	orrs	r2, r1
 80028f4:	4942      	ldr	r1, [pc, #264]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	628b      	str	r3, [r1, #40]	; 0x28
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	3b01      	subs	r3, #1
 8002900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002908:	3b01      	subs	r3, #1
 800290a:	025b      	lsls	r3, r3, #9
 800290c:	b29b      	uxth	r3, r3
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
 8002918:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	3b01      	subs	r3, #1
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800292a:	4935      	ldr	r1, [pc, #212]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800292c:	4313      	orrs	r3, r2
 800292e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	4a32      	ldr	r2, [pc, #200]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800293c:	4b30      	ldr	r3, [pc, #192]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800293e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002940:	4b31      	ldr	r3, [pc, #196]	; (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002942:	4013      	ands	r3, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002948:	00d2      	lsls	r2, r2, #3
 800294a:	492d      	ldr	r1, [pc, #180]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800294c:	4313      	orrs	r3, r2
 800294e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	f023 020c 	bic.w	r2, r3, #12
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4928      	ldr	r1, [pc, #160]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800295e:	4313      	orrs	r3, r2
 8002960:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002962:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f023 0202 	bic.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4924      	ldr	r1, [pc, #144]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002970:	4313      	orrs	r3, r2
 8002972:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	4a21      	ldr	r2, [pc, #132]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800297a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800297e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800298a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 8002992:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a15      	ldr	r2, [pc, #84]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80029aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe fd02 	bl	80013b8 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe fcfe 	bl	80013b8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e066      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x71c>
 80029d6:	e05e      	b.n	8002a96 <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_RCC_OscConfig+0x764>)
 80029de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7fe fce8 	bl	80013b8 <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ec:	f7fe fce4 	bl	80013b8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d908      	bls.n	8002a0c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e04c      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
 80029fe:	bf00      	nop
 8002a00:	58024400 	.word	0x58024400
 8002a04:	fffffc0c 	.word	0xfffffc0c
 8002a08:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_OscConfig+0x804>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e9      	bne.n	80029ec <HAL_RCC_OscConfig+0x750>
 8002a18:	e03d      	b.n	8002a96 <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_OscConfig+0x804>)
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <HAL_RCC_OscConfig+0x804>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d031      	beq.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0203 	and.w	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d12a      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d122      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d11a      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0a5b      	lsrs	r3, r3, #9
 8002a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d111      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d108      	bne.n	8002a92 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	0e1b      	lsrs	r3, r3, #24
 8002a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	58024400 	.word	0x58024400

08002aa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e19c      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b8a      	ldr	r3, [pc, #552]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b87      	ldr	r3, [pc, #540]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	4985      	ldr	r1, [pc, #532]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b83      	ldr	r3, [pc, #524]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e184      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	4b7b      	ldr	r3, [pc, #492]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b04:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4975      	ldr	r1, [pc, #468]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d908      	bls.n	8002b44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	496a      	ldr	r1, [pc, #424]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	495e      	ldr	r1, [pc, #376]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4953      	ldr	r1, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d908      	bls.n	8002bce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f023 020f 	bic.w	r2, r3, #15
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4947      	ldr	r1, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d055      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4940      	ldr	r1, [pc, #256]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf4:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d121      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0f6      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d115      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0ea      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0de      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c34:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0d6      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c44:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f023 0207 	bic.w	r2, r3, #7
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fe fbaf 	bl	80013b8 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7fe fbab 	bl	80013b8 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0be      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d1eb      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d208      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f023 020f 	bic.w	r2, r3, #15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d214      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 020f 	bic.w	r2, r3, #15
 8002cca:	4906      	ldr	r1, [pc, #24]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e086      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
 8002ce4:	52002000 	.word	0x52002000
 8002ce8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d208      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d08:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4939      	ldr	r1, [pc, #228]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d208      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	492e      	ldr	r1, [pc, #184]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	4b28      	ldr	r3, [pc, #160]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d208      	bcs.n	8002d76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4922      	ldr	r1, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d208      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4917      	ldr	r1, [pc, #92]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002da4:	f000 f834 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	4912      	ldr	r1, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x35c>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <HAL_RCC_ClockConfig+0x35c>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x360>)
 8002dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_RCC_ClockConfig+0x364>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x368>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fa9c 	bl	8001324 <HAL_InitTick>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	08005b70 	.word	0x08005b70
 8002e04:	24000004 	.word	0x24000004
 8002e08:	24000000 	.word	0x24000000
 8002e0c:	24000008 	.word	0x24000008

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e16:	4bb3      	ldr	r3, [pc, #716]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e1e:	2b18      	cmp	r3, #24
 8002e20:	f200 8155 	bhi.w	80030ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002e24:	a201      	add	r2, pc, #4	; (adr r2, 8002e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e91 	.word	0x08002e91
 8002e30:	080030cf 	.word	0x080030cf
 8002e34:	080030cf 	.word	0x080030cf
 8002e38:	080030cf 	.word	0x080030cf
 8002e3c:	080030cf 	.word	0x080030cf
 8002e40:	080030cf 	.word	0x080030cf
 8002e44:	080030cf 	.word	0x080030cf
 8002e48:	080030cf 	.word	0x080030cf
 8002e4c:	08002eb7 	.word	0x08002eb7
 8002e50:	080030cf 	.word	0x080030cf
 8002e54:	080030cf 	.word	0x080030cf
 8002e58:	080030cf 	.word	0x080030cf
 8002e5c:	080030cf 	.word	0x080030cf
 8002e60:	080030cf 	.word	0x080030cf
 8002e64:	080030cf 	.word	0x080030cf
 8002e68:	080030cf 	.word	0x080030cf
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	080030cf 	.word	0x080030cf
 8002e74:	080030cf 	.word	0x080030cf
 8002e78:	080030cf 	.word	0x080030cf
 8002e7c:	080030cf 	.word	0x080030cf
 8002e80:	080030cf 	.word	0x080030cf
 8002e84:	080030cf 	.word	0x080030cf
 8002e88:	080030cf 	.word	0x080030cf
 8002e8c:	08002ec3 	.word	0x08002ec3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e90:	4b94      	ldr	r3, [pc, #592]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e9c:	4b91      	ldr	r3, [pc, #580]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002eae:	e111      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb0:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb2:	61bb      	str	r3, [r7, #24]
    break;
 8002eb4:	e10e      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eb8:	61bb      	str	r3, [r7, #24]
    break;
 8002eba:	e10b      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	; (80030f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ebe:	61bb      	str	r3, [r7, #24]
    break;
 8002ec0:	e108      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ec2:	4b88      	ldr	r3, [pc, #544]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ecc:	4b85      	ldr	r3, [pc, #532]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ed8:	4b82      	ldr	r3, [pc, #520]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002ee2:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80e1 	beq.w	80030c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	f000 8083 	beq.w	8003014 <HAL_RCC_GetSysClockFreq+0x204>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f200 80a1 	bhi.w	8003058 <HAL_RCC_GetSysClockFreq+0x248>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x114>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d056      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f22:	e099      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02d      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f30:	4b6c      	ldr	r3, [pc, #432]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5a:	4b62      	ldr	r3, [pc, #392]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f8a:	e087      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9e:	4b51      	ldr	r3, [pc, #324]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fce:	e065      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe2:	4b40      	ldr	r3, [pc, #256]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003012:	e043      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003100 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003026:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003036:	ed97 6a02 	vldr	s12, [r7, #8]
 800303a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003056:	e021      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307a:	ed97 6a02 	vldr	s12, [r7, #8]
 800307e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800309a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	0a5b      	lsrs	r3, r3, #9
 80030a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a6:	3301      	adds	r3, #1
 80030a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80030b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c0:	ee17 3a90 	vmov	r3, s15
 80030c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d0:	61bb      	str	r3, [r7, #24]
    break;
 80030d2:	bf00      	nop
  }

  return sysclockfreq;
 80030d4:	69bb      	ldr	r3, [r7, #24]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
 80030e8:	03d09000 	.word	0x03d09000
 80030ec:	003d0900 	.word	0x003d0900
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	46000000 	.word	0x46000000
 80030f8:	4c742400 	.word	0x4c742400
 80030fc:	4a742400 	.word	0x4a742400
 8003100:	4af42400 	.word	0x4af42400

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800310a:	f7ff fe81 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <HAL_RCC_GetHCLKFreq+0x50>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490f      	ldr	r1, [pc, #60]	; (8003158 <HAL_RCC_GetHCLKFreq+0x54>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_RCC_GetHCLKFreq+0x50>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	4a09      	ldr	r2, [pc, #36]	; (8003158 <HAL_RCC_GetHCLKFreq+0x54>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a07      	ldr	r2, [pc, #28]	; (800315c <HAL_RCC_GetHCLKFreq+0x58>)
 8003140:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003142:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCC_GetHCLKFreq+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58024400 	.word	0x58024400
 8003158:	08005b70 	.word	0x08005b70
 800315c:	24000004 	.word	0x24000004
 8003160:	24000000 	.word	0x24000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003168:	f7ff ffcc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4904      	ldr	r1, [pc, #16]	; (800318c <HAL_RCC_GetPCLK1Freq+0x28>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	58024400 	.word	0x58024400
 800318c:	08005b70 	.word	0x08005b70

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003194:	f7ff ffb6 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	08005b70 	.word	0x08005b70

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03f      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e0:	d02a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031e6:	d824      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ec:	d018      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031f2:	d81e      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031fc:	d007      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031fe:	e018      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4b9f      	ldr	r3, [pc, #636]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a9e      	ldr	r2, [pc, #632]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800320c:	e015      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2102      	movs	r1, #2
 8003214:	4618      	mov	r0, r3
 8003216:	f001 f99b 	bl	8004550 <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fa44 	bl	80046b4 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324c:	498c      	ldr	r1, [pc, #560]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800324e:	4313      	orrs	r3, r2
 8003250:	650b      	str	r3, [r1, #80]	; 0x50
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d03d      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	2b04      	cmp	r3, #4
 800326a:	d826      	bhi.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003289 	.word	0x08003289
 8003278:	08003297 	.word	0x08003297
 800327c:	080032a9 	.word	0x080032a9
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003288:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	4a7c      	ldr	r2, [pc, #496]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800328e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003294:	e015      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3304      	adds	r3, #4
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f957 	bl	8004550 <RCCEx_PLL2_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032a6:	e00c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3324      	adds	r3, #36	; 0x24
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fa00 	bl	80046b4 <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
      break;
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80032c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c8:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032cc:	f023 0207 	bic.w	r2, r3, #7
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d4:	496a      	ldr	r1, [pc, #424]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	650b      	str	r3, [r1, #80]	; 0x50
 80032da:	e001      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
 80032de:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d04a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032f4:	d031      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80032f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80032fa:	d82b      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003300:	d02d      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d825      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003308:	2bc0      	cmp	r3, #192	; 0xc0
 800330a:	d02a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800330c:	2bc0      	cmp	r3, #192	; 0xc0
 800330e:	d821      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d016      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003314:	2b80      	cmp	r3, #128	; 0x80
 8003316:	d81d      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d007      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003320:	e018      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003322:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003326:	4a56      	ldr	r2, [pc, #344]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800332e:	e019      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f90a 	bl	8004550 <RCCEx_PLL2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003340:	e010      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3324      	adds	r3, #36	; 0x24
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f9b3 	bl	80046b4 <RCCEx_PLL3_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003352:	e007      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
      break;
 8003358:	e004      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800336c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800336e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	4942      	ldr	r1, [pc, #264]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	650b      	str	r3, [r1, #80]	; 0x50
 800337c:	e001      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04f      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003396:	d036      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003398:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800339c:	d830      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800339e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a2:	d032      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80033a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033a8:	d82a      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80033aa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033ae:	d02e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x252>
 80033b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033b4:	d824      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d018      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x232>
 80033bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c0:	d81e      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x212>
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ca:	d007      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x220>
 80033cc:	e018      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ce:	4b2c      	ldr	r3, [pc, #176]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	4a2b      	ldr	r2, [pc, #172]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80033da:	e019      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	2100      	movs	r1, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f8b4 	bl	8004550 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80033ec:	e010      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3324      	adds	r3, #36	; 0x24
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 f95d 	bl	80046b4 <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80033fe:	e007      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	75fb      	strb	r3, [r7, #23]
      break;
 8003404:	e004      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800340e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003422:	4917      	ldr	r1, [pc, #92]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003424:	4313      	orrs	r3, r2
 8003426:	650b      	str	r3, [r1, #80]	; 0x50
 8003428:	e001      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d034      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343e:	2b30      	cmp	r3, #48	; 0x30
 8003440:	d01c      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d817      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003446:	2b20      	cmp	r3, #32
 8003448:	d00c      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d813      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003452:	2b10      	cmp	r3, #16
 8003454:	d10f      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003462:	e010      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2102      	movs	r1, #2
 800346a:	4618      	mov	r0, r3
 800346c:	f001 f870 	bl	8004550 <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003474:	e007      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	75fb      	strb	r3, [r7, #23]
      break;
 800347a:	e004      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 800347c:	bf00      	nop
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003480:	58024400 	.word	0x58024400
      break;
 8003484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d109      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800348c:	4b9b      	ldr	r3, [pc, #620]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003498:	4998      	ldr	r1, [pc, #608]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800349a:	4313      	orrs	r3, r2
 800349c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800349e:	e001      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d047      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b8:	d030      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d82a      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80034c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034c4:	d02c      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80034c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ca:	d824      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80034cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d0:	d018      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d6:	d81e      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d007      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80034e2:	e018      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e4:	4b85      	ldr	r3, [pc, #532]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	4a84      	ldr	r2, [pc, #528]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034f0:	e017      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f001 f829 	bl	8004550 <RCCEx_PLL2_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003502:	e00e      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3324      	adds	r3, #36	; 0x24
 8003508:	2100      	movs	r1, #0
 800350a:	4618      	mov	r0, r3
 800350c:	f001 f8d2 	bl	80046b4 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003514:	e005      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
      break;
 800351a:	e002      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800351c:	bf00      	nop
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003520:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003528:	4b74      	ldr	r3, [pc, #464]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003534:	4971      	ldr	r1, [pc, #452]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003536:	4313      	orrs	r3, r2
 8003538:	650b      	str	r3, [r1, #80]	; 0x50
 800353a:	e001      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	7dfb      	ldrb	r3, [r7, #23]
 800353e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d049      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d02e      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d828      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800355c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003560:	d02a      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	d822      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800356c:	d026      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 800356e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003572:	d81c      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003578:	d010      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d816      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003588:	d111      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 ffdd 	bl	8004550 <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800359a:	e012      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3324      	adds	r3, #36	; 0x24
 80035a0:	2101      	movs	r1, #1
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 f886 	bl	80046b4 <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035ac:	e009      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	75fb      	strb	r3, [r7, #23]
      break;
 80035b2:	e006      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80035b4:	bf00      	nop
 80035b6:	e004      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80035b8:	bf00      	nop
 80035ba:	e002      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80035c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d4:	4949      	ldr	r1, [pc, #292]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	650b      	str	r3, [r1, #80]	; 0x50
 80035da:	e001      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d053      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035f2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80035f6:	d034      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80035f8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80035fc:	d82e      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80035fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003602:	d030      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d02c      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003616:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800361c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003620:	d81c      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d010      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800362c:	d816      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01f      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003636:	d111      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3304      	adds	r3, #4
 800363c:	2101      	movs	r1, #1
 800363e:	4618      	mov	r0, r3
 8003640:	f000 ff86 	bl	8004550 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003648:	e014      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3324      	adds	r3, #36	; 0x24
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f001 f82f 	bl	80046b4 <RCCEx_PLL3_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800365a:	e00b      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
      break;
 8003660:	e008      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003662:	bf00      	nop
 8003664:	e006      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003666:	bf00      	nop
 8003668:	e004      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003674:	7dfb      	ldrb	r3, [r7, #23]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800367a:	4b20      	ldr	r3, [pc, #128]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003688:	491c      	ldr	r1, [pc, #112]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800368a:	4313      	orrs	r3, r2
 800368c:	658b      	str	r3, [r1, #88]	; 0x58
 800368e:	e001      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7dfb      	ldrb	r3, [r7, #23]
 8003692:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d031      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d00e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ae:	d814      	bhi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b8:	d10f      	bne.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036c6:	e00c      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	2101      	movs	r1, #1
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 ff3e 	bl	8004550 <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036d8:	e003      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
      break;
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80036e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e2:	7dfb      	ldrb	r3, [r7, #23]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	4901      	ldr	r1, [pc, #4]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	650b      	str	r3, [r1, #80]	; 0x50
 80036fa:	e003      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x548>
 80036fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d032      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	2b03      	cmp	r3, #3
 8003716:	d81b      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003757 	.word	0x08003757
 8003724:	08003731 	.word	0x08003731
 8003728:	0800373f 	.word	0x0800373f
 800372c:	08003757 	.word	0x08003757
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003730:	4bb2      	ldr	r3, [pc, #712]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	4ab1      	ldr	r2, [pc, #708]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800373c:	e00c      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3304      	adds	r3, #4
 8003742:	2102      	movs	r1, #2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 ff03 	bl	8004550 <RCCEx_PLL2_Config>
 800374a:	4603      	mov	r3, r0
 800374c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	75fb      	strb	r3, [r7, #23]
      break;
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800375e:	4ba7      	ldr	r3, [pc, #668]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f023 0203 	bic.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	49a4      	ldr	r1, [pc, #656]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800376c:	4313      	orrs	r3, r2
 800376e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003770:	e001      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8086 	beq.w	8003890 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003784:	4b9e      	ldr	r3, [pc, #632]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a9d      	ldr	r2, [pc, #628]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800378a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003790:	f7fd fe12 	bl	80013b8 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003796:	e009      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003798:	f7fd fe0e 	bl	80013b8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d902      	bls.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	75fb      	strb	r3, [r7, #23]
        break;
 80037aa:	e005      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ac:	4b94      	ldr	r3, [pc, #592]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d166      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037be:	4b8f      	ldr	r3, [pc, #572]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c8:	4053      	eors	r3, r2
 80037ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d013      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037d2:	4b8a      	ldr	r3, [pc, #552]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037da:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037dc:	4b87      	ldr	r3, [pc, #540]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a86      	ldr	r2, [pc, #536]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e8:	4b84      	ldr	r3, [pc, #528]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4a83      	ldr	r2, [pc, #524]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037f4:	4a81      	ldr	r2, [pc, #516]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003804:	d115      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd fdd7 	bl	80013b8 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800380c:	e00b      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fd fdd3 	bl	80013b8 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	; 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d902      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	75fb      	strb	r3, [r7, #23]
            break;
 8003824:	e005      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003826:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0ed      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003832:	7dfb      	ldrb	r3, [r7, #23]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d126      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003846:	d10d      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003848:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003856:	0919      	lsrs	r1, r3, #4
 8003858:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800385a:	400b      	ands	r3, r1
 800385c:	4967      	ldr	r1, [pc, #412]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800385e:	4313      	orrs	r3, r2
 8003860:	610b      	str	r3, [r1, #16]
 8003862:	e005      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003864:	4b65      	ldr	r3, [pc, #404]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	4a64      	ldr	r2, [pc, #400]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800386a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800386e:	6113      	str	r3, [r2, #16]
 8003870:	4b62      	ldr	r3, [pc, #392]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	495f      	ldr	r1, [pc, #380]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003880:	4313      	orrs	r3, r2
 8003882:	670b      	str	r3, [r1, #112]	; 0x70
 8003884:	e004      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	75bb      	strb	r3, [r7, #22]
 800388a:	e001      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d07f      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a2:	2b28      	cmp	r3, #40	; 0x28
 80038a4:	d866      	bhi.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	0800397b 	.word	0x0800397b
 80038b0:	08003975 	.word	0x08003975
 80038b4:	08003975 	.word	0x08003975
 80038b8:	08003975 	.word	0x08003975
 80038bc:	08003975 	.word	0x08003975
 80038c0:	08003975 	.word	0x08003975
 80038c4:	08003975 	.word	0x08003975
 80038c8:	08003975 	.word	0x08003975
 80038cc:	08003951 	.word	0x08003951
 80038d0:	08003975 	.word	0x08003975
 80038d4:	08003975 	.word	0x08003975
 80038d8:	08003975 	.word	0x08003975
 80038dc:	08003975 	.word	0x08003975
 80038e0:	08003975 	.word	0x08003975
 80038e4:	08003975 	.word	0x08003975
 80038e8:	08003975 	.word	0x08003975
 80038ec:	08003963 	.word	0x08003963
 80038f0:	08003975 	.word	0x08003975
 80038f4:	08003975 	.word	0x08003975
 80038f8:	08003975 	.word	0x08003975
 80038fc:	08003975 	.word	0x08003975
 8003900:	08003975 	.word	0x08003975
 8003904:	08003975 	.word	0x08003975
 8003908:	08003975 	.word	0x08003975
 800390c:	0800397b 	.word	0x0800397b
 8003910:	08003975 	.word	0x08003975
 8003914:	08003975 	.word	0x08003975
 8003918:	08003975 	.word	0x08003975
 800391c:	08003975 	.word	0x08003975
 8003920:	08003975 	.word	0x08003975
 8003924:	08003975 	.word	0x08003975
 8003928:	08003975 	.word	0x08003975
 800392c:	0800397b 	.word	0x0800397b
 8003930:	08003975 	.word	0x08003975
 8003934:	08003975 	.word	0x08003975
 8003938:	08003975 	.word	0x08003975
 800393c:	08003975 	.word	0x08003975
 8003940:	08003975 	.word	0x08003975
 8003944:	08003975 	.word	0x08003975
 8003948:	08003975 	.word	0x08003975
 800394c:	0800397b 	.word	0x0800397b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fdfa 	bl	8004550 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003960:	e00c      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3324      	adds	r3, #36	; 0x24
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fea3 	bl	80046b4 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	75fb      	strb	r3, [r7, #23]
      break;
 8003978:	e000      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 800397a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397c:	7dfb      	ldrb	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003982:	4b1e      	ldr	r3, [pc, #120]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003990:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003992:	4313      	orrs	r3, r2
 8003994:	654b      	str	r3, [r1, #84]	; 0x54
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d03f      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d821      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80039b0:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	08003a09 	.word	0x08003a09
 80039bc:	080039d1 	.word	0x080039d1
 80039c0:	080039e3 	.word	0x080039e3
 80039c4:	08003a09 	.word	0x08003a09
 80039c8:	08003a09 	.word	0x08003a09
 80039cc:	08003a09 	.word	0x08003a09
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2101      	movs	r1, #1
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fdba 	bl	8004550 <RCCEx_PLL2_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039e0:	e013      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2101      	movs	r1, #1
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fe63 	bl	80046b4 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039f2:	e00a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e007      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80039fa:	bf00      	nop
 80039fc:	58024400 	.word	0x58024400
 8003a00:	58024800 	.word	0x58024800
 8003a04:	00ffffcf 	.word	0x00ffffcf
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a10:	4b9f      	ldr	r3, [pc, #636]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f023 0207 	bic.w	r2, r3, #7
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a1c:	499c      	ldr	r1, [pc, #624]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	654b      	str	r3, [r1, #84]	; 0x54
 8003a22:	e001      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a24:	7dfb      	ldrb	r3, [r7, #23]
 8003a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d039      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3a:	2b05      	cmp	r3, #5
 8003a3c:	d820      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003a3e:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a44:	08003a87 	.word	0x08003a87
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a6f 	.word	0x08003a6f
 8003a50:	08003a87 	.word	0x08003a87
 8003a54:	08003a87 	.word	0x08003a87
 8003a58:	08003a87 	.word	0x08003a87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fd74 	bl	8004550 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a6c:	e00c      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3324      	adds	r3, #36	; 0x24
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fe1d 	bl	80046b4 <RCCEx_PLL3_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a7e:	e003      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003a86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a88:	7dfb      	ldrb	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a8e:	4b80      	ldr	r3, [pc, #512]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	f023 0207 	bic.w	r2, r3, #7
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a9c:	497c      	ldr	r1, [pc, #496]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	658b      	str	r3, [r1, #88]	; 0x58
 8003aa2:	e001      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d04b      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003abe:	d02e      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac4:	d828      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d02a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d822      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad6:	d026      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003adc:	d81c      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d816      	bhi.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d111      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 fd28 	bl	8004550 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b04:	e012      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3324      	adds	r3, #36	; 0x24
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fdd1 	bl	80046b4 <RCCEx_PLL3_Config>
 8003b12:	4603      	mov	r3, r0
 8003b14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b16:	e009      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8003b2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b57      	ldr	r3, [pc, #348]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b40:	4953      	ldr	r1, [pc, #332]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	654b      	str	r3, [r1, #84]	; 0x54
 8003b46:	e001      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d04b      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b5e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b62:	d02e      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8003b64:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b68:	d828      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d02a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d822      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b7a:	d026      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b80:	d81c      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b86:	d010      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b8c:	d816      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d111      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fcd6 	bl	8004550 <RCCEx_PLL2_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ba8:	e012      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3324      	adds	r3, #36	; 0x24
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 fd7f 	bl	80046b4 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003bba:	e009      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8003bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd0:	7dfb      	ldrb	r3, [r7, #23]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003be4:	492a      	ldr	r1, [pc, #168]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c06:	d02e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003c08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003c1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003c20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8003c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c30:	d816      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fc84 	bl	8004550 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e012      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2102      	movs	r1, #2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 fd2d 	bl	80046b4 <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8003c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c88:	4901      	ldr	r1, [pc, #4]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fcfc 	bl	80046b4 <RCCEx_PLL3_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cc6:	4b8c      	ldr	r3, [pc, #560]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	4988      	ldr	r1, [pc, #544]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d10a      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fcdb 	bl	80046b4 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d08:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d16:	4978      	ldr	r1, [pc, #480]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d034      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d32:	d01d      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d38:	d817      	bhi.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d42:	d009      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003d44:	e011      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fbff 	bl	8004550 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d56:	e00c      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3324      	adds	r3, #36	; 0x24
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fca8 	bl	80046b4 <RCCEx_PLL3_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d6e:	e000      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d86:	495c      	ldr	r1, [pc, #368]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d8c:	e001      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d033      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003da8:	d01c      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003daa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dae:	d816      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db4:	d003      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dba:	d007      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003dbc:	e00f      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dbe:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dca:	e00c      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3324      	adds	r3, #36	; 0x24
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fc6e 	bl	80046b4 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dec:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dfa:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	654b      	str	r3, [r1, #84]	; 0x54
 8003e00:	e001      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
 8003e04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d029      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d007      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e20:	e00f      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e22:	4b35      	ldr	r3, [pc, #212]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2102      	movs	r1, #2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb8a 	bl	8004550 <RCCEx_PLL2_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e40:	e002      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	4927      	ldr	r1, [pc, #156]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e60:	e001      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3324      	adds	r3, #36	; 0x24
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fc1b 	bl	80046b4 <RCCEx_PLL3_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d035      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9e:	d017      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea4:	d811      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003ea6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d80b      	bhi.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d106      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ec8:	e007      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8003ed8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eee:	4902      	ldr	r1, [pc, #8]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ef4:	e004      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003ef6:	bf00      	nop
 8003ef8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f0c:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f18:	492d      	ldr	r1, [pc, #180]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d008      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f36:	4926      	ldr	r1, [pc, #152]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f54:	491e      	ldr	r1, [pc, #120]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f66:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f70:	6113      	str	r3, [r2, #16]
 8003f72:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f7c:	4914      	ldr	r1, [pc, #80]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	da08      	bge.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	490e      	ldr	r1, [pc, #56]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	4906      	ldr	r1, [pc, #24]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003fbc:	7dbb      	ldrb	r3, [r7, #22]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	58024400 	.word	0x58024400

08003fd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003fd8:	f7ff f894 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4904      	ldr	r1, [pc, #16]	; (8003ffc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	08005b70 	.word	0x08005b70

08004000 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004008:	4ba1      	ldr	r3, [pc, #644]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004012:	4b9f      	ldr	r3, [pc, #636]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	0b1b      	lsrs	r3, r3, #12
 8004018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800401c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800401e:	4b9c      	ldr	r3, [pc, #624]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	091b      	lsrs	r3, r3, #4
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800402a:	4b99      	ldr	r3, [pc, #612]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	08db      	lsrs	r3, r3, #3
 8004030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8111 	beq.w	8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	2b02      	cmp	r3, #2
 8004052:	f000 8083 	beq.w	800415c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	f200 80a1 	bhi.w	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d056      	beq.n	8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800406a:	e099      	b.n	80041a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800406c:	4b88      	ldr	r3, [pc, #544]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b00      	cmp	r3, #0
 8004076:	d02d      	beq.n	80040d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004078:	4b85      	ldr	r3, [pc, #532]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	08db      	lsrs	r3, r3, #3
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	4a84      	ldr	r2, [pc, #528]	; (8004294 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004084:	fa22 f303 	lsr.w	r3, r2, r3
 8004088:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b7b      	ldr	r3, [pc, #492]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040d2:	e087      	b.n	80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800429c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040e6:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800410a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800410e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004116:	e065      	b.n	80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800412a:	4b59      	ldr	r3, [pc, #356]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800413a:	ed97 6a03 	vldr	s12, [r7, #12]
 800413e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800414a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800414e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800415a:	e043      	b.n	80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004166:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800416a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800416e:	4b48      	ldr	r3, [pc, #288]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800417e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004182:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800418a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800418e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800419e:	e021      	b.n	80041e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041b2:	4b37      	ldr	r3, [pc, #220]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ba:	ee07 3a90 	vmov	s15, r3
 80041be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80041e4:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	0a5b      	lsrs	r3, r3, #9
 80041ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420a:	ee17 2a90 	vmov	r2, s15
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004212:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	ee07 3a90 	vmov	s15, r3
 8004220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800422c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004238:	ee17 2a90 	vmov	r2, s15
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	0e1b      	lsrs	r3, r3, #24
 8004246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800425a:	edd7 6a07 	vldr	s13, [r7, #28]
 800425e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004266:	ee17 2a90 	vmov	r2, s15
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800426e:	e008      	b.n	8004282 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
}
 8004282:	bf00      	nop
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
 8004294:	03d09000 	.word	0x03d09000
 8004298:	46000000 	.word	0x46000000
 800429c:	4c742400 	.word	0x4c742400
 80042a0:	4a742400 	.word	0x4a742400
 80042a4:	4af42400 	.word	0x4af42400

080042a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	; 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042b0:	4ba1      	ldr	r3, [pc, #644]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80042ba:	4b9f      	ldr	r3, [pc, #636]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	0d1b      	lsrs	r3, r3, #20
 80042c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042c6:	4b9c      	ldr	r3, [pc, #624]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80042d2:	4b99      	ldr	r3, [pc, #612]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8111 	beq.w	8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	f000 8083 	beq.w	8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b02      	cmp	r3, #2
 8004302:	f200 80a1 	bhi.w	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d056      	beq.n	80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004312:	e099      	b.n	8004448 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004314:	4b88      	ldr	r3, [pc, #544]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02d      	beq.n	800437c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004320:	4b85      	ldr	r3, [pc, #532]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	08db      	lsrs	r3, r3, #3
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	4a84      	ldr	r2, [pc, #528]	; (800453c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	ee07 3a90 	vmov	s15, r3
 8004338:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	ee07 3a90 	vmov	s15, r3
 8004342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800434a:	4b7b      	ldr	r3, [pc, #492]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435a:	ed97 6a03 	vldr	s12, [r7, #12]
 800435e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800436a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800436e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004376:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800437a:	e087      	b.n	800448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004544 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800439e:	ed97 6a03 	vldr	s12, [r7, #12]
 80043a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043be:	e065      	b.n	800448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043d2:	4b59      	ldr	r3, [pc, #356]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80043e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004402:	e043      	b.n	800448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800454c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004416:	4b48      	ldr	r3, [pc, #288]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004426:	ed97 6a03 	vldr	s12, [r7, #12]
 800442a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800442e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800443a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004446:	e021      	b.n	800448c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004452:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800445a:	4b37      	ldr	r3, [pc, #220]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004462:	ee07 3a90 	vmov	s15, r3
 8004466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446a:	ed97 6a03 	vldr	s12, [r7, #12]
 800446e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800447a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800447e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004486:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800448a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	0a5b      	lsrs	r3, r3, #9
 8004492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b2:	ee17 2a90 	vmov	r2, s15
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044ba:	4b1f      	ldr	r3, [pc, #124]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c4:	ee07 3a90 	vmov	s15, r3
 80044c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e0:	ee17 2a90 	vmov	r2, s15
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044e8:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	0e1b      	lsrs	r3, r3, #24
 80044ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004502:	edd7 6a07 	vldr	s13, [r7, #28]
 8004506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800450a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450e:	ee17 2a90 	vmov	r2, s15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004516:	e008      	b.n	800452a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
}
 800452a:	bf00      	nop
 800452c:	3724      	adds	r7, #36	; 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	58024400 	.word	0x58024400
 800453c:	03d09000 	.word	0x03d09000
 8004540:	46000000 	.word	0x46000000
 8004544:	4c742400 	.word	0x4c742400
 8004548:	4a742400 	.word	0x4a742400
 800454c:	4af42400 	.word	0x4af42400

08004550 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800455e:	4b53      	ldr	r3, [pc, #332]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b03      	cmp	r3, #3
 8004568:	d101      	bne.n	800456e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e099      	b.n	80046a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800456e:	4b4f      	ldr	r3, [pc, #316]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a4e      	ldr	r2, [pc, #312]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457a:	f7fc ff1d 	bl	80013b8 <HAL_GetTick>
 800457e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004580:	e008      	b.n	8004594 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004582:	f7fc ff19 	bl	80013b8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e086      	b.n	80046a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004594:	4b45      	ldr	r3, [pc, #276]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80045a0:	4b42      	ldr	r3, [pc, #264]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	493f      	ldr	r1, [pc, #252]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	628b      	str	r3, [r1, #40]	; 0x28
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	025b      	lsls	r3, r3, #9
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	3b01      	subs	r3, #1
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045e4:	4931      	ldr	r1, [pc, #196]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045ea:	4b30      	ldr	r3, [pc, #192]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	492d      	ldr	r1, [pc, #180]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f023 0220 	bic.w	r2, r3, #32
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4928      	ldr	r1, [pc, #160]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 800460a:	4313      	orrs	r3, r2
 800460c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800460e:	4b27      	ldr	r3, [pc, #156]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004614:	f023 0310 	bic.w	r3, r3, #16
 8004618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 800461c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <RCCEx_PLL2_Config+0x160>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	69d2      	ldr	r2, [r2, #28]
 8004626:	00d2      	lsls	r2, r2, #3
 8004628:	4920      	ldr	r1, [pc, #128]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800462e:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004634:	f043 0310 	orr.w	r3, r3, #16
 8004638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	4a19      	ldr	r2, [pc, #100]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800464a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800464c:	e00f      	b.n	800466e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 800465a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800465e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004660:	e005      	b.n	800466e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800466c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800466e:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800467a:	f7fc fe9d 	bl	80013b8 <HAL_GetTick>
 800467e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004680:	e008      	b.n	8004694 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004682:	f7fc fe99 	bl	80013b8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e006      	b.n	80046a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <RCCEx_PLL2_Config+0x15c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400
 80046b0:	ffff0007 	.word	0xffff0007

080046b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046c2:	4b53      	ldr	r3, [pc, #332]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d101      	bne.n	80046d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e099      	b.n	8004806 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046d2:	4b4f      	ldr	r3, [pc, #316]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a4e      	ldr	r2, [pc, #312]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046de:	f7fc fe6b 	bl	80013b8 <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046e6:	f7fc fe67 	bl	80013b8 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e086      	b.n	8004806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046f8:	4b45      	ldr	r3, [pc, #276]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f0      	bne.n	80046e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004704:	4b42      	ldr	r3, [pc, #264]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	051b      	lsls	r3, r3, #20
 8004712:	493f      	ldr	r1, [pc, #252]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	628b      	str	r3, [r1, #40]	; 0x28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	3b01      	subs	r3, #1
 800471e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	3b01      	subs	r3, #1
 8004728:	025b      	lsls	r3, r3, #9
 800472a:	b29b      	uxth	r3, r3
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	3b01      	subs	r3, #1
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	3b01      	subs	r3, #1
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004748:	4931      	ldr	r1, [pc, #196]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 800474a:	4313      	orrs	r3, r2
 800474c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800474e:	4b30      	ldr	r3, [pc, #192]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	492d      	ldr	r1, [pc, #180]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 800475c:	4313      	orrs	r3, r2
 800475e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4928      	ldr	r1, [pc, #160]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004772:	4b27      	ldr	r3, [pc, #156]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	4a26      	ldr	r2, [pc, #152]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800477e:	4b24      	ldr	r3, [pc, #144]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <RCCEx_PLL3_Config+0x160>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	69d2      	ldr	r2, [r2, #28]
 800478a:	00d2      	lsls	r2, r2, #3
 800478c:	4920      	ldr	r1, [pc, #128]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004792:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80047ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047b0:	e00f      	b.n	80047d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d106      	bne.n	80047c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a14      	ldr	r2, [pc, #80]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047c4:	e005      	b.n	80047d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	4a11      	ldr	r2, [pc, #68]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047de:	f7fc fdeb 	bl	80013b8 <HAL_GetTick>
 80047e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047e4:	e008      	b.n	80047f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047e6:	f7fc fde7 	bl	80013b8 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e006      	b.n	8004806 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <RCCEx_PLL3_Config+0x15c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	58024400 	.word	0x58024400
 8004814:	ffff0007 	.word	0xffff0007

08004818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e042      	b.n	80048b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7fc fbd1 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	; 0x24
 8004846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f82c 	bl	80048b8 <UART_SetConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e022      	b.n	80048b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fe8c 	bl	8005590 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 ff13 	bl	80056d4 <UART_CheckIdleState>
 80048ae:	4603      	mov	r3, r0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b092      	sub	sp, #72	; 0x48
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	69db      	ldr	r3, [r3, #28]
 80048dc:	4313      	orrs	r3, r2
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4bbe      	ldr	r3, [pc, #760]	; (8004be0 <UART_SetConfig+0x328>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	6812      	ldr	r2, [r2, #0]
 80048ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4ab3      	ldr	r2, [pc, #716]	; (8004be4 <UART_SetConfig+0x32c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d004      	beq.n	8004924 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004920:	4313      	orrs	r3, r2
 8004922:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	4baf      	ldr	r3, [pc, #700]	; (8004be8 <UART_SetConfig+0x330>)
 800492c:	4013      	ands	r3, r2
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	6812      	ldr	r2, [r2, #0]
 8004932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004934:	430b      	orrs	r3, r1
 8004936:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	f023 010f 	bic.w	r1, r3, #15
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4aa6      	ldr	r2, [pc, #664]	; (8004bec <UART_SetConfig+0x334>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d177      	bne.n	8004a48 <UART_SetConfig+0x190>
 8004958:	4ba5      	ldr	r3, [pc, #660]	; (8004bf0 <UART_SetConfig+0x338>)
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004960:	2b28      	cmp	r3, #40	; 0x28
 8004962:	d86d      	bhi.n	8004a40 <UART_SetConfig+0x188>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0xb4>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004a41 	.word	0x08004a41
 8004974:	08004a41 	.word	0x08004a41
 8004978:	08004a41 	.word	0x08004a41
 800497c:	08004a41 	.word	0x08004a41
 8004980:	08004a41 	.word	0x08004a41
 8004984:	08004a41 	.word	0x08004a41
 8004988:	08004a41 	.word	0x08004a41
 800498c:	08004a19 	.word	0x08004a19
 8004990:	08004a41 	.word	0x08004a41
 8004994:	08004a41 	.word	0x08004a41
 8004998:	08004a41 	.word	0x08004a41
 800499c:	08004a41 	.word	0x08004a41
 80049a0:	08004a41 	.word	0x08004a41
 80049a4:	08004a41 	.word	0x08004a41
 80049a8:	08004a41 	.word	0x08004a41
 80049ac:	08004a21 	.word	0x08004a21
 80049b0:	08004a41 	.word	0x08004a41
 80049b4:	08004a41 	.word	0x08004a41
 80049b8:	08004a41 	.word	0x08004a41
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a41 	.word	0x08004a41
 80049c4:	08004a41 	.word	0x08004a41
 80049c8:	08004a41 	.word	0x08004a41
 80049cc:	08004a29 	.word	0x08004a29
 80049d0:	08004a41 	.word	0x08004a41
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a41 	.word	0x08004a41
 80049e4:	08004a41 	.word	0x08004a41
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a31 	.word	0x08004a31
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a41 	.word	0x08004a41
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a39 	.word	0x08004a39
 8004a10:	2301      	movs	r3, #1
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e326      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e322      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a20:	2308      	movs	r3, #8
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e31e      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e31a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a30:	2320      	movs	r3, #32
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e316      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a38:	2340      	movs	r3, #64	; 0x40
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e312      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a40:	2380      	movs	r3, #128	; 0x80
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a46:	e30e      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a69      	ldr	r2, [pc, #420]	; (8004bf4 <UART_SetConfig+0x33c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d130      	bne.n	8004ab4 <UART_SetConfig+0x1fc>
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <UART_SetConfig+0x338>)
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	2b05      	cmp	r3, #5
 8004a5c:	d826      	bhi.n	8004aac <UART_SetConfig+0x1f4>
 8004a5e:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <UART_SetConfig+0x1ac>)
 8004a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a64:	08004a7d 	.word	0x08004a7d
 8004a68:	08004a85 	.word	0x08004a85
 8004a6c:	08004a8d 	.word	0x08004a8d
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e2f0      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a84:	2304      	movs	r3, #4
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e2ec      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e2e8      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e2e4      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e2e0      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e2dc      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e2d8      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a4f      	ldr	r2, [pc, #316]	; (8004bf8 <UART_SetConfig+0x340>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d130      	bne.n	8004b20 <UART_SetConfig+0x268>
 8004abe:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <UART_SetConfig+0x338>)
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	f003 0307 	and.w	r3, r3, #7
 8004ac6:	2b05      	cmp	r3, #5
 8004ac8:	d826      	bhi.n	8004b18 <UART_SetConfig+0x260>
 8004aca:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x218>)
 8004acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad0:	08004ae9 	.word	0x08004ae9
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004af9 	.word	0x08004af9
 8004adc:	08004b01 	.word	0x08004b01
 8004ae0:	08004b09 	.word	0x08004b09
 8004ae4:	08004b11 	.word	0x08004b11
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aee:	e2ba      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e2b6      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e2b2      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e2ae      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b08:	2320      	movs	r3, #32
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e2aa      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b10:	2340      	movs	r3, #64	; 0x40
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b16:	e2a6      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b18:	2380      	movs	r3, #128	; 0x80
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b1e:	e2a2      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <UART_SetConfig+0x344>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d130      	bne.n	8004b8c <UART_SetConfig+0x2d4>
 8004b2a:	4b31      	ldr	r3, [pc, #196]	; (8004bf0 <UART_SetConfig+0x338>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d826      	bhi.n	8004b84 <UART_SetConfig+0x2cc>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0x284>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b55 	.word	0x08004b55
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004b65 	.word	0x08004b65
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b5a:	e284      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b62:	e280      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b6a:	e27c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b72:	e278      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b74:	2320      	movs	r3, #32
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7a:	e274      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b7c:	2340      	movs	r3, #64	; 0x40
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b82:	e270      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8a:	e26c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <UART_SetConfig+0x348>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d142      	bne.n	8004c1c <UART_SetConfig+0x364>
 8004b96:	4b16      	ldr	r3, [pc, #88]	; (8004bf0 <UART_SetConfig+0x338>)
 8004b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d838      	bhi.n	8004c14 <UART_SetConfig+0x35c>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x2f0>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bc1 	.word	0x08004bc1
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	08004bd1 	.word	0x08004bd1
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bc6:	e24e      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bce:	e24a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bd6:	e246      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004bde:	e242      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004be0:	cfff69f3 	.word	0xcfff69f3
 8004be4:	58000c00 	.word	0x58000c00
 8004be8:	11fff4ff 	.word	0x11fff4ff
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	40004800 	.word	0x40004800
 8004bfc:	40004c00 	.word	0x40004c00
 8004c00:	40005000 	.word	0x40005000
 8004c04:	2320      	movs	r3, #32
 8004c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c0a:	e22c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004c0c:	2340      	movs	r3, #64	; 0x40
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e228      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004c14:	2380      	movs	r3, #128	; 0x80
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e224      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4ab1      	ldr	r2, [pc, #708]	; (8004ee8 <UART_SetConfig+0x630>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d176      	bne.n	8004d14 <UART_SetConfig+0x45c>
 8004c26:	4bb1      	ldr	r3, [pc, #708]	; (8004eec <UART_SetConfig+0x634>)
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2e:	2b28      	cmp	r3, #40	; 0x28
 8004c30:	d86c      	bhi.n	8004d0c <UART_SetConfig+0x454>
 8004c32:	a201      	add	r2, pc, #4	; (adr r2, 8004c38 <UART_SetConfig+0x380>)
 8004c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004d0d 	.word	0x08004d0d
 8004c40:	08004d0d 	.word	0x08004d0d
 8004c44:	08004d0d 	.word	0x08004d0d
 8004c48:	08004d0d 	.word	0x08004d0d
 8004c4c:	08004d0d 	.word	0x08004d0d
 8004c50:	08004d0d 	.word	0x08004d0d
 8004c54:	08004d0d 	.word	0x08004d0d
 8004c58:	08004ce5 	.word	0x08004ce5
 8004c5c:	08004d0d 	.word	0x08004d0d
 8004c60:	08004d0d 	.word	0x08004d0d
 8004c64:	08004d0d 	.word	0x08004d0d
 8004c68:	08004d0d 	.word	0x08004d0d
 8004c6c:	08004d0d 	.word	0x08004d0d
 8004c70:	08004d0d 	.word	0x08004d0d
 8004c74:	08004d0d 	.word	0x08004d0d
 8004c78:	08004ced 	.word	0x08004ced
 8004c7c:	08004d0d 	.word	0x08004d0d
 8004c80:	08004d0d 	.word	0x08004d0d
 8004c84:	08004d0d 	.word	0x08004d0d
 8004c88:	08004d0d 	.word	0x08004d0d
 8004c8c:	08004d0d 	.word	0x08004d0d
 8004c90:	08004d0d 	.word	0x08004d0d
 8004c94:	08004d0d 	.word	0x08004d0d
 8004c98:	08004cf5 	.word	0x08004cf5
 8004c9c:	08004d0d 	.word	0x08004d0d
 8004ca0:	08004d0d 	.word	0x08004d0d
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004d0d 	.word	0x08004d0d
 8004cac:	08004d0d 	.word	0x08004d0d
 8004cb0:	08004d0d 	.word	0x08004d0d
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004cfd 	.word	0x08004cfd
 8004cbc:	08004d0d 	.word	0x08004d0d
 8004cc0:	08004d0d 	.word	0x08004d0d
 8004cc4:	08004d0d 	.word	0x08004d0d
 8004cc8:	08004d0d 	.word	0x08004d0d
 8004ccc:	08004d0d 	.word	0x08004d0d
 8004cd0:	08004d0d 	.word	0x08004d0d
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ce2:	e1c0      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e1bc      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e1b8      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e1b4      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004cfc:	2320      	movs	r3, #32
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e1b0      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d04:	2340      	movs	r3, #64	; 0x40
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0a:	e1ac      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d12:	e1a8      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a75      	ldr	r2, [pc, #468]	; (8004ef0 <UART_SetConfig+0x638>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d130      	bne.n	8004d80 <UART_SetConfig+0x4c8>
 8004d1e:	4b73      	ldr	r3, [pc, #460]	; (8004eec <UART_SetConfig+0x634>)
 8004d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	2b05      	cmp	r3, #5
 8004d28:	d826      	bhi.n	8004d78 <UART_SetConfig+0x4c0>
 8004d2a:	a201      	add	r2, pc, #4	; (adr r2, 8004d30 <UART_SetConfig+0x478>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	08004d59 	.word	0x08004d59
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d4e:	e18a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d50:	2304      	movs	r3, #4
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d56:	e186      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d58:	2308      	movs	r3, #8
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d5e:	e182      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d60:	2310      	movs	r3, #16
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d66:	e17e      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d68:	2320      	movs	r3, #32
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d6e:	e17a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d76:	e176      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d7e:	e172      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5b      	ldr	r2, [pc, #364]	; (8004ef4 <UART_SetConfig+0x63c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d130      	bne.n	8004dec <UART_SetConfig+0x534>
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <UART_SetConfig+0x634>)
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b05      	cmp	r3, #5
 8004d94:	d826      	bhi.n	8004de4 <UART_SetConfig+0x52c>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x4e4>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004dbd 	.word	0x08004dbd
 8004da4:	08004dc5 	.word	0x08004dc5
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004dd5 	.word	0x08004dd5
 8004db0:	08004ddd 	.word	0x08004ddd
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dba:	e154      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dc2:	e150      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004dc4:	2308      	movs	r3, #8
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dca:	e14c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004dcc:	2310      	movs	r3, #16
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dd2:	e148      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dda:	e144      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de2:	e140      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e13c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a41      	ldr	r2, [pc, #260]	; (8004ef8 <UART_SetConfig+0x640>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f040 8082 	bne.w	8004efc <UART_SetConfig+0x644>
 8004df8:	4b3c      	ldr	r3, [pc, #240]	; (8004eec <UART_SetConfig+0x634>)
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e00:	2b28      	cmp	r3, #40	; 0x28
 8004e02:	d86d      	bhi.n	8004ee0 <UART_SetConfig+0x628>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <UART_SetConfig+0x554>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004eb1 	.word	0x08004eb1
 8004e10:	08004ee1 	.word	0x08004ee1
 8004e14:	08004ee1 	.word	0x08004ee1
 8004e18:	08004ee1 	.word	0x08004ee1
 8004e1c:	08004ee1 	.word	0x08004ee1
 8004e20:	08004ee1 	.word	0x08004ee1
 8004e24:	08004ee1 	.word	0x08004ee1
 8004e28:	08004ee1 	.word	0x08004ee1
 8004e2c:	08004eb9 	.word	0x08004eb9
 8004e30:	08004ee1 	.word	0x08004ee1
 8004e34:	08004ee1 	.word	0x08004ee1
 8004e38:	08004ee1 	.word	0x08004ee1
 8004e3c:	08004ee1 	.word	0x08004ee1
 8004e40:	08004ee1 	.word	0x08004ee1
 8004e44:	08004ee1 	.word	0x08004ee1
 8004e48:	08004ee1 	.word	0x08004ee1
 8004e4c:	08004ec1 	.word	0x08004ec1
 8004e50:	08004ee1 	.word	0x08004ee1
 8004e54:	08004ee1 	.word	0x08004ee1
 8004e58:	08004ee1 	.word	0x08004ee1
 8004e5c:	08004ee1 	.word	0x08004ee1
 8004e60:	08004ee1 	.word	0x08004ee1
 8004e64:	08004ee1 	.word	0x08004ee1
 8004e68:	08004ee1 	.word	0x08004ee1
 8004e6c:	08004ec9 	.word	0x08004ec9
 8004e70:	08004ee1 	.word	0x08004ee1
 8004e74:	08004ee1 	.word	0x08004ee1
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004ee1 	.word	0x08004ee1
 8004e80:	08004ee1 	.word	0x08004ee1
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004ee1 	.word	0x08004ee1
 8004e8c:	08004ed1 	.word	0x08004ed1
 8004e90:	08004ee1 	.word	0x08004ee1
 8004e94:	08004ee1 	.word	0x08004ee1
 8004e98:	08004ee1 	.word	0x08004ee1
 8004e9c:	08004ee1 	.word	0x08004ee1
 8004ea0:	08004ee1 	.word	0x08004ee1
 8004ea4:	08004ee1 	.word	0x08004ee1
 8004ea8:	08004ee1 	.word	0x08004ee1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eb6:	e0d6      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ebe:	e0d2      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ec6:	e0ce      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ece:	e0ca      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ed0:	2320      	movs	r3, #32
 8004ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ed6:	e0c6      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ede:	e0c2      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ee0:	2380      	movs	r3, #128	; 0x80
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee6:	e0be      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ee8:	40011400 	.word	0x40011400
 8004eec:	58024400 	.word	0x58024400
 8004ef0:	40007800 	.word	0x40007800
 8004ef4:	40007c00 	.word	0x40007c00
 8004ef8:	40011800 	.word	0x40011800
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4aad      	ldr	r2, [pc, #692]	; (80051b8 <UART_SetConfig+0x900>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d176      	bne.n	8004ff4 <UART_SetConfig+0x73c>
 8004f06:	4bad      	ldr	r3, [pc, #692]	; (80051bc <UART_SetConfig+0x904>)
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f0e:	2b28      	cmp	r3, #40	; 0x28
 8004f10:	d86c      	bhi.n	8004fec <UART_SetConfig+0x734>
 8004f12:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <UART_SetConfig+0x660>)
 8004f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f18:	08004fbd 	.word	0x08004fbd
 8004f1c:	08004fed 	.word	0x08004fed
 8004f20:	08004fed 	.word	0x08004fed
 8004f24:	08004fed 	.word	0x08004fed
 8004f28:	08004fed 	.word	0x08004fed
 8004f2c:	08004fed 	.word	0x08004fed
 8004f30:	08004fed 	.word	0x08004fed
 8004f34:	08004fed 	.word	0x08004fed
 8004f38:	08004fc5 	.word	0x08004fc5
 8004f3c:	08004fed 	.word	0x08004fed
 8004f40:	08004fed 	.word	0x08004fed
 8004f44:	08004fed 	.word	0x08004fed
 8004f48:	08004fed 	.word	0x08004fed
 8004f4c:	08004fed 	.word	0x08004fed
 8004f50:	08004fed 	.word	0x08004fed
 8004f54:	08004fed 	.word	0x08004fed
 8004f58:	08004fcd 	.word	0x08004fcd
 8004f5c:	08004fed 	.word	0x08004fed
 8004f60:	08004fed 	.word	0x08004fed
 8004f64:	08004fed 	.word	0x08004fed
 8004f68:	08004fed 	.word	0x08004fed
 8004f6c:	08004fed 	.word	0x08004fed
 8004f70:	08004fed 	.word	0x08004fed
 8004f74:	08004fed 	.word	0x08004fed
 8004f78:	08004fd5 	.word	0x08004fd5
 8004f7c:	08004fed 	.word	0x08004fed
 8004f80:	08004fed 	.word	0x08004fed
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004fed 	.word	0x08004fed
 8004f8c:	08004fed 	.word	0x08004fed
 8004f90:	08004fed 	.word	0x08004fed
 8004f94:	08004fed 	.word	0x08004fed
 8004f98:	08004fdd 	.word	0x08004fdd
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004fed 	.word	0x08004fed
 8004fac:	08004fed 	.word	0x08004fed
 8004fb0:	08004fed 	.word	0x08004fed
 8004fb4:	08004fed 	.word	0x08004fed
 8004fb8:	08004fe5 	.word	0x08004fe5
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e050      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e04c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e048      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e044      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fdc:	2320      	movs	r3, #32
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e040      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e03c      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004fec:	2380      	movs	r3, #128	; 0x80
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e038      	b.n	8005066 <UART_SetConfig+0x7ae>
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a71      	ldr	r2, [pc, #452]	; (80051c0 <UART_SetConfig+0x908>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d130      	bne.n	8005060 <UART_SetConfig+0x7a8>
 8004ffe:	4b6f      	ldr	r3, [pc, #444]	; (80051bc <UART_SetConfig+0x904>)
 8005000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	2b05      	cmp	r3, #5
 8005008:	d826      	bhi.n	8005058 <UART_SetConfig+0x7a0>
 800500a:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <UART_SetConfig+0x758>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005029 	.word	0x08005029
 8005014:	08005031 	.word	0x08005031
 8005018:	08005039 	.word	0x08005039
 800501c:	08005041 	.word	0x08005041
 8005020:	08005049 	.word	0x08005049
 8005024:	08005051 	.word	0x08005051
 8005028:	2302      	movs	r3, #2
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e01a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005030:	2304      	movs	r3, #4
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e016      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005038:	2308      	movs	r3, #8
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e012      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005040:	2310      	movs	r3, #16
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e00e      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005048:	2320      	movs	r3, #32
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e00a      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e006      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e002      	b.n	8005066 <UART_SetConfig+0x7ae>
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a55      	ldr	r2, [pc, #340]	; (80051c0 <UART_SetConfig+0x908>)
 800506c:	4293      	cmp	r3, r2
 800506e:	f040 80f8 	bne.w	8005262 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005072:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005076:	2b20      	cmp	r3, #32
 8005078:	dc46      	bgt.n	8005108 <UART_SetConfig+0x850>
 800507a:	2b02      	cmp	r3, #2
 800507c:	db75      	blt.n	800516a <UART_SetConfig+0x8b2>
 800507e:	3b02      	subs	r3, #2
 8005080:	2b1e      	cmp	r3, #30
 8005082:	d872      	bhi.n	800516a <UART_SetConfig+0x8b2>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0x7d4>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800510f 	.word	0x0800510f
 8005090:	0800516b 	.word	0x0800516b
 8005094:	08005117 	.word	0x08005117
 8005098:	0800516b 	.word	0x0800516b
 800509c:	0800516b 	.word	0x0800516b
 80050a0:	0800516b 	.word	0x0800516b
 80050a4:	08005127 	.word	0x08005127
 80050a8:	0800516b 	.word	0x0800516b
 80050ac:	0800516b 	.word	0x0800516b
 80050b0:	0800516b 	.word	0x0800516b
 80050b4:	0800516b 	.word	0x0800516b
 80050b8:	0800516b 	.word	0x0800516b
 80050bc:	0800516b 	.word	0x0800516b
 80050c0:	0800516b 	.word	0x0800516b
 80050c4:	08005137 	.word	0x08005137
 80050c8:	0800516b 	.word	0x0800516b
 80050cc:	0800516b 	.word	0x0800516b
 80050d0:	0800516b 	.word	0x0800516b
 80050d4:	0800516b 	.word	0x0800516b
 80050d8:	0800516b 	.word	0x0800516b
 80050dc:	0800516b 	.word	0x0800516b
 80050e0:	0800516b 	.word	0x0800516b
 80050e4:	0800516b 	.word	0x0800516b
 80050e8:	0800516b 	.word	0x0800516b
 80050ec:	0800516b 	.word	0x0800516b
 80050f0:	0800516b 	.word	0x0800516b
 80050f4:	0800516b 	.word	0x0800516b
 80050f8:	0800516b 	.word	0x0800516b
 80050fc:	0800516b 	.word	0x0800516b
 8005100:	0800516b 	.word	0x0800516b
 8005104:	0800515d 	.word	0x0800515d
 8005108:	2b40      	cmp	r3, #64	; 0x40
 800510a:	d02a      	beq.n	8005162 <UART_SetConfig+0x8aa>
 800510c:	e02d      	b.n	800516a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800510e:	f7fe ff61 	bl	8003fd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005114:	e02f      	b.n	8005176 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe ff70 	bl	8004000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005124:	e027      	b.n	8005176 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005126:	f107 0318 	add.w	r3, r7, #24
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff f8bc 	bl	80042a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005134:	e01f      	b.n	8005176 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005136:	4b21      	ldr	r3, [pc, #132]	; (80051bc <UART_SetConfig+0x904>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005142:	4b1e      	ldr	r3, [pc, #120]	; (80051bc <UART_SetConfig+0x904>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	08db      	lsrs	r3, r3, #3
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <UART_SetConfig+0x90c>)
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005154:	e00f      	b.n	8005176 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005156:	4b1b      	ldr	r3, [pc, #108]	; (80051c4 <UART_SetConfig+0x90c>)
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800515a:	e00c      	b.n	8005176 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800515c:	4b1a      	ldr	r3, [pc, #104]	; (80051c8 <UART_SetConfig+0x910>)
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005160:	e009      	b.n	8005176 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005168:	e005      	b.n	8005176 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800516a:	2300      	movs	r3, #0
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 81ee 	beq.w	800555a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	4a12      	ldr	r2, [pc, #72]	; (80051cc <UART_SetConfig+0x914>)
 8005184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005188:	461a      	mov	r2, r3
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005190:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519e:	429a      	cmp	r2, r3
 80051a0:	d305      	bcc.n	80051ae <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80051b4:	e1d1      	b.n	800555a <UART_SetConfig+0xca2>
 80051b6:	bf00      	nop
 80051b8:	40011c00 	.word	0x40011c00
 80051bc:	58024400 	.word	0x58024400
 80051c0:	58000c00 	.word	0x58000c00
 80051c4:	03d09000 	.word	0x03d09000
 80051c8:	003d0900 	.word	0x003d0900
 80051cc:	08005b80 	.word	0x08005b80
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	2200      	movs	r2, #0
 80051d4:	60bb      	str	r3, [r7, #8]
 80051d6:	60fa      	str	r2, [r7, #12]
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	4ac0      	ldr	r2, [pc, #768]	; (80054e0 <UART_SetConfig+0xc28>)
 80051de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2200      	movs	r2, #0
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051f2:	f7fb f87b 	bl	80002ec <__aeabi_uldivmod>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4610      	mov	r0, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	020b      	lsls	r3, r1, #8
 8005208:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800520c:	0202      	lsls	r2, r0, #8
 800520e:	6979      	ldr	r1, [r7, #20]
 8005210:	6849      	ldr	r1, [r1, #4]
 8005212:	0849      	lsrs	r1, r1, #1
 8005214:	2000      	movs	r0, #0
 8005216:	460c      	mov	r4, r1
 8005218:	4605      	mov	r5, r0
 800521a:	eb12 0804 	adds.w	r8, r2, r4
 800521e:	eb43 0905 	adc.w	r9, r3, r5
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	469a      	mov	sl, r3
 800522a:	4693      	mov	fp, r2
 800522c:	4652      	mov	r2, sl
 800522e:	465b      	mov	r3, fp
 8005230:	4640      	mov	r0, r8
 8005232:	4649      	mov	r1, r9
 8005234:	f7fb f85a 	bl	80002ec <__aeabi_uldivmod>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	4613      	mov	r3, r2
 800523e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005246:	d308      	bcc.n	800525a <UART_SetConfig+0x9a2>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524e:	d204      	bcs.n	800525a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005256:	60da      	str	r2, [r3, #12]
 8005258:	e17f      	b.n	800555a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005260:	e17b      	b.n	800555a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800526a:	f040 80bd 	bne.w	80053e8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800526e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005272:	2b20      	cmp	r3, #32
 8005274:	dc48      	bgt.n	8005308 <UART_SetConfig+0xa50>
 8005276:	2b00      	cmp	r3, #0
 8005278:	db7b      	blt.n	8005372 <UART_SetConfig+0xaba>
 800527a:	2b20      	cmp	r3, #32
 800527c:	d879      	bhi.n	8005372 <UART_SetConfig+0xaba>
 800527e:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0x9cc>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	0800530f 	.word	0x0800530f
 8005288:	08005317 	.word	0x08005317
 800528c:	08005373 	.word	0x08005373
 8005290:	08005373 	.word	0x08005373
 8005294:	0800531f 	.word	0x0800531f
 8005298:	08005373 	.word	0x08005373
 800529c:	08005373 	.word	0x08005373
 80052a0:	08005373 	.word	0x08005373
 80052a4:	0800532f 	.word	0x0800532f
 80052a8:	08005373 	.word	0x08005373
 80052ac:	08005373 	.word	0x08005373
 80052b0:	08005373 	.word	0x08005373
 80052b4:	08005373 	.word	0x08005373
 80052b8:	08005373 	.word	0x08005373
 80052bc:	08005373 	.word	0x08005373
 80052c0:	08005373 	.word	0x08005373
 80052c4:	0800533f 	.word	0x0800533f
 80052c8:	08005373 	.word	0x08005373
 80052cc:	08005373 	.word	0x08005373
 80052d0:	08005373 	.word	0x08005373
 80052d4:	08005373 	.word	0x08005373
 80052d8:	08005373 	.word	0x08005373
 80052dc:	08005373 	.word	0x08005373
 80052e0:	08005373 	.word	0x08005373
 80052e4:	08005373 	.word	0x08005373
 80052e8:	08005373 	.word	0x08005373
 80052ec:	08005373 	.word	0x08005373
 80052f0:	08005373 	.word	0x08005373
 80052f4:	08005373 	.word	0x08005373
 80052f8:	08005373 	.word	0x08005373
 80052fc:	08005373 	.word	0x08005373
 8005300:	08005373 	.word	0x08005373
 8005304:	08005365 	.word	0x08005365
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d02e      	beq.n	800536a <UART_SetConfig+0xab2>
 800530c:	e031      	b.n	8005372 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800530e:	f7fd ff29 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8005312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005314:	e033      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005316:	f7fd ff3b 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 800531a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800531c:	e02f      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800531e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe fe6c 	bl	8004000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800532c:	e027      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800532e:	f107 0318 	add.w	r3, r7, #24
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe ffb8 	bl	80042a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800533c:	e01f      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800533e:	4b69      	ldr	r3, [pc, #420]	; (80054e4 <UART_SetConfig+0xc2c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0320 	and.w	r3, r3, #32
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800534a:	4b66      	ldr	r3, [pc, #408]	; (80054e4 <UART_SetConfig+0xc2c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	08db      	lsrs	r3, r3, #3
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	4a64      	ldr	r2, [pc, #400]	; (80054e8 <UART_SetConfig+0xc30>)
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800535c:	e00f      	b.n	800537e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800535e:	4b62      	ldr	r3, [pc, #392]	; (80054e8 <UART_SetConfig+0xc30>)
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005362:	e00c      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005364:	4b61      	ldr	r3, [pc, #388]	; (80054ec <UART_SetConfig+0xc34>)
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e009      	b.n	800537e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800536a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005370:	e005      	b.n	800537e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800537c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80ea 	beq.w	800555a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	4a55      	ldr	r2, [pc, #340]	; (80054e0 <UART_SetConfig+0xc28>)
 800538c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005390:	461a      	mov	r2, r3
 8005392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005394:	fbb3 f3f2 	udiv	r3, r3, r2
 8005398:	005a      	lsls	r2, r3, #1
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	441a      	add	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	2b0f      	cmp	r3, #15
 80053b0:	d916      	bls.n	80053e0 <UART_SetConfig+0xb28>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b8:	d212      	bcs.n	80053e0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80053d2:	4313      	orrs	r3, r2
 80053d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80053dc:	60da      	str	r2, [r3, #12]
 80053de:	e0bc      	b.n	800555a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80053e6:	e0b8      	b.n	800555a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	dc4b      	bgt.n	8005488 <UART_SetConfig+0xbd0>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f2c0 8087 	blt.w	8005504 <UART_SetConfig+0xc4c>
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	f200 8084 	bhi.w	8005504 <UART_SetConfig+0xc4c>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0xb4c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	0800548f 	.word	0x0800548f
 8005408:	08005497 	.word	0x08005497
 800540c:	08005505 	.word	0x08005505
 8005410:	08005505 	.word	0x08005505
 8005414:	0800549f 	.word	0x0800549f
 8005418:	08005505 	.word	0x08005505
 800541c:	08005505 	.word	0x08005505
 8005420:	08005505 	.word	0x08005505
 8005424:	080054af 	.word	0x080054af
 8005428:	08005505 	.word	0x08005505
 800542c:	08005505 	.word	0x08005505
 8005430:	08005505 	.word	0x08005505
 8005434:	08005505 	.word	0x08005505
 8005438:	08005505 	.word	0x08005505
 800543c:	08005505 	.word	0x08005505
 8005440:	08005505 	.word	0x08005505
 8005444:	080054bf 	.word	0x080054bf
 8005448:	08005505 	.word	0x08005505
 800544c:	08005505 	.word	0x08005505
 8005450:	08005505 	.word	0x08005505
 8005454:	08005505 	.word	0x08005505
 8005458:	08005505 	.word	0x08005505
 800545c:	08005505 	.word	0x08005505
 8005460:	08005505 	.word	0x08005505
 8005464:	08005505 	.word	0x08005505
 8005468:	08005505 	.word	0x08005505
 800546c:	08005505 	.word	0x08005505
 8005470:	08005505 	.word	0x08005505
 8005474:	08005505 	.word	0x08005505
 8005478:	08005505 	.word	0x08005505
 800547c:	08005505 	.word	0x08005505
 8005480:	08005505 	.word	0x08005505
 8005484:	080054f7 	.word	0x080054f7
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d037      	beq.n	80054fc <UART_SetConfig+0xc44>
 800548c:	e03a      	b.n	8005504 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800548e:	f7fd fe69 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8005492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005494:	e03c      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005496:	f7fd fe7b 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 800549a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800549c:	e038      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800549e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fdac 	bl	8004000 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054ac:	e030      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ae:	f107 0318 	add.w	r3, r7, #24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe fef8 	bl	80042a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054bc:	e028      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054be:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <UART_SetConfig+0xc2c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d012      	beq.n	80054f0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <UART_SetConfig+0xc2c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <UART_SetConfig+0xc30>)
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054dc:	e018      	b.n	8005510 <UART_SetConfig+0xc58>
 80054de:	bf00      	nop
 80054e0:	08005b80 	.word	0x08005b80
 80054e4:	58024400 	.word	0x58024400
 80054e8:	03d09000 	.word	0x03d09000
 80054ec:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <UART_SetConfig+0xccc>)
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054f4:	e00c      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <UART_SetConfig+0xcd0>)
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fa:	e009      	b.n	8005510 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005502:	e005      	b.n	8005510 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800550e:	bf00      	nop
    }

    if (pclk != 0U)
 8005510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d021      	beq.n	800555a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	4a1c      	ldr	r2, [pc, #112]	; (800558c <UART_SetConfig+0xcd4>)
 800551c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005520:	461a      	mov	r2, r3
 8005522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005524:	fbb3 f2f2 	udiv	r2, r3, r2
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	441a      	add	r2, r3
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800553a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553c:	2b0f      	cmp	r3, #15
 800553e:	d909      	bls.n	8005554 <UART_SetConfig+0xc9c>
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005546:	d205      	bcs.n	8005554 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554a:	b29a      	uxth	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60da      	str	r2, [r3, #12]
 8005552:	e002      	b.n	800555a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2201      	movs	r2, #1
 800555e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2201      	movs	r2, #1
 8005566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2200      	movs	r2, #0
 800556e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2200      	movs	r2, #0
 8005574:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005576:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800557a:	4618      	mov	r0, r3
 800557c:	3748      	adds	r7, #72	; 0x48
 800557e:	46bd      	mov	sp, r7
 8005580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005584:	03d09000 	.word	0x03d09000
 8005588:	003d0900 	.word	0x003d0900
 800558c:	08005b80 	.word	0x08005b80

08005590 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d01a      	beq.n	80056a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800568a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568e:	d10a      	bne.n	80056a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	605a      	str	r2, [r3, #4]
  }
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b086      	sub	sp, #24
 80056d8:	af02      	add	r7, sp, #8
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e4:	f7fb fe68 	bl	80013b8 <HAL_GetTick>
 80056e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d10e      	bne.n	8005716 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f82f 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e025      	b.n	8005762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0304 	and.w	r3, r3, #4
 8005720:	2b04      	cmp	r3, #4
 8005722:	d10e      	bne.n	8005742 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f819 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e00f      	b.n	8005762 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b09c      	sub	sp, #112	; 0x70
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	e0a9      	b.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	f000 80a5 	beq.w	80058d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fb fe17 	bl	80013b8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
 8005796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005798:	2b00      	cmp	r3, #0
 800579a:	d140      	bne.n	800581e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b0:	667b      	str	r3, [r7, #100]	; 0x64
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	663b      	str	r3, [r7, #96]	; 0x60
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e069      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d051      	beq.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583a:	d149      	bne.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005844:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800585a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	637b      	str	r3, [r7, #52]	; 0x34
 8005866:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800586a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800586c:	e841 2300 	strex	r3, r2, [r1]
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e6      	bne.n	8005846 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3308      	adds	r3, #8
 800587e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	e853 3f00 	ldrex	r3, [r3]
 8005886:	613b      	str	r3, [r7, #16]
   return(result);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 0301 	bic.w	r3, r3, #1
 800588e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3308      	adds	r3, #8
 8005896:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005898:	623a      	str	r2, [r7, #32]
 800589a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589c:	69f9      	ldr	r1, [r7, #28]
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	e841 2300 	strex	r3, r2, [r1]
 80058a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e5      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e010      	b.n	80058f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69da      	ldr	r2, [r3, #28]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4013      	ands	r3, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	f43f af46 	beq.w	800577c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3770      	adds	r7, #112	; 0x70
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_UARTEx_DisableFifoMode+0x16>
 800590c:	2302      	movs	r3, #2
 800590e:	e027      	b.n	8005960 <HAL_UARTEx_DisableFifoMode+0x66>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2224      	movs	r2, #36	; 0x24
 800591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800593e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005980:	2302      	movs	r3, #2
 8005982:	e02d      	b.n	80059e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2224      	movs	r2, #36	; 0x24
 8005990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f84f 	bl	8005a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e02d      	b.n	8005a5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	; 0x24
 8005a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0201 	bic.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f811 	bl	8005a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a84:	e031      	b.n	8005aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a86:	2310      	movs	r3, #16
 8005a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	0e5b      	lsrs	r3, r3, #25
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	0f5b      	lsrs	r3, r3, #29
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	7b3a      	ldrb	r2, [r7, #12]
 8005ab2:	4911      	ldr	r1, [pc, #68]	; (8005af8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ab4:	5c8a      	ldrb	r2, [r1, r2]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aba:	7b3a      	ldrb	r2, [r7, #12]
 8005abc:	490f      	ldr	r1, [pc, #60]	; (8005afc <UARTEx_SetNbDataToProcess+0x98>)
 8005abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	7b7a      	ldrb	r2, [r7, #13]
 8005ad0:	4909      	ldr	r1, [pc, #36]	; (8005af8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ad2:	5c8a      	ldrb	r2, [r1, r2]
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ad8:	7b7a      	ldrb	r2, [r7, #13]
 8005ada:	4908      	ldr	r1, [pc, #32]	; (8005afc <UARTEx_SetNbDataToProcess+0x98>)
 8005adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	08005b98 	.word	0x08005b98
 8005afc:	08005ba0 	.word	0x08005ba0

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4d0d      	ldr	r5, [pc, #52]	; (8005b38 <__libc_init_array+0x38>)
 8005b04:	4c0d      	ldr	r4, [pc, #52]	; (8005b3c <__libc_init_array+0x3c>)
 8005b06:	1b64      	subs	r4, r4, r5
 8005b08:	10a4      	asrs	r4, r4, #2
 8005b0a:	2600      	movs	r6, #0
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	4d0b      	ldr	r5, [pc, #44]	; (8005b40 <__libc_init_array+0x40>)
 8005b12:	4c0c      	ldr	r4, [pc, #48]	; (8005b44 <__libc_init_array+0x44>)
 8005b14:	f000 f820 	bl	8005b58 <_init>
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	08005bb0 	.word	0x08005bb0
 8005b3c:	08005bb0 	.word	0x08005bb0
 8005b40:	08005bb0 	.word	0x08005bb0
 8005b44:	08005bb4 	.word	0x08005bb4

08005b48 <memset>:
 8005b48:	4402      	add	r2, r0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d100      	bne.n	8005b52 <memset+0xa>
 8005b50:	4770      	bx	lr
 8005b52:	f803 1b01 	strb.w	r1, [r3], #1
 8005b56:	e7f9      	b.n	8005b4c <memset+0x4>

08005b58 <_init>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr

08005b64 <_fini>:
 8005b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b66:	bf00      	nop
 8005b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6a:	bc08      	pop	{r3}
 8005b6c:	469e      	mov	lr, r3
 8005b6e:	4770      	bx	lr
