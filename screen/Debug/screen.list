
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00012014  24000000  080081e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ea808  24012014  0801a1f4  00032014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240fc81c  0801a1f4  0003c81c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00032014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001993e  00000000  00000000  00032042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b15  00000000  00000000  0004b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  0004e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001218  00000000  00000000  0004f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031ad5  00000000  00000000  000509d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001820d  00000000  00000000  000824ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001492c5  00000000  00000000  0009a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e397f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005220  00000000  00000000  001e39d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24012014 	.word	0x24012014
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008180 	.word	0x08008180

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24012018 	.word	0x24012018
 80002e8:	08008180 	.word	0x08008180

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 f903 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f859 	bl	80006b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2104      	movs	r1, #4
 8000602:	4828      	ldr	r0, [pc, #160]	; (80006a4 <main+0xb4>)
 8000604:	f002 ff5c 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4826      	ldr	r0, [pc, #152]	; (80006a8 <main+0xb8>)
 800060e:	f002 ff57 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f001 f986 	bl	8001924 <HAL_Delay>
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, SET); // LCD reset
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	4821      	ldr	r0, [pc, #132]	; (80006a4 <main+0xb4>)
 800061e:	f002 ff4f 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, SET); // I2C reset
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <main+0xb8>)
 8000628:	f002 ff4a 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, SET); // background light on
 800062c:	2201      	movs	r2, #1
 800062e:	2101      	movs	r1, #1
 8000630:	481d      	ldr	r0, [pc, #116]	; (80006a8 <main+0xb8>)
 8000632:	f002 ff45 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f001 f974 	bl	8001924 <HAL_Delay>
	pos_t pos = clrscreen();
 800063c:	f000 fca2 	bl	8000f84 <clrscreen>
 8000640:	6078      	str	r0, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 fa4d 	bl	8000ae0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000646:	f000 f9f7 	bl	8000a38 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800064a:	f000 fa41 	bl	8000ad0 <MX_USB_OTG_HS_USB_Init>
  MX_LTDC_Init();
 800064e:	f000 f961 	bl	8000914 <MX_LTDC_Init>
  MX_I2C1_Init();
 8000652:	f000 f91f 	bl	8000894 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000656:	f000 f8a5 	bl	80007a4 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 800065a:	2201      	movs	r2, #1
 800065c:	2101      	movs	r1, #1
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <main+0xb4>)
 8000660:	f002 ff2e 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8000664:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000668:	2100      	movs	r1, #0
 800066a:	4810      	ldr	r0, [pc, #64]	; (80006ac <main+0xbc>)
 800066c:	f002 fb68 	bl	8002d40 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(200);
 8000670:	20c8      	movs	r0, #200	; 0xc8
 8000672:	f001 f957 	bl	8001924 <HAL_Delay>
//		//HAL_Delay(100);
//	}
//	while (1)
//		;
	while (1) {
		HAL_ADC_Start(&hadc1);
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <main+0xbc>)
 8000678:	f001 fcda 	bl	8002030 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800067c:	f04f 31ff 	mov.w	r1, #4294967295
 8000680:	480a      	ldr	r0, [pc, #40]	; (80006ac <main+0xbc>)
 8000682:	f001 fd8f 	bl	80021a4 <HAL_ADC_PollForConversion>
		_putl(pos, HAL_ADC_GetValue(&hadc1), 10);
 8000686:	4809      	ldr	r0, [pc, #36]	; (80006ac <main+0xbc>)
 8000688:	f001 fe64 	bl	8002354 <HAL_ADC_GetValue>
 800068c:	4603      	mov	r3, r0
 800068e:	220a      	movs	r2, #10
 8000690:	4619      	mov	r1, r3
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 fc57 	bl	8000f46 <_putl>
		HAL_Delay(1000);
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f001 f942 	bl	8001924 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 80006a0:	e7e9      	b.n	8000676 <main+0x86>
 80006a2:	bf00      	nop
 80006a4:	58020400 	.word	0x58020400
 80006a8:	58020000 	.word	0x58020000
 80006ac:	24012030 	.word	0x24012030

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	224c      	movs	r2, #76	; 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 fd56 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 fd50 	bl	8008170 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006d0:	2004      	movs	r0, #4
 80006d2:	f003 fb1d 	bl	8003d10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemClock_Config+0xec>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a2f      	ldr	r2, [pc, #188]	; (800079c <SystemClock_Config+0xec>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <SystemClock_Config+0xec>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xec>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000700:	d1f8      	bne.n	80006f4 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xf0>)
 8000704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000706:	f023 0303 	bic.w	r3, r3, #3
 800070a:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <SystemClock_Config+0xf0>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000712:	2321      	movs	r3, #33	; 0x21
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 800072c:	2346      	movs	r3, #70	; 0x46
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073c:	230c      	movs	r3, #12
 800073e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000740:	2300      	movs	r3, #0
 8000742:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fb39 	bl	8003dc4 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000758:	f000 fb2e 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	233f      	movs	r3, #63	; 0x3f
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2107      	movs	r1, #7
 8000782:	4618      	mov	r0, r3
 8000784:	f003 ff22 	bl	80045cc <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800078e:	f000 fb13 	bl	8000db8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	; 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024800 	.word	0x58024800
 80007a0:	58024400 	.word	0x58024400

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007ca:	4a30      	ldr	r2, [pc, #192]	; (800088c <MX_ADC1_Init+0xe8>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d4:	4b2c      	ldr	r3, [pc, #176]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_ADC1_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b22      	ldr	r3, [pc, #136]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_ADC1_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000812:	2200      	movs	r2, #0
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000818:	2200      	movs	r2, #0
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000826:	f001 faa9 	bl	8001d7c <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000830:	f000 fac2 	bl	8000db8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000840:	f002 fae2 	bl	8002e08 <HAL_ADCEx_MultiModeConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800084a:	f000 fab5 	bl	8000db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_ADC1_Init+0xec>)
 8000850:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000852:	2306      	movs	r3, #6
 8000854:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000860:	2304      	movs	r3, #4
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_ADC1_Init+0xe4>)
 8000872:	f001 fd7d 	bl	8002370 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800087c:	f000 fa9c 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	24012030 	.word	0x24012030
 800088c:	40022000 	.word	0x40022000
 8000890:	08600004 	.word	0x08600004

08000894 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D04BFF;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 112;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2270      	movs	r2, #112	; 0x70
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	f002 fe4e 	bl	8003570 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fa6d 	bl	8000db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e2:	f002 fed5 	bl	8003690 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fa64 	bl	8000db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f4:	f002 ff17 	bl	8003726 <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fa5b 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	24012094 	.word	0x24012094
 800090c:	40005400 	.word	0x40005400
 8000910:	00d04bff 	.word	0x00d04bff

08000914 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2234      	movs	r2, #52	; 0x34
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f007 fc25 	bl	8008170 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000928:	4a40      	ldr	r2, [pc, #256]	; (8000a2c <MX_LTDC_Init+0x118>)
 800092a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800092c:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <MX_LTDC_Init+0x114>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000938:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <MX_LTDC_Init+0x114>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8000944:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000946:	2214      	movs	r2, #20
 8000948:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <MX_LTDC_Init+0x114>)
 800094c:	2203      	movs	r2, #3
 800094e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000952:	22a0      	movs	r2, #160	; 0xa0
 8000954:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000958:	2217      	movs	r2, #23
 800095a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1184;
 800095c:	4b32      	ldr	r3, [pc, #200]	; (8000a28 <MX_LTDC_Init+0x114>)
 800095e:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 623;
 8000964:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000966:	f240 226f 	movw	r2, #623	; 0x26f
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1344;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_LTDC_Init+0x114>)
 800096e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 635;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000976:	f240 227b 	movw	r2, #635	; 0x27b
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800097c:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <MX_LTDC_Init+0x114>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_LTDC_Init+0x114>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000994:	4824      	ldr	r0, [pc, #144]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000996:	f002 ff13 	bl	80037c0 <HAL_LTDC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80009a0:	f000 fa0a 	bl	8000db8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 100;
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 900;
 80009a8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80009ac:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 80009b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80009b6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009bc:	23ff      	movs	r3, #255	; 0xff
 80009be:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 80009c0:	23ff      	movs	r3, #255	; 0xff
 80009c2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80009ca:	2305      	movs	r3, #5
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000200;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_LTDC_Init+0x11c>)
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80009d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 80009d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	4619      	mov	r1, r3
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_LTDC_Init+0x114>)
 80009f8:	f002 ffb2 	bl	8003960 <HAL_LTDC_ConfigLayer>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000a02:	f000 f9d9 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	pLayerCfg.FBStartAdress = (uint32_t) pixels_565;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_LTDC_Init+0x120>)
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_LTDC_Init+0x114>)
 8000a12:	f002 ffa5 	bl	8003960 <HAL_LTDC_ConfigLayer>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_LTDC_Init+0x10c>
		Error_Handler();
 8000a1c:	f000 f9cc 	bl	8000db8 <Error_Handler>
	}

  /* USER CODE END LTDC_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3738      	adds	r7, #56	; 0x38
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	240120e0 	.word	0x240120e0
 8000a2c:	50001000 	.word	0x50001000
 8000a30:	24000200 	.word	0x24000200
 8000a34:	24012218 	.word	0x24012218

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_USART3_UART_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a82:	f006 f9dd 	bl	8006e40 <HAL_UART_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 f994 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000a94:	f007 fa7e 	bl	8007f94 <HAL_UARTEx_SetTxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 f98b 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000aa6:	f007 fab3 	bl	8008010 <HAL_UARTEx_SetRxFifoThreshold>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 f982 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_USART3_UART_Init+0x90>)
 8000ab6:	f007 fa34 	bl	8007f22 <HAL_UARTEx_DisableFifoMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f97a 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24012188 	.word	0x24012188
 8000acc:	40004800 	.word	0x40004800

08000ad0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4ba9      	ldr	r3, [pc, #676]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000af8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000afc:	4aa7      	ldr	r2, [pc, #668]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b06:	4ba5      	ldr	r3, [pc, #660]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	623b      	str	r3, [r7, #32]
 8000b12:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b14:	4ba1      	ldr	r3, [pc, #644]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1a:	4aa0      	ldr	r2, [pc, #640]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b24:	4b9d      	ldr	r3, [pc, #628]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	61fb      	str	r3, [r7, #28]
 8000b30:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b32:	4b9a      	ldr	r3, [pc, #616]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b38:	4a98      	ldr	r2, [pc, #608]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b42:	4b96      	ldr	r3, [pc, #600]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b50:	4b92      	ldr	r3, [pc, #584]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b56:	4a91      	ldr	r2, [pc, #580]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b60:	4b8e      	ldr	r3, [pc, #568]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b8b      	ldr	r3, [pc, #556]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b74:	4a89      	ldr	r2, [pc, #548]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b7e:	4b87      	ldr	r3, [pc, #540]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8c:	4b83      	ldr	r3, [pc, #524]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b92:	4a82      	ldr	r2, [pc, #520]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b9c:	4b7f      	ldr	r3, [pc, #508]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000b9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b7c      	ldr	r3, [pc, #496]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bb0:	4a7a      	ldr	r2, [pc, #488]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bb2:	f043 0308 	orr.w	r3, r3, #8
 8000bb6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bba:	4b78      	ldr	r3, [pc, #480]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc8:	4b74      	ldr	r3, [pc, #464]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bce:	4a73      	ldr	r2, [pc, #460]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bd8:	4b70      	ldr	r3, [pc, #448]	; (8000d9c <MX_GPIO_Init+0x2bc>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bec:	486c      	ldr	r0, [pc, #432]	; (8000da0 <MX_GPIO_Init+0x2c0>)
 8000bee:	f002 fc67 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTDC_BL_Pin|I2C1_RST_Pin, GPIO_PIN_SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2181      	movs	r1, #129	; 0x81
 8000bf6:	486b      	ldr	r0, [pc, #428]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000bf8:	f002 fc62 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c02:	4869      	ldr	r0, [pc, #420]	; (8000da8 <MX_GPIO_Init+0x2c8>)
 8000c04:	f002 fc5c 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2104      	movs	r1, #4
 8000c0c:	4866      	ldr	r0, [pc, #408]	; (8000da8 <MX_GPIO_Init+0x2c8>)
 8000c0e:	f002 fc57 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2102      	movs	r1, #2
 8000c16:	4865      	ldr	r0, [pc, #404]	; (8000dac <MX_GPIO_Init+0x2cc>)
 8000c18:	f002 fc52 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	485f      	ldr	r0, [pc, #380]	; (8000db0 <MX_GPIO_Init+0x2d0>)
 8000c34:	f002 fa94 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4853      	ldr	r0, [pc, #332]	; (8000da0 <MX_GPIO_Init+0x2c0>)
 8000c52:	f002 fa85 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_BL_Pin */
  GPIO_InitStruct.Pin = LTDC_BL_Pin;
 8000c56:	2301      	movs	r3, #1
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LTDC_BL_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	484d      	ldr	r0, [pc, #308]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000c6e:	f002 fa77 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_RST_Pin */
  GPIO_InitStruct.Pin = I2C1_RST_Pin;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(I2C1_RST_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4846      	ldr	r0, [pc, #280]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000c8a:	f002 fa69 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c8e:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4840      	ldr	r0, [pc, #256]	; (8000da8 <MX_GPIO_Init+0x2c8>)
 8000ca8:	f002 fa5a 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_RST_Pin */
  GPIO_InitStruct.Pin = LTDC_RST_Pin;
 8000cac:	2304      	movs	r3, #4
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LTDC_RST_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4839      	ldr	r0, [pc, #228]	; (8000da8 <MX_GPIO_Init+0x2c8>)
 8000cc4:	f002 fa4c 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ccc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <MX_GPIO_Init+0x2d4>)
 8000cde:	f002 fa3f 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_INT_Pin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ce8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482a      	ldr	r0, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000cfa:	f002 fa31 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4824      	ldr	r0, [pc, #144]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000d14:	f002 fa24 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d2a:	230a      	movs	r3, #10
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000d36:	f002 fa13 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_GPIO_Init+0x2c4>)
 8000d54:	f002 fa04 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x2cc>)
 8000d70:	f002 f9f6 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2100      	movs	r1, #0
 8000d78:	2017      	movs	r0, #23
 8000d7a:	f002 f9bc 	bl	80030f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d7e:	2017      	movs	r0, #23
 8000d80:	f002 f9d3 	bl	800312a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2028      	movs	r0, #40	; 0x28
 8000d8a:	f002 f9b4 	bl	80030f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d8e:	2028      	movs	r0, #40	; 0x28
 8000d90:	f002 f9cb 	bl	800312a <HAL_NVIC_EnableIRQ>

}
 8000d94:	bf00      	nop
 8000d96:	3738      	adds	r7, #56	; 0x38
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58021400 	.word	0x58021400
 8000da4:	58020000 	.word	0x58020000
 8000da8:	58020400 	.word	0x58020400
 8000dac:	58021000 	.word	0x58021000
 8000db0:	58020800 	.word	0x58020800
 8000db4:	58021800 	.word	0x58021800

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <_putc>:
#include "math.h"

unsigned short pixels_565[WINDOW_HEIGHT][WINDOW_WIDTH];
float linespace = 1.5;

pos_t _putc(pos_t pos, char ch) {
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	if (ch == '\n')
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d115      	bne.n	8000e02 <_putc+0x3e>
		return POS(MARGIN_X, Y(pos) + linespace * MONO_HEIGHT);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000de2:	4b3d      	ldr	r3, [pc, #244]	; (8000ed8 <_putc+0x114>)
 8000de4:	edd3 7a00 	vldr	s15, [r3]
 8000de8:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000dec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000df8:	ee17 3a90 	vmov	r3, s15
 8000dfc:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8000e00:	e066      	b.n	8000ed0 <_putc+0x10c>
	unsigned short x = X(pos), y = Y(pos);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0c1b      	lsrs	r3, r3, #16
 8000e06:	82fb      	strh	r3, [r7, #22]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	82bb      	strh	r3, [r7, #20]
	if (x + MONO_WIDTH > WINDOW_WIDTH - MARGIN_X) {
 8000e0c:	8afb      	ldrh	r3, [r7, #22]
 8000e0e:	f240 320a 	movw	r2, #778	; 0x30a
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d914      	bls.n	8000e40 <_putc+0x7c>
		x = MARGIN_X;
 8000e16:	230a      	movs	r3, #10
 8000e18:	82fb      	strh	r3, [r7, #22]
		y += linespace * MONO_HEIGHT;
 8000e1a:	8abb      	ldrh	r3, [r7, #20]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <_putc+0x114>)
 8000e26:	edd3 7a00 	vldr	s15, [r3]
 8000e2a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000e2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e3a:	ee17 3a90 	vmov	r3, s15
 8000e3e:	82bb      	strh	r3, [r7, #20]
	}
	if (y + MONO_HEIGHT > WINDOW_HEIGHT - MARGIN_Y)
 8000e40:	8abb      	ldrh	r3, [r7, #20]
 8000e42:	f240 2236 	movw	r2, #566	; 0x236
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d909      	bls.n	8000e5e <_putc+0x9a>
		y = Y(scrollup(POS(x, y), 1));
 8000e4a:	8afb      	ldrh	r3, [r7, #22]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	8abb      	ldrh	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	2101      	movs	r1, #1
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f8c3 	bl	8000fe0 <scrollup>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	82bb      	strh	r3, [r7, #20]
	unsigned short (*img)[MONO_WIDTH] =
			(unsigned short (*)[MONO_WIDTH]) monofont[(int) ch];
 8000e5e:	78fa      	ldrb	r2, [r7, #3]
	unsigned short (*img)[MONO_WIDTH] =
 8000e60:	4613      	mov	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4413      	add	r3, r2
 8000e66:	019b      	lsls	r3, r3, #6
 8000e68:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <_putc+0x118>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < MONO_HEIGHT; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	e025      	b.n	8000ec0 <_putc+0xfc>
		for (int j = 0; j < MONO_WIDTH; j++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e01c      	b.n	8000eb4 <_putc+0xf0>
			pixels_565[y + i][x + j] = img[i][j];
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	461a      	mov	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1899      	adds	r1, r3, r2
 8000e8a:	8aba      	ldrh	r2, [r7, #20]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	441a      	add	r2, r3
 8000e90:	8af8      	ldrh	r0, [r7, #22]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4403      	add	r3, r0
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8000e9c:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <_putc+0x11c>)
 8000e9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ea2:	fb00 f202 	mul.w	r2, r0, r2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4622      	mov	r2, r4
 8000eaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < MONO_WIDTH; j++)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b0b      	cmp	r3, #11
 8000eb8:	dddf      	ble.n	8000e7a <_putc+0xb6>
	for (int i = 0; i < MONO_HEIGHT; i++)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	2b17      	cmp	r3, #23
 8000ec4:	ddd6      	ble.n	8000e74 <_putc+0xb0>
	return POS(x + MONO_WIDTH, y);
 8000ec6:	8afb      	ldrh	r3, [r7, #22]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	041a      	lsls	r2, r3, #16
 8000ecc:	8abb      	ldrh	r3, [r7, #20]
 8000ece:	4413      	add	r3, r2
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	371c      	adds	r7, #28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}
 8000ed8:	24012000 	.word	0x24012000
 8000edc:	24000000 	.word	0x24000000
 8000ee0:	24012218 	.word	0x24012218

08000ee4 <_putul>:
	while (*s)
		pos = _putc(pos, *s++);
	return pos;
}

pos_t _putul(pos_t pos, unsigned long ul, int base) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
	unsigned long div = ul / base;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
	char digit = ul % base;
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f02:	fb01 f202 	mul.w	r2, r1, r2
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	74fb      	strb	r3, [r7, #19]
	digit += digit < 10 ? '0' : 'A' - 10;
 8000f0a:	7cfb      	ldrb	r3, [r7, #19]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d801      	bhi.n	8000f14 <_putul+0x30>
 8000f10:	2230      	movs	r2, #48	; 0x30
 8000f12:	e000      	b.n	8000f16 <_putul+0x32>
 8000f14:	2237      	movs	r2, #55	; 0x37
 8000f16:	7cfb      	ldrb	r3, [r7, #19]
 8000f18:	4413      	add	r3, r2
 8000f1a:	74fb      	strb	r3, [r7, #19]
	return _putc(div ? _putul(pos, div, base) : pos, digit);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <_putul+0x4c>
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	6979      	ldr	r1, [r7, #20]
 8000f26:	68f8      	ldr	r0, [r7, #12]
 8000f28:	f7ff ffdc 	bl	8000ee4 <_putul>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	e000      	b.n	8000f32 <_putul+0x4e>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	7cfa      	ldrb	r2, [r7, #19]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff44 	bl	8000dc4 <_putc>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_putl>:

pos_t _putl(pos_t pos, long l, int base) {
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	unsigned long ul;
	if (l >= 0)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db02      	blt.n	8000f5e <_putl+0x18>
		ul = l;
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e007      	b.n	8000f6e <_putl+0x28>
	else {
		ul = -l;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	425b      	negs	r3, r3
 8000f62:	617b      	str	r3, [r7, #20]
		pos = _putc(pos, '-');
 8000f64:	212d      	movs	r1, #45	; 0x2d
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff ff2c 	bl	8000dc4 <_putc>
 8000f6c:	60f8      	str	r0, [r7, #12]
	}
	return _putul(pos, ul, base);
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6979      	ldr	r1, [r7, #20]
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff ffb6 	bl	8000ee4 <_putul>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <clrscreen>:
		f = (f - (unsigned long) f) * 10.f;
	}
	return pos;
}

pos_t clrscreen() {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	e018      	b.n	8000fc2 <clrscreen+0x3e>
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	e00e      	b.n	8000fb4 <clrscreen+0x30>
			pixels_565[i][j] = 0xffff;
 8000f96:	4911      	ldr	r1, [pc, #68]	; (8000fdc <clrscreen+0x58>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f9e:	fb03 f202 	mul.w	r2, r3, r2
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000fba:	dbec      	blt.n	8000f96 <clrscreen+0x12>
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000fc8:	dbe2      	blt.n	8000f90 <clrscreen+0xc>
	return POS(MARGIN_X, MARGIN_Y);
 8000fca:	f04f 130a 	mov.w	r3, #655370	; 0xa000a
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	24012218 	.word	0x24012218

08000fe0 <scrollup>:

pos_t scrollup(pos_t pos, int n) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	int d = n * linespace * MONO_HEIGHT;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <scrollup+0xec>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffe:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800100a:	ee17 3a90 	vmov	r3, s15
 800100e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	e023      	b.n	800105e <scrollup+0x7e>
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
 800101a:	e019      	b.n	8001050 <scrollup+0x70>
			pixels_565[i][j] = pixels_565[i + d][j];
 800101c:	69fa      	ldr	r2, [r7, #28]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4413      	add	r3, r2
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <scrollup+0xf0>)
 8001024:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001028:	fb03 f202 	mul.w	r2, r3, r2
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	4413      	add	r3, r2
 8001030:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001034:	4926      	ldr	r1, [pc, #152]	; (80010d0 <scrollup+0xf0>)
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f44f 7248 	mov.w	r2, #800	; 0x320
 800103c:	fb03 f202 	mul.w	r2, r3, r2
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	4413      	add	r3, r2
 8001044:	4602      	mov	r2, r0
 8001046:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < WINDOW_WIDTH; j++)
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001056:	dbe1      	blt.n	800101c <scrollup+0x3c>
	for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	3301      	adds	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbd5      	blt.n	8001016 <scrollup+0x36>
	for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8001070:	617b      	str	r3, [r7, #20]
 8001072:	e018      	b.n	80010a6 <scrollup+0xc6>
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	e00e      	b.n	8001098 <scrollup+0xb8>
			pixels_565[i][j] = 0xffff;
 800107a:	4915      	ldr	r1, [pc, #84]	; (80010d0 <scrollup+0xf0>)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001082:	fb03 f202 	mul.w	r2, r3, r2
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4413      	add	r3, r2
 800108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	3301      	adds	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800109e:	dbec      	blt.n	800107a <scrollup+0x9a>
	for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	3301      	adds	r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80010ac:	dbe2      	blt.n	8001074 <scrollup+0x94>
	return POS(X(pos), Y(pos) - d);
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <scrollup+0xf4>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	b291      	uxth	r1, r2
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	1a8a      	subs	r2, r1, r2
 80010bc:	4413      	add	r3, r2
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	24012000 	.word	0x24012000
 80010d0:	24012218 	.word	0x24012218
 80010d4:	ffff0000 	.word	0xffff0000

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x30>)
 80010e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x30>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x30>)
 80010f0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	58024400 	.word	0x58024400

0800110c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0b8      	sub	sp, #224	; 0xe0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	22b8      	movs	r2, #184	; 0xb8
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 f81f 	bl	8008170 <memset>
  if(hadc->Instance==ADC1)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a2a      	ldr	r2, [pc, #168]	; (80011e0 <HAL_ADC_MspInit+0xd4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d14d      	bne.n	80011d8 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800113c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001146:	2310      	movs	r3, #16
 8001148:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800114e:	2302      	movs	r3, #2
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001162:	2300      	movs	r3, #0
 8001164:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fdb9 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001178:	f7ff fe1e 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 800117e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 8001184:	f043 0320 	orr.w	r3, r3, #32
 8001188:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 800118e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 800119c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_ADC_MspInit+0xd8>)
 80011ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011cc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d0:	4619      	mov	r1, r3
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <HAL_ADC_MspInit+0xdc>)
 80011d4:	f001 ffc4 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011d8:	bf00      	nop
 80011da:	37e0      	adds	r7, #224	; 0xe0
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40022000 	.word	0x40022000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58021400 	.word	0x58021400

080011ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b8      	sub	sp, #224	; 0xe0
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	22b8      	movs	r2, #184	; 0xb8
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f006 ffaf 	bl	8008170 <memset>
  if(hi2c->Instance==I2C1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a24      	ldr	r2, [pc, #144]	; (80012a8 <HAL_I2C_MspInit+0xbc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d141      	bne.n	80012a0 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800121c:	2308      	movs	r3, #8
 800121e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fd5a 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f7ff fdbf 	bl	8000db8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 800123c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 800124c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001258:	23c0      	movs	r3, #192	; 0xc0
 800125a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001270:	2304      	movs	r3, #4
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127a:	4619      	mov	r1, r3
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <HAL_I2C_MspInit+0xc4>)
 800127e:	f001 ff6f 	bl	8003160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 8001284:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 800128a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800128e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_I2C_MspInit+0xc0>)
 8001294:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37e0      	adds	r7, #224	; 0xe0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40005400 	.word	0x40005400
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020400 	.word	0x58020400

080012b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0bc      	sub	sp, #240	; 0xf0
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	22b8      	movs	r2, #184	; 0xb8
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 ff4b 	bl	8008170 <memset>
  if(hltdc->Instance==LTDC)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a96      	ldr	r2, [pc, #600]	; (8001538 <HAL_LTDC_MspInit+0x284>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	f040 8125 	bne.w	8001530 <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012e6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 16;
 80012f0:	2310      	movs	r3, #16
 80012f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012f8:	2302      	movs	r3, #2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001300:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001304:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001306:	2300      	movs	r3, #0
 8001308:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fce6 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 800131e:	f7ff fd4b 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001322:	4b86      	ldr	r3, [pc, #536]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001324:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001328:	4a84      	ldr	r2, [pc, #528]	; (800153c <HAL_LTDC_MspInit+0x288>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001334:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	623b      	str	r3, [r7, #32]
 800133e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001340:	4b7e      	ldr	r3, [pc, #504]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001342:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001346:	4a7d      	ldr	r2, [pc, #500]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001350:	4b7a      	ldr	r3, [pc, #488]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001352:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	4b77      	ldr	r3, [pc, #476]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001364:	4a75      	ldr	r2, [pc, #468]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136e:	4b73      	ldr	r3, [pc, #460]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001370:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_LTDC_MspInit+0x288>)
 800137e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_LTDC_MspInit+0x288>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_LTDC_MspInit+0x288>)
 800138e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_LTDC_MspInit+0x288>)
 800139c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a0:	4a66      	ldr	r2, [pc, #408]	; (800153c <HAL_LTDC_MspInit+0x288>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <HAL_LTDC_MspInit+0x288>)
 80013ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b8:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_LTDC_MspInit+0x288>)
 80013ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013be:	4a5f      	ldr	r2, [pc, #380]	; (800153c <HAL_LTDC_MspInit+0x288>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c8:	4b5c      	ldr	r3, [pc, #368]	; (800153c <HAL_LTDC_MspInit+0x288>)
 80013ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    PD2     ------> LTDC_B7
    PD6     ------> LTDC_B2
    PB8     ------> LTDC_B6
    PE0     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80013d6:	f64d 0371 	movw	r3, #55409	; 0xd871
 80013da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013f0:	230e      	movs	r3, #14
 80013f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013fa:	4619      	mov	r1, r3
 80013fc:	4850      	ldr	r0, [pc, #320]	; (8001540 <HAL_LTDC_MspInit+0x28c>)
 80013fe:	f001 feaf 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8001402:	f240 43e3 	movw	r3, #1251	; 0x4e3
 8001406:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800141c:	230e      	movs	r3, #14
 800141e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001426:	4619      	mov	r1, r3
 8001428:	4846      	ldr	r0, [pc, #280]	; (8001544 <HAL_LTDC_MspInit+0x290>)
 800142a:	f001 fe99 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800142e:	237c      	movs	r3, #124	; 0x7c
 8001430:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001446:	230e      	movs	r3, #14
 8001448:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001450:	4619      	mov	r1, r3
 8001452:	483d      	ldr	r0, [pc, #244]	; (8001548 <HAL_LTDC_MspInit+0x294>)
 8001454:	f001 fe84 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001458:	2302      	movs	r3, #2
 800145a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001470:	2309      	movs	r3, #9
 8001472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800147a:	4619      	mov	r1, r3
 800147c:	4833      	ldr	r0, [pc, #204]	; (800154c <HAL_LTDC_MspInit+0x298>)
 800147e:	f001 fe6f 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_8;
 8001482:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8001486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800149c:	230e      	movs	r3, #14
 800149e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a6:	4619      	mov	r1, r3
 80014a8:	4828      	ldr	r0, [pc, #160]	; (800154c <HAL_LTDC_MspInit+0x298>)
 80014aa:	f001 fe59 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_6;
 80014ae:	f240 4341 	movw	r3, #1089	; 0x441
 80014b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014c8:	230e      	movs	r3, #14
 80014ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d2:	4619      	mov	r1, r3
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <HAL_LTDC_MspInit+0x29c>)
 80014d6:	f001 fe43 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ee:	2303      	movs	r3, #3
 80014f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014f4:	2309      	movs	r3, #9
 80014f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014fe:	4619      	mov	r1, r3
 8001500:	4811      	ldr	r0, [pc, #68]	; (8001548 <HAL_LTDC_MspInit+0x294>)
 8001502:	f001 fe2d 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001506:	2304      	movs	r3, #4
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800151e:	2309      	movs	r3, #9
 8001520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001528:	4619      	mov	r1, r3
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_LTDC_MspInit+0x29c>)
 800152c:	f001 fe18 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001530:	bf00      	nop
 8001532:	37f0      	adds	r7, #240	; 0xf0
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	50001000 	.word	0x50001000
 800153c:	58024400 	.word	0x58024400
 8001540:	58021000 	.word	0x58021000
 8001544:	58020800 	.word	0x58020800
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58020c00 	.word	0x58020c00

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0b8      	sub	sp, #224	; 0xe0
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	22b8      	movs	r2, #184	; 0xb8
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fdfb 	bl	8008170 <memset>
  if(huart->Instance==USART3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a25      	ldr	r2, [pc, #148]	; (8001614 <HAL_UART_MspInit+0xc0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d142      	bne.n	800160a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001584:	2302      	movs	r3, #2
 8001586:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fba6 	bl	8004ce4 <HAL_RCCEx_PeriphCLKConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800159e:	f7ff fc0b 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ae:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015c6:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0xc4>)
 80015d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f8:	2307      	movs	r3, #7
 80015fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0xc8>)
 8001606:	f001 fdab 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800160a:	bf00      	nop
 800160c:	37e0      	adds	r7, #224	; 0xe0
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40004800 	.word	0x40004800
 8001618:	58024400 	.word	0x58024400
 800161c:	58020c00 	.word	0x58020c00

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166c:	f000 f93a 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}

08001674 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
//			pos = _putc(pos, '\n');
//		}
//		pos = POS(MARGIN_X, MARGIN_Y);
//	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 8001678:	2080      	movs	r0, #128	; 0x80
 800167a:	f001 ff54 	bl	8003526 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C1_INT_Pin);
 800167e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001682:	f001 ff50 	bl	8003526 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(B1_Pin))
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <EXTI15_10_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <EXTI15_10_IRQHandler+0x2c>)
 80016a6:	f001 ff24 	bl	80034f2 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ae:	f001 ff3a 	bl	8003526 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	58020400 	.word	0x58020400

080016bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <SystemInit+0xd0>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a31      	ldr	r2, [pc, #196]	; (800178c <SystemInit+0xd0>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <SystemInit+0xd4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d807      	bhi.n	80016ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016dc:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <SystemInit+0xd4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <SystemInit+0xd4>)
 80016e6:	f043 0303 	orr.w	r3, r3, #3
 80016ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <SystemInit+0xd8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a28      	ldr	r2, [pc, #160]	; (8001794 <SystemInit+0xd8>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016f8:	4b26      	ldr	r3, [pc, #152]	; (8001794 <SystemInit+0xd8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016fe:	4b25      	ldr	r3, [pc, #148]	; (8001794 <SystemInit+0xd8>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4924      	ldr	r1, [pc, #144]	; (8001794 <SystemInit+0xd8>)
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <SystemInit+0xdc>)
 8001706:	4013      	ands	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <SystemInit+0xd4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <SystemInit+0xd4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 030f 	bic.w	r3, r3, #15
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <SystemInit+0xd4>)
 8001720:	f043 0303 	orr.w	r3, r3, #3
 8001724:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SystemInit+0xd8>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <SystemInit+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SystemInit+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <SystemInit+0xd8>)
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <SystemInit+0xe0>)
 800173c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <SystemInit+0xd8>)
 8001740:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <SystemInit+0xe4>)
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <SystemInit+0xd8>)
 8001746:	4a17      	ldr	r2, [pc, #92]	; (80017a4 <SystemInit+0xe8>)
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <SystemInit+0xd8>)
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <SystemInit+0xe8>)
 8001754:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SystemInit+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <SystemInit+0xd8>)
 800175e:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <SystemInit+0xe8>)
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <SystemInit+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <SystemInit+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a09      	ldr	r2, [pc, #36]	; (8001794 <SystemInit+0xd8>)
 800176e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <SystemInit+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <SystemInit+0xec>)
 800177c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001780:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00
 8001790:	52002000 	.word	0x52002000
 8001794:	58024400 	.word	0x58024400
 8001798:	eaf6ed7f 	.word	0xeaf6ed7f
 800179c:	02020200 	.word	0x02020200
 80017a0:	01ff0000 	.word	0x01ff0000
 80017a4:	01010280 	.word	0x01010280
 80017a8:	52004000 	.word	0x52004000

080017ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017b0:	f7ff ff84 	bl	80016bc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017da:	f006 fca5 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017de:	f7fe ff07 	bl	80005f0 <main>
  bx  lr
 80017e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ec:	24012014 	.word	0x24012014
  ldr r2, =_sidata
 80017f0:	080081e0 	.word	0x080081e0
  ldr r2, =_sbss
 80017f4:	24012014 	.word	0x24012014
  ldr r4, =_ebss
 80017f8:	240fc81c 	.word	0x240fc81c

080017fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <ADC_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001806:	2003      	movs	r0, #3
 8001808:	f001 fc6a 	bl	80030e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800180c:	f003 f894 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_Init+0x68>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4913      	ldr	r1, [pc, #76]	; (800186c <HAL_Init+0x6c>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_Init+0x68>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <HAL_Init+0x6c>)
 8001834:	5cd3      	ldrb	r3, [r2, r3]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_Init+0x70>)
 8001842:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001844:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <HAL_Init+0x74>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f814 	bl	8001878 <HAL_InitTick>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e002      	b.n	8001860 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800185a:	f7ff fc3d 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	58024400 	.word	0x58024400
 800186c:	08008198 	.word	0x08008198
 8001870:	24012008 	.word	0x24012008
 8001874:	24012004 	.word	0x24012004

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_InitTick+0x60>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e021      	b.n	80018d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <HAL_InitTick+0x64>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fc4f 	bl	8003146 <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f001 fc19 	bl	80030f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x68>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	24012010 	.word	0x24012010
 80018dc:	24012004 	.word	0x24012004
 80018e0:	2401200c 	.word	0x2401200c

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	24012010 	.word	0x24012010
 8001908:	240fc818 	.word	0x240fc818

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	240fc818 	.word	0x240fc818

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	24012010 	.word	0x24012010

0800196c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	609a      	str	r2, [r3, #8]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	431a      	orrs	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	609a      	str	r2, [r3, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
 80019e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3360      	adds	r3, #96	; 0x60
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a08:	bf00      	nop
 8001a0a:	371c      	adds	r7, #28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	fa01 f303 	lsl.w	r3, r1, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	611a      	str	r2, [r3, #16]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b087      	sub	sp, #28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3360      	adds	r3, #96	; 0x60
 8001a56:	461a      	mov	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]
  }
}
 8001a70:	bf00      	nop
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b087      	sub	sp, #28
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3330      	adds	r3, #48	; 0x30
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	4413      	add	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	211f      	movs	r1, #31
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 011f 	and.w	r1, r3, #31
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	431a      	orrs	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aee:	bf00      	nop
 8001af0:	371c      	adds	r7, #28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0e5b      	lsrs	r3, r3, #25
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0d1b      	lsrs	r3, r3, #20
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2107      	movs	r1, #7
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0d1b      	lsrs	r3, r3, #20
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0318 	and.w	r3, r3, #24
 8001b72:	4908      	ldr	r1, [pc, #32]	; (8001b94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	000fffff 	.word	0x000fffff

08001b98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6093      	str	r3, [r2, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	5fffffc0 	.word	0x5fffffc0

08001bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <LL_ADC_EnableInternalRegulator+0x24>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	6fffffc0 	.word	0x6fffffc0

08001c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LL_ADC_Enable+0x24>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	7fffffc0 	.word	0x7fffffc0

08001c94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_ADC_Disable+0x24>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	f043 0202 	orr.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	7fffffc0 	.word	0x7fffffc0

08001cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_IsEnabled+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_IsEnabled+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d101      	bne.n	8001cfa <LL_ADC_IsDisableOngoing+0x18>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <LL_ADC_IsDisableOngoing+0x1a>
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <LL_ADC_REG_StartConversion+0x24>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	f043 0204 	orr.w	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	7fffffc0 	.word	0x7fffffc0

08001d30 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d101      	bne.n	8001d48 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e138      	b.n	8002008 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f7ff f9b1 	bl	800110c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff19 	bl	8001bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff feff 	bl	8001bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff34 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d114      	bne.n	8001e0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff18 	bl	8001c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dec:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_ADC_Init+0x294>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	099b      	lsrs	r3, r3, #6
 8001df2:	4a88      	ldr	r2, [pc, #544]	; (8002014 <HAL_ADC_Init+0x298>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dfe:	e002      	b.n	8001e06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f9      	bne.n	8001e00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff17 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	f043 0201 	orr.w	r2, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff77 	bl	8001d30 <LL_ADC_REG_IsConversionOngoing>
 8001e42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 80d2 	bne.w	8001ff6 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 80ce 	bne.w	8001ff6 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff ff24 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d110      	bne.n	8001e9c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e7a:	4867      	ldr	r0, [pc, #412]	; (8002018 <HAL_ADC_Init+0x29c>)
 8001e7c:	f7ff ff1e 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e80:	4604      	mov	r4, r0
 8001e82:	4866      	ldr	r0, [pc, #408]	; (800201c <HAL_ADC_Init+0x2a0>)
 8001e84:	f7ff ff1a 	bl	8001cbc <LL_ADC_IsEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4862      	ldr	r0, [pc, #392]	; (8002020 <HAL_ADC_Init+0x2a4>)
 8001e98:	f7ff fd68 	bl	800196c <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7d5b      	ldrb	r3, [r3, #21]
 8001ea0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea6:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001eac:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7f1b      	ldrb	r3, [r3, #28]
 8001eb2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7f1b      	ldrb	r3, [r3, #28]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	045b      	lsls	r3, r3, #17
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d009      	beq.n	8001eea <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b4c      	ldr	r3, [pc, #304]	; (8002024 <HAL_ADC_Init+0x2a8>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	69b9      	ldr	r1, [r7, #24]
 8001efa:	430b      	orrs	r3, r1
 8001efc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff14 	bl	8001d30 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff21 	bl	8001d56 <LL_ADC_INJ_IsConversionOngoing>
 8001f14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d14a      	bne.n	8001fb2 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d147      	bne.n	8001fb2 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7d1b      	ldrb	r3, [r3, #20]
 8001f26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_ADC_Init+0x2ac>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	69b9      	ldr	r1, [r7, #24]
 8001f40:	430b      	orrs	r3, r1
 8001f42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d11b      	bne.n	8001f86 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	4b34      	ldr	r3, [pc, #208]	; (800202c <HAL_ADC_Init+0x2b0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f62:	3a01      	subs	r2, #1
 8001f64:	0411      	lsls	r1, r2, #16
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f70:	4311      	orrs	r1, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f76:	430a      	orrs	r2, r1
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	611a      	str	r2, [r3, #16]
 8001f84:	e007      	b.n	8001f96 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 fda1 	bl	8002af4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f023 010f 	bic.w	r1, r3, #15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	1e5a      	subs	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd2:	e007      	b.n	8001fe4 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020f 	bic.w	r2, r2, #15
 8001fe2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe8:	f023 0303 	bic.w	r3, r3, #3
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff4:	e007      	b.n	8002006 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f043 0210 	orr.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002006:	7ffb      	ldrb	r3, [r7, #31]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3724      	adds	r7, #36	; 0x24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	24012004 	.word	0x24012004
 8002014:	053e2d63 	.word	0x053e2d63
 8002018:	40022000 	.word	0x40022000
 800201c:	40022100 	.word	0x40022100
 8002020:	40022300 	.word	0x40022300
 8002024:	fff0c003 	.word	0xfff0c003
 8002028:	ffffbffc 	.word	0xffffbffc
 800202c:	fc00f81e 	.word	0xfc00f81e

08002030 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002038:	4856      	ldr	r0, [pc, #344]	; (8002194 <HAL_ADC_Start+0x164>)
 800203a:	f7ff fdad 	bl	8001b98 <LL_ADC_GetMultimode>
 800203e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe73 	bl	8001d30 <LL_ADC_REG_IsConversionOngoing>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f040 809a 	bne.w	8002186 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_ADC_Start+0x30>
 800205c:	2302      	movs	r3, #2
 800205e:	e095      	b.n	800218c <HAL_ADC_Start+0x15c>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fc67 	bl	800293c <ADC_Enable>
 800206e:	4603      	mov	r3, r0
 8002070:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 8081 	bne.w	800217c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800207e:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_ADC_Start+0x168>)
 8002080:	4013      	ands	r3, r2
 8002082:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a43      	ldr	r2, [pc, #268]	; (800219c <HAL_ADC_Start+0x16c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d002      	beq.n	800209a <HAL_ADC_Start+0x6a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e000      	b.n	800209c <HAL_ADC_Start+0x6c>
 800209a:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <HAL_ADC_Start+0x170>)
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d002      	beq.n	80020aa <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c2:	d106      	bne.n	80020d2 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f023 0206 	bic.w	r2, r3, #6
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	659a      	str	r2, [r3, #88]	; 0x58
 80020d0:	e002      	b.n	80020d8 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	221c      	movs	r2, #28
 80020de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2b      	ldr	r2, [pc, #172]	; (800219c <HAL_ADC_Start+0x16c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d002      	beq.n	80020f8 <HAL_ADC_Start+0xc8>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	e000      	b.n	80020fa <HAL_ADC_Start+0xca>
 80020f8:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_ADC_Start+0x170>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	4293      	cmp	r3, r2
 8002100:	d008      	beq.n	8002114 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d002      	beq.n	8002114 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d114      	bne.n	800213e <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002126:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800212a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fde6 	bl	8001d08 <LL_ADC_REG_StartConversion>
 800213c:	e025      	b.n	800218a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002142:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <HAL_ADC_Start+0x16c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d002      	beq.n	800215a <HAL_ADC_Start+0x12a>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e000      	b.n	800215c <HAL_ADC_Start+0x12c>
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_ADC_Start+0x170>)
 800215c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00f      	beq.n	800218a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
 800217a:	e006      	b.n	800218a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002184:	e001      	b.n	800218a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002186:	2302      	movs	r3, #2
 8002188:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800218a:	7dfb      	ldrb	r3, [r7, #23]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40022300 	.word	0x40022300
 8002198:	fffff0fe 	.word	0xfffff0fe
 800219c:	40022100 	.word	0x40022100
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ae:	4866      	ldr	r0, [pc, #408]	; (8002348 <HAL_ADC_PollForConversion+0x1a4>)
 80021b0:	f7ff fcf2 	bl	8001b98 <LL_ADC_GetMultimode>
 80021b4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d102      	bne.n	80021c4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80021be:	2308      	movs	r3, #8
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e02a      	b.n	800221a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d002      	beq.n	80021d6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b09      	cmp	r3, #9
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e8:	f043 0220 	orr.w	r2, r3, #32
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0a4      	b.n	800233e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021f4:	2304      	movs	r3, #4
 80021f6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80021f8:	e00f      	b.n	800221a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021fa:	4853      	ldr	r0, [pc, #332]	; (8002348 <HAL_ADC_PollForConversion+0x1a4>)
 80021fc:	f7ff fcda 	bl	8001bb4 <LL_ADC_GetMultiDMATransfer>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f043 0220 	orr.w	r2, r3, #32
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e093      	b.n	800233e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002216:	2304      	movs	r3, #4
 8002218:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800221a:	f7ff fb77 	bl	800190c <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002220:	e021      	b.n	8002266 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d01d      	beq.n	8002266 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800222a:	f7ff fb6f 	bl	800190c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <HAL_ADC_PollForConversion+0x9c>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d112      	bne.n	8002266 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10b      	bne.n	8002266 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f043 0204 	orr.w	r2, r3, #4
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e06b      	b.n	800233e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0d6      	beq.n	8002222 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fbf9 	bl	8001a7c <LL_ADC_REG_IsTriggerSourceSWStart>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01c      	beq.n	80022ca <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7d5b      	ldrb	r3, [r3, #21]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d118      	bne.n	80022ca <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d111      	bne.n	80022ca <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1f      	ldr	r2, [pc, #124]	; (800234c <HAL_ADC_PollForConversion+0x1a8>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d002      	beq.n	80022da <HAL_ADC_PollForConversion+0x136>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	e000      	b.n	80022dc <HAL_ADC_PollForConversion+0x138>
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_ADC_PollForConversion+0x1ac>)
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d008      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d002      	beq.n	80022f6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b09      	cmp	r3, #9
 80022f4:	d104      	bne.n	8002300 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	e00c      	b.n	800231a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_ADC_PollForConversion+0x1a8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d002      	beq.n	8002310 <HAL_ADC_PollForConversion+0x16c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	e000      	b.n	8002312 <HAL_ADC_PollForConversion+0x16e>
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_ADC_PollForConversion+0x1ac>)
 8002312:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d104      	bne.n	800232a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2208      	movs	r2, #8
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e008      	b.n	800233c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d103      	bne.n	800233c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	220c      	movs	r2, #12
 800233a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022300 	.word	0x40022300
 800234c:	40022100 	.word	0x40022100
 8002350:	40022000 	.word	0x40022000

08002354 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b0a1      	sub	sp, #132	; 0x84
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a9a      	ldr	r2, [pc, #616]	; (80025f4 <HAL_ADC_ConfigChannel+0x284>)
 800238a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x2a>
 8002396:	2302      	movs	r3, #2
 8002398:	e2bc      	b.n	8002914 <HAL_ADC_ConfigChannel+0x5a4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fcc2 	bl	8001d30 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 82a1 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d108      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x62>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2201      	movs	r2, #1
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	e016      	b.n	8002400 <HAL_ADC_ConfigChannel+0x90>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e003      	b.n	80023f6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80023ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2201      	movs	r2, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	69d1      	ldr	r1, [r2, #28]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	430b      	orrs	r3, r1
 800240c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	f7ff fb41 	bl	8001aa2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fc83 	bl	8001d30 <LL_ADC_REG_IsConversionOngoing>
 800242a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fc90 	bl	8001d56 <LL_ADC_INJ_IsConversionOngoing>
 8002436:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80a0 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002440:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 809c 	bne.w	8002580 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	461a      	mov	r2, r3
 8002456:	f7ff fb50 	bl	8001afa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0310 	and.w	r3, r3, #16
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x110>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695a      	ldr	r2, [r3, #20]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	e00a      	b.n	8002496 <HAL_ADC_ConfigChannel+0x126>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b04      	cmp	r3, #4
 800249e:	d027      	beq.n	80024f0 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6919      	ldr	r1, [r3, #16]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ae:	f7ff fa91 	bl	80019d4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6919      	ldr	r1, [r3, #16]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	7e5b      	ldrb	r3, [r3, #25]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d102      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x158>
 80024c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80024c6:	e000      	b.n	80024ca <HAL_ADC_ConfigChannel+0x15a>
 80024c8:	2300      	movs	r3, #0
 80024ca:	461a      	mov	r2, r3
 80024cc:	f7ff fabb 	bl	8001a46 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6919      	ldr	r1, [r3, #16]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7e1b      	ldrb	r3, [r3, #24]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d102      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x176>
 80024e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e4:	e000      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x178>
 80024e6:	2300      	movs	r3, #0
 80024e8:	461a      	mov	r2, r3
 80024ea:	f7ff fa93 	bl	8001a14 <LL_ADC_SetDataRightShift>
 80024ee:	e047      	b.n	8002580 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	069b      	lsls	r3, r3, #26
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002512:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	429a      	cmp	r2, r3
 8002526:	d107      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002536:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	069b      	lsls	r3, r3, #26
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	069b      	lsls	r3, r3, #26
 800256c:	429a      	cmp	r2, r3
 800256e:	d107      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800257e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fb99 	bl	8001cbc <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f040 81bb 	bne.w	8002908 <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	461a      	mov	r2, r3
 80025a0:	f7ff fad6 	bl	8001b50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_ADC_ConfigChannel+0x284>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	f040 8130 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x268>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	0e9b      	lsrs	r3, r3, #26
 80025c6:	3301      	adds	r3, #1
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	bf94      	ite	ls
 80025d0:	2301      	movls	r3, #1
 80025d2:	2300      	movhi	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	e01b      	b.n	8002610 <HAL_ADC_ConfigChannel+0x2a0>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80025ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d103      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e005      	b.n	8002600 <HAL_ADC_ConfigChannel+0x290>
 80025f4:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 80025f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2b09      	cmp	r3, #9
 8002608:	bf94      	ite	ls
 800260a:	2301      	movls	r3, #1
 800260c:	2300      	movhi	r3, #0
 800260e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002610:	2b00      	cmp	r3, #0
 8002612:	d079      	beq.n	8002708 <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800261c:	2b00      	cmp	r3, #0
 800261e:	d107      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x2c0>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	0e9b      	lsrs	r3, r3, #26
 8002626:	3301      	adds	r3, #1
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262e:	e015      	b.n	800265c <HAL_ADC_ConfigChannel+0x2ec>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002638:	fa93 f3a3 	rbit	r3, r3
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8002648:	2320      	movs	r3, #32
 800264a:	e003      	b.n	8002654 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 800264c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	069b      	lsls	r3, r3, #26
 8002658:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_ADC_ConfigChannel+0x30c>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	3301      	adds	r3, #1
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	2101      	movs	r1, #1
 8002676:	fa01 f303 	lsl.w	r3, r1, r3
 800267a:	e017      	b.n	80026ac <HAL_ADC_ConfigChannel+0x33c>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	fa93 f3a3 	rbit	r3, r3
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800268e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e003      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2101      	movs	r1, #1
 80026a8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x362>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	3301      	adds	r3, #1
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	e018      	b.n	8002704 <HAL_ADC_ConfigChannel+0x394>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002704:	430b      	orrs	r3, r1
 8002706:	e07e      	b.n	8002806 <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x3b4>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	3301      	adds	r3, #1
 800271c:	069b      	lsls	r3, r3, #26
 800271e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002722:	e015      	b.n	8002750 <HAL_ADC_ConfigChannel+0x3e0>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x400>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	3301      	adds	r3, #1
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	e017      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x430>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	61bb      	str	r3, [r7, #24]
  return result;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f303 	lsl.w	r3, r1, r3
 80027a0:	ea42 0103 	orr.w	r1, r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10d      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x45c>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	3b1e      	subs	r3, #30
 80027c4:	051b      	lsls	r3, r3, #20
 80027c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027ca:	e01b      	b.n	8002804 <HAL_ADC_ConfigChannel+0x494>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	60fb      	str	r3, [r7, #12]
  return result;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	e003      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f003 021f 	and.w	r2, r3, #31
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	3b1e      	subs	r3, #30
 80027fe:	051b      	lsls	r3, r3, #20
 8002800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002804:	430b      	orrs	r3, r1
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6892      	ldr	r2, [r2, #8]
 800280a:	4619      	mov	r1, r3
 800280c:	f7ff f975 	bl	8001afa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da77      	bge.n	8002908 <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002818:	4840      	ldr	r0, [pc, #256]	; (800291c <HAL_ADC_ConfigChannel+0x5ac>)
 800281a:	f7ff f8cd 	bl	80019b8 <LL_ADC_GetCommonPathInternalCh>
 800281e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002820:	483f      	ldr	r0, [pc, #252]	; (8002920 <HAL_ADC_ConfigChannel+0x5b0>)
 8002822:	f7ff fa4b 	bl	8001cbc <LL_ADC_IsEnabled>
 8002826:	4604      	mov	r4, r0
 8002828:	483e      	ldr	r0, [pc, #248]	; (8002924 <HAL_ADC_ConfigChannel+0x5b4>)
 800282a:	f7ff fa47 	bl	8001cbc <LL_ADC_IsEnabled>
 800282e:	4603      	mov	r3, r0
 8002830:	4323      	orrs	r3, r4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d155      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3b      	ldr	r2, [pc, #236]	; (8002928 <HAL_ADC_ConfigChannel+0x5b8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d122      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x516>
 8002840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d11d      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a35      	ldr	r2, [pc, #212]	; (8002924 <HAL_ADC_ConfigChannel+0x5b4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d159      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800285a:	4619      	mov	r1, r3
 800285c:	482f      	ldr	r0, [pc, #188]	; (800291c <HAL_ADC_ConfigChannel+0x5ac>)
 800285e:	f7ff f898 	bl	8001992 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_ADC_ConfigChannel+0x5bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4a31      	ldr	r2, [pc, #196]	; (8002930 <HAL_ADC_ConfigChannel+0x5c0>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	3301      	adds	r3, #1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002876:	e002      	b.n	800287e <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3b01      	subs	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002884:	e040      	b.n	8002908 <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a2a      	ldr	r2, [pc, #168]	; (8002934 <HAL_ADC_ConfigChannel+0x5c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x544>
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10c      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_ADC_ConfigChannel+0x5b4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d131      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80028a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028aa:	4619      	mov	r1, r3
 80028ac:	481b      	ldr	r0, [pc, #108]	; (800291c <HAL_ADC_ConfigChannel+0x5ac>)
 80028ae:	f7ff f870 	bl	8001992 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028b2:	e029      	b.n	8002908 <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <HAL_ADC_ConfigChannel+0x5c8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d124      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x598>
 80028be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11f      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_ADC_ConfigChannel+0x5b4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d11a      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	4619      	mov	r1, r3
 80028da:	4810      	ldr	r0, [pc, #64]	; (800291c <HAL_ADC_ConfigChannel+0x5ac>)
 80028dc:	f7ff f859 	bl	8001992 <LL_ADC_SetCommonPathInternalCh>
 80028e0:	e012      	b.n	8002908 <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028f4:	e008      	b.n	8002908 <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f043 0220 	orr.w	r2, r3, #32
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002910:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002914:	4618      	mov	r0, r3
 8002916:	3784      	adds	r7, #132	; 0x84
 8002918:	46bd      	mov	sp, r7
 800291a:	bd90      	pop	{r4, r7, pc}
 800291c:	40022300 	.word	0x40022300
 8002920:	40022000 	.word	0x40022000
 8002924:	40022100 	.word	0x40022100
 8002928:	cb840000 	.word	0xcb840000
 800292c:	24012004 	.word	0x24012004
 8002930:	053e2d63 	.word	0x053e2d63
 8002934:	bac04000 	.word	0xbac04000
 8002938:	cfb80000 	.word	0xcfb80000

0800293c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f9b7 	bl	8001cbc <LL_ADC_IsEnabled>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d161      	bne.n	8002a18 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <ADC_Enable+0xe8>)
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0210 	orr.w	r2, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f043 0201 	orr.w	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04d      	b.n	8002a1a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f972 	bl	8001c6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002988:	f7fe ffc0 	bl	800190c <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800298e:	4826      	ldr	r0, [pc, #152]	; (8002a28 <ADC_Enable+0xec>)
 8002990:	f7ff f902 	bl	8001b98 <LL_ADC_GetMultimode>
 8002994:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a24      	ldr	r2, [pc, #144]	; (8002a2c <ADC_Enable+0xf0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d002      	beq.n	80029a6 <ADC_Enable+0x6a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	e000      	b.n	80029a8 <ADC_Enable+0x6c>
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <ADC_Enable+0xf4>)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d02c      	beq.n	8002a0a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d130      	bne.n	8002a18 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029b6:	e028      	b.n	8002a0a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff f97d 	bl	8001cbc <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff f94d 	bl	8001c6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029d2:	f7fe ff9b 	bl	800190c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d914      	bls.n	8002a0a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d00d      	beq.n	8002a0a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	f043 0210 	orr.w	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d1cf      	bne.n	80029b8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	8000003f 	.word	0x8000003f
 8002a28:	40022300 	.word	0x40022300
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022000 	.word	0x40022000

08002a34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f94e 	bl	8001ce2 <LL_ADC_IsDisableOngoing>
 8002a46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff f935 	bl	8001cbc <LL_ADC_IsEnabled>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d047      	beq.n	8002ae8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d144      	bne.n	8002ae8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030d 	and.w	r3, r3, #13
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10c      	bne.n	8002a86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff f90f 	bl	8001c94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe ff45 	bl	800190c <HAL_GetTick>
 8002a82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a84:	e029      	b.n	8002ada <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8a:	f043 0210 	orr.w	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e023      	b.n	8002aea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aa2:	f7fe ff33 	bl	800190c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d914      	bls.n	8002ada <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e007      	b.n	8002aea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1dc      	bne.n	8002aa2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002afc:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <ADC_ConfigureBoostMode+0x188>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d01c      	beq.n	8002b42 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b08:	f002 f890 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8002b0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b16:	d010      	beq.n	8002b3a <ADC_ConfigureBoostMode+0x46>
 8002b18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b1c:	d871      	bhi.n	8002c02 <ADC_ConfigureBoostMode+0x10e>
 8002b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b22:	d002      	beq.n	8002b2a <ADC_ConfigureBoostMode+0x36>
 8002b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b28:	d16b      	bne.n	8002c02 <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	0c1b      	lsrs	r3, r3, #16
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	60fb      	str	r3, [r7, #12]
        break;
 8002b38:	e066      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
        break;
 8002b40:	e062      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b46:	f002 ffd9 	bl	8005afc <HAL_RCCEx_GetPeriphCLKFreq>
 8002b4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b54:	d051      	beq.n	8002bfa <ADC_ConfigureBoostMode+0x106>
 8002b56:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002b5a:	d854      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b60:	d047      	beq.n	8002bf2 <ADC_ConfigureBoostMode+0xfe>
 8002b62:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002b66:	d84e      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b6c:	d03d      	beq.n	8002bea <ADC_ConfigureBoostMode+0xf6>
 8002b6e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002b72:	d848      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b78:	d033      	beq.n	8002be2 <ADC_ConfigureBoostMode+0xee>
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b7e:	d842      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b84:	d029      	beq.n	8002bda <ADC_ConfigureBoostMode+0xe6>
 8002b86:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002b8a:	d83c      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b90:	d01a      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0xd4>
 8002b92:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002b96:	d836      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002b98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002b9c:	d014      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0xd4>
 8002b9e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ba2:	d830      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba8:	d00e      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0xd4>
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bae:	d82a      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002bb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bb4:	d008      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0xd4>
 8002bb6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bba:	d824      	bhi.n	8002c06 <ADC_ConfigureBoostMode+0x112>
 8002bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bc0:	d002      	beq.n	8002bc8 <ADC_ConfigureBoostMode+0xd4>
 8002bc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bc6:	d11e      	bne.n	8002c06 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c9b      	lsrs	r3, r3, #18
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	60fb      	str	r3, [r7, #12]
        break;
 8002bd8:	e016      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	60fb      	str	r3, [r7, #12]
        break;
 8002be0:	e012      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	60fb      	str	r3, [r7, #12]
        break;
 8002be8:	e00e      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	60fb      	str	r3, [r7, #12]
        break;
 8002bf0:	e00a      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	09db      	lsrs	r3, r3, #7
 8002bf6:	60fb      	str	r3, [r7, #12]
        break;
 8002bf8:	e006      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	60fb      	str	r3, [r7, #12]
        break;
 8002c00:	e002      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
        break;
 8002c02:	bf00      	nop
 8002c04:	e000      	b.n	8002c08 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002c06:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4a1b      	ldr	r2, [pc, #108]	; (8002c80 <ADC_ConfigureBoostMode+0x18c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d808      	bhi.n	8002c28 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c24:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c26:	e025      	b.n	8002c74 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	; (8002c84 <ADC_ConfigureBoostMode+0x190>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d80a      	bhi.n	8002c46 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c42:	609a      	str	r2, [r3, #8]
}
 8002c44:	e016      	b.n	8002c74 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <ADC_ConfigureBoostMode+0x194>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d80a      	bhi.n	8002c64 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	609a      	str	r2, [r3, #8]
}
 8002c62:	e007      	b.n	8002c74 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002c72:	609a      	str	r2, [r3, #8]
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40022300 	.word	0x40022300
 8002c80:	005f5e10 	.word	0x005f5e10
 8002c84:	00bebc20 	.word	0x00bebc20
 8002c88:	017d7840 	.word	0x017d7840

08002c8c <LL_ADC_IsEnabled>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <LL_ADC_IsEnabled+0x18>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <LL_ADC_IsEnabled+0x1a>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <LL_ADC_StartCalibration>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <LL_ADC_StartCalibration+0x38>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	3ffeffc0 	.word	0x3ffeffc0

08002cf0 <LL_ADC_IsCalibrationOnGoing>:
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d04:	d101      	bne.n	8002d0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d101      	bne.n	8002d30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_ADCEx_Calibration_Start+0x1e>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e04c      	b.n	8002df8 <HAL_ADCEx_Calibration_Start+0xb8>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fe64 	bl	8002a34 <ADC_Disable>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d135      	bne.n	8002de2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d7a:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff90 	bl	8002cb4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d94:	e014      	b.n	8002dc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d30d      	bcc.n	8002dc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f023 0312 	bic.w	r3, r3, #18
 8002dac:	f043 0210 	orr.w	r2, r3, #16
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e01b      	b.n	8002df8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff93 	bl	8002cf0 <LL_ADC_IsCalibrationOnGoing>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e2      	bne.n	8002d96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f023 0303 	bic.w	r3, r3, #3
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
 8002de0:	e005      	b.n	8002dee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f043 0210 	orr.w	r2, r3, #16
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	ffffeefd 	.word	0xffffeefd
 8002e04:	25c3f800 	.word	0x25c3f800

08002e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e08:	b590      	push	{r4, r7, lr}
 8002e0a:	b09f      	sub	sp, #124	; 0x7c
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e080      	b.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d102      	bne.n	8002e46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e40:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e001      	b.n	8002e4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10b      	bne.n	8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e05f      	b.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff54 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 8002e70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff4e 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d141      	bne.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d13e      	bne.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e88:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002e8a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d020      	beq.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea6:	4822      	ldr	r0, [pc, #136]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ea8:	f7ff fef0 	bl	8002c8c <LL_ADC_IsEnabled>
 8002eac:	4604      	mov	r4, r0
 8002eae:	4821      	ldr	r0, [pc, #132]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eb0:	f7ff feec 	bl	8002c8c <LL_ADC_IsEnabled>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d12e      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	6811      	ldr	r1, [r2, #0]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed4:	e021      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ee2:	4813      	ldr	r0, [pc, #76]	; (8002f30 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ee4:	f7ff fed2 	bl	8002c8c <LL_ADC_IsEnabled>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	4812      	ldr	r0, [pc, #72]	; (8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002eec:	f7ff fece 	bl	8002c8c <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d110      	bne.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f02:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f04:	e009      	b.n	8002f1a <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f043 0220 	orr.w	r2, r3, #32
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f18:	e000      	b.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f24:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	377c      	adds	r7, #124	; 0x7c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40022100 	.word	0x40022100
 8002f38:	40022300 	.word	0x40022300
 8002f3c:	fffff0e0 	.word	0xfffff0e0

08002f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <__NVIC_SetPriorityGrouping+0x40>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6e:	4a04      	ldr	r2, [pc, #16]	; (8002f80 <__NVIC_SetPriorityGrouping+0x40>)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	60d3      	str	r3, [r2, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00
 8002f84:	05fa0000 	.word	0x05fa0000

08002f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 0307 	and.w	r3, r3, #7
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	db0b      	blt.n	8002fce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	f003 021f 	and.w	r2, r3, #31
 8002fbc:	4907      	ldr	r1, [pc, #28]	; (8002fdc <__NVIC_EnableIRQ+0x38>)
 8002fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000e100 	.word	0xe000e100

08002fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	6039      	str	r1, [r7, #0]
 8002fea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	db0a      	blt.n	800300a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	490c      	ldr	r1, [pc, #48]	; (800302c <__NVIC_SetPriority+0x4c>)
 8002ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ffe:	0112      	lsls	r2, r2, #4
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	440b      	add	r3, r1
 8003004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003008:	e00a      	b.n	8003020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4908      	ldr	r1, [pc, #32]	; (8003030 <__NVIC_SetPriority+0x50>)
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	3b04      	subs	r3, #4
 8003018:	0112      	lsls	r2, r2, #4
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	440b      	add	r3, r1
 800301e:	761a      	strb	r2, [r3, #24]
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000e100 	.word	0xe000e100
 8003030:	e000ed00 	.word	0xe000ed00

08003034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	; 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f1c3 0307 	rsb	r3, r3, #7
 800304e:	2b04      	cmp	r3, #4
 8003050:	bf28      	it	cs
 8003052:	2304      	movcs	r3, #4
 8003054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3304      	adds	r3, #4
 800305a:	2b06      	cmp	r3, #6
 800305c:	d902      	bls.n	8003064 <NVIC_EncodePriority+0x30>
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3b03      	subs	r3, #3
 8003062:	e000      	b.n	8003066 <NVIC_EncodePriority+0x32>
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003068:	f04f 32ff 	mov.w	r2, #4294967295
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	401a      	ands	r2, r3
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800307c:	f04f 31ff 	mov.w	r1, #4294967295
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43d9      	mvns	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800308c:	4313      	orrs	r3, r2
         );
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ac:	d301      	bcc.n	80030b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00f      	b.n	80030d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b2:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <SysTick_Config+0x40>)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ba:	210f      	movs	r1, #15
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f7ff ff8e 	bl	8002fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <SysTick_Config+0x40>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ca:	4b04      	ldr	r3, [pc, #16]	; (80030dc <SysTick_Config+0x40>)
 80030cc:	2207      	movs	r2, #7
 80030ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	e000e010 	.word	0xe000e010

080030e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff ff29 	bl	8002f40 <__NVIC_SetPriorityGrouping>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	4603      	mov	r3, r0
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff40 	bl	8002f88 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff90 	bl	8003034 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5f 	bl	8002fe0 <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003134:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff33 	bl	8002fa4 <__NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffa4 	bl	800309c <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_GPIO_Init+0x234>)
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003172:	e194      	b.n	800349e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8186 	beq.w	8003498 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x44>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0201 	and.w	r2, r3, #1
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e0 	beq.w	8003498 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032da:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80032de:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80032e8:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_GPIO_Init+0x238>)
 80032ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a29      	ldr	r2, [pc, #164]	; (800339c <HAL_GPIO_Init+0x23c>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a20      	ldr	r2, [pc, #128]	; (80033a0 <HAL_GPIO_Init+0x240>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d052      	beq.n	80033c8 <HAL_GPIO_Init+0x268>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1f      	ldr	r2, [pc, #124]	; (80033a4 <HAL_GPIO_Init+0x244>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1e      	ldr	r2, [pc, #120]	; (80033a8 <HAL_GPIO_Init+0x248>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_GPIO_Init+0x24c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	; (80033b0 <HAL_GPIO_Init+0x250>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1b      	ldr	r2, [pc, #108]	; (80033b4 <HAL_GPIO_Init+0x254>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_GPIO_Init+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_GPIO_Init+0x25c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <HAL_GPIO_Init+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_GPIO_Init+0x264>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x20e>
 800336a:	2309      	movs	r3, #9
 800336c:	e02d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800336e:	230a      	movs	r3, #10
 8003370:	e02b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003372:	2308      	movs	r3, #8
 8003374:	e029      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003376:	2307      	movs	r3, #7
 8003378:	e027      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337a:	2306      	movs	r3, #6
 800337c:	e025      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337e:	2305      	movs	r3, #5
 8003380:	e023      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003382:	2304      	movs	r3, #4
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003386:	2303      	movs	r3, #3
 8003388:	e01f      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338a:	2302      	movs	r3, #2
 800338c:	e01d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338e:	2301      	movs	r3, #1
 8003390:	e01b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003392:	bf00      	nop
 8003394:	58000080 	.word	0x58000080
 8003398:	58024400 	.word	0x58024400
 800339c:	58000400 	.word	0x58000400
 80033a0:	58020000 	.word	0x58020000
 80033a4:	58020400 	.word	0x58020400
 80033a8:	58020800 	.word	0x58020800
 80033ac:	58020c00 	.word	0x58020c00
 80033b0:	58021000 	.word	0x58021000
 80033b4:	58021400 	.word	0x58021400
 80033b8:	58021800 	.word	0x58021800
 80033bc:	58021c00 	.word	0x58021c00
 80033c0:	58022000 	.word	0x58022000
 80033c4:	58022400 	.word	0x58022400
 80033c8:	2300      	movs	r3, #0
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f002 0203 	and.w	r2, r2, #3
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	4093      	lsls	r3, r2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033da:	4938      	ldr	r1, [pc, #224]	; (80034bc <HAL_GPIO_Init+0x35c>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800340e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f ae63 	bne.w	8003174 <HAL_GPIO_Init+0x14>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3724      	adds	r7, #36	; 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	58000400 	.word	0x58000400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	041a      	lsls	r2, r3, #16
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43d9      	mvns	r1, r3
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	400b      	ands	r3, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	619a      	str	r2, [r3, #24]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4013      	ands	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	4618      	mov	r0, r3
 800354e:	f000 f804 	bl	800355a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fe28 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	e006      	b.n	80035f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d104      	bne.n	800360a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_I2C_Init+0x11c>)
 8003616:	430b      	orrs	r3, r1
 8003618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	02008000 	.word	0x02008000

08003690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d138      	bne.n	8003718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e032      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d139      	bne.n	80037b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003746:	2302      	movs	r3, #2
 8003748:	e033      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2224      	movs	r2, #36	; 0x24
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0bf      	b.n	8003952 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fd fd64 	bl	80012b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003802:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003818:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b4a      	ldr	r3, [pc, #296]	; (800395c <HAL_LTDC_Init+0x19c>)
 8003834:	400b      	ands	r3, r1
 8003836:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	041b      	lsls	r3, r3, #16
 800383e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6899      	ldr	r1, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68d9      	ldr	r1, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b3e      	ldr	r3, [pc, #248]	; (800395c <HAL_LTDC_Init+0x19c>)
 8003862:	400b      	ands	r3, r1
 8003864:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	041b      	lsls	r3, r3, #16
 800386c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68d9      	ldr	r1, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1a      	ldr	r2, [r3, #32]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6919      	ldr	r1, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b33      	ldr	r3, [pc, #204]	; (800395c <HAL_LTDC_Init+0x19c>)
 8003890:	400b      	ands	r3, r1
 8003892:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6919      	ldr	r1, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	431a      	orrs	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6959      	ldr	r1, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4b27      	ldr	r3, [pc, #156]	; (800395c <HAL_LTDC_Init+0x19c>)
 80038be:	400b      	ands	r3, r1
 80038c0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6959      	ldr	r1, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0206 	orr.w	r2, r2, #6
 800392e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	f000f800 	.word	0xf000f800

08003960 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003960:	b5b0      	push	{r4, r5, r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_LTDC_ConfigLayer+0x1a>
 8003976:	2302      	movs	r3, #2
 8003978:	e02c      	b.n	80039d4 <HAL_LTDC_ConfigLayer+0x74>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2134      	movs	r1, #52	; 0x34
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	4614      	mov	r4, r2
 800399e:	461d      	mov	r5, r3
 80039a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80039ac:	682b      	ldr	r3, [r5, #0]
 80039ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	68b9      	ldr	r1, [r7, #8]
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f811 	bl	80039dc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bdb0      	pop	{r4, r5, r7, pc}

080039dc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f8:	4413      	add	r3, r2
 80039fa:	041b      	lsls	r3, r3, #16
 80039fc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	01db      	lsls	r3, r3, #7
 8003a08:	4413      	add	r3, r2
 8003a0a:	3384      	adds	r3, #132	; 0x84
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	6812      	ldr	r2, [r2, #0]
 8003a12:	4611      	mov	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	01d2      	lsls	r2, r2, #7
 8003a18:	440a      	add	r2, r1
 8003a1a:	3284      	adds	r2, #132	; 0x84
 8003a1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a32:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a34:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	01db      	lsls	r3, r3, #7
 8003a40:	440b      	add	r3, r1
 8003a42:	3384      	adds	r3, #132	; 0x84
 8003a44:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003a4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a5a:	4413      	add	r3, r2
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	01db      	lsls	r3, r3, #7
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3384      	adds	r3, #132	; 0x84
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	4611      	mov	r1, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	01d2      	lsls	r2, r2, #7
 8003a7a:	440a      	add	r2, r1
 8003a7c:	3284      	adds	r2, #132	; 0x84
 8003a7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003a82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a92:	4413      	add	r3, r2
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	01db      	lsls	r3, r3, #7
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3384      	adds	r3, #132	; 0x84
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	01db      	lsls	r3, r3, #7
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3384      	adds	r3, #132	; 0x84
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	01d2      	lsls	r2, r2, #7
 8003ac6:	440a      	add	r2, r1
 8003ac8:	3284      	adds	r2, #132	; 0x84
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	01db      	lsls	r3, r3, #7
 8003ada:	4413      	add	r3, r2
 8003adc:	3384      	adds	r3, #132	; 0x84
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	01db      	lsls	r3, r3, #7
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3384      	adds	r3, #132	; 0x84
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	01db      	lsls	r3, r3, #7
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3384      	adds	r3, #132	; 0x84
 8003b20:	461a      	mov	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	431a      	orrs	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	01db      	lsls	r3, r3, #7
 8003b40:	440b      	add	r3, r1
 8003b42:	3384      	adds	r3, #132	; 0x84
 8003b44:	4619      	mov	r1, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	01db      	lsls	r3, r3, #7
 8003b56:	4413      	add	r3, r2
 8003b58:	3384      	adds	r3, #132	; 0x84
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	4611      	mov	r1, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	01d2      	lsls	r2, r2, #7
 8003b66:	440a      	add	r2, r1
 8003b68:	3284      	adds	r2, #132	; 0x84
 8003b6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	01db      	lsls	r3, r3, #7
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3384      	adds	r3, #132	; 0x84
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	01db      	lsls	r3, r3, #7
 8003b90:	4413      	add	r3, r2
 8003b92:	3384      	adds	r3, #132	; 0x84
 8003b94:	69da      	ldr	r2, [r3, #28]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	01db      	lsls	r3, r3, #7
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3384      	adds	r3, #132	; 0x84
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <LTDC_SetConfig+0x32c>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	6809      	ldr	r1, [r1, #0]
 8003bb8:	4608      	mov	r0, r1
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	01c9      	lsls	r1, r1, #7
 8003bbe:	4401      	add	r1, r0
 8003bc0:	3184      	adds	r1, #132	; 0x84
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	01db      	lsls	r3, r3, #7
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3384      	adds	r3, #132	; 0x84
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	01db      	lsls	r3, r3, #7
 8003be0:	4413      	add	r3, r2
 8003be2:	3384      	adds	r3, #132	; 0x84
 8003be4:	461a      	mov	r2, r3
 8003be6:	2300      	movs	r3, #0
 8003be8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	01db      	lsls	r3, r3, #7
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3384      	adds	r3, #132	; 0x84
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003c08:	2304      	movs	r3, #4
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e01b      	b.n	8003c46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003c16:	2303      	movs	r3, #3
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	e014      	b.n	8003c46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d00b      	beq.n	8003c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d007      	beq.n	8003c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003c38:	2b07      	cmp	r3, #7
 8003c3a:	d102      	bne.n	8003c42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	e001      	b.n	8003c46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	4413      	add	r3, r2
 8003c52:	3384      	adds	r3, #132	; 0x84
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	01d2      	lsls	r2, r2, #7
 8003c60:	440a      	add	r2, r1
 8003c62:	3284      	adds	r2, #132	; 0x84
 8003c64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	041a      	lsls	r2, r3, #16
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	1acb      	subs	r3, r1, r3
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	3307      	adds	r3, #7
 8003c88:	68f9      	ldr	r1, [r7, #12]
 8003c8a:	6809      	ldr	r1, [r1, #0]
 8003c8c:	4608      	mov	r0, r1
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	01c9      	lsls	r1, r1, #7
 8003c92:	4401      	add	r1, r0
 8003c94:	3184      	adds	r1, #132	; 0x84
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	01db      	lsls	r3, r3, #7
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3384      	adds	r3, #132	; 0x84
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	01db      	lsls	r3, r3, #7
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3384      	adds	r3, #132	; 0x84
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <LTDC_SetConfig+0x330>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	01db      	lsls	r3, r3, #7
 8003cca:	4413      	add	r3, r2
 8003ccc:	3384      	adds	r3, #132	; 0x84
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	01db      	lsls	r3, r3, #7
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3384      	adds	r3, #132	; 0x84
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4611      	mov	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	01d2      	lsls	r2, r2, #7
 8003cf0:	440a      	add	r2, r1
 8003cf2:	3284      	adds	r2, #132	; 0x84
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6013      	str	r3, [r2, #0]
}
 8003cfa:	bf00      	nop
 8003cfc:	3724      	adds	r7, #36	; 0x24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	fffff8f8 	.word	0xfffff8f8
 8003d0c:	fffff800 	.word	0xfffff800

08003d10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003d18:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d00a      	beq.n	8003d3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d24:	4b26      	ldr	r3, [pc, #152]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e040      	b.n	8003db8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e03e      	b.n	8003db8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d3a:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d42:	491f      	ldr	r1, [pc, #124]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d4a:	f7fd fddf 	bl	800190c <HAL_GetTick>
 8003d4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d50:	e009      	b.n	8003d66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d52:	f7fd fddb 	bl	800190c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d60:	d901      	bls.n	8003d66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e028      	b.n	8003db8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d72:	d1ee      	bne.n	8003d52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b1e      	cmp	r3, #30
 8003d78:	d008      	beq.n	8003d8c <HAL_PWREx_ConfigSupply+0x7c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b2e      	cmp	r3, #46	; 0x2e
 8003d7e:	d005      	beq.n	8003d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b1d      	cmp	r3, #29
 8003d84:	d002      	beq.n	8003d8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b2d      	cmp	r3, #45	; 0x2d
 8003d8a:	d114      	bne.n	8003db6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d8c:	f7fd fdbe 	bl	800190c <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d92:	e009      	b.n	8003da8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d94:	f7fd fdba 	bl	800190c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003da2:	d901      	bls.n	8003da8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003da8:	4b05      	ldr	r3, [pc, #20]	; (8003dc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db4:	d1ee      	bne.n	8003d94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	58024800 	.word	0x58024800

08003dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08c      	sub	sp, #48	; 0x30
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e3f4      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80b3 	beq.w	8003f4a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de4:	4b95      	ldr	r3, [pc, #596]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dee:	4b93      	ldr	r3, [pc, #588]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	2b10      	cmp	r3, #16
 8003df8:	d007      	beq.n	8003e0a <HAL_RCC_OscConfig+0x46>
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	2b18      	cmp	r3, #24
 8003dfe:	d112      	bne.n	8003e26 <HAL_RCC_OscConfig+0x62>
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d10d      	bne.n	8003e26 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0a:	4b8c      	ldr	r3, [pc, #560]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 8098 	beq.w	8003f48 <HAL_RCC_OscConfig+0x184>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8093 	bne.w	8003f48 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e3cc      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2e:	d106      	bne.n	8003e3e <HAL_RCC_OscConfig+0x7a>
 8003e30:	4b82      	ldr	r3, [pc, #520]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a81      	ldr	r2, [pc, #516]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_OscConfig+0x12c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d112      	bne.n	8003e6c <HAL_RCC_OscConfig+0xa8>
 8003e46:	4b7d      	ldr	r3, [pc, #500]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a7c      	ldr	r2, [pc, #496]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b7a      	ldr	r3, [pc, #488]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a79      	ldr	r2, [pc, #484]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	4b77      	ldr	r3, [pc, #476]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a76      	ldr	r2, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e041      	b.n	8003ef0 <HAL_RCC_OscConfig+0x12c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e74:	d112      	bne.n	8003e9c <HAL_RCC_OscConfig+0xd8>
 8003e76:	4b71      	ldr	r3, [pc, #452]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a70      	ldr	r2, [pc, #448]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b6e      	ldr	r3, [pc, #440]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6d      	ldr	r2, [pc, #436]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b6b      	ldr	r3, [pc, #428]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a6a      	ldr	r2, [pc, #424]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e029      	b.n	8003ef0 <HAL_RCC_OscConfig+0x12c>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003ea4:	d112      	bne.n	8003ecc <HAL_RCC_OscConfig+0x108>
 8003ea6:	4b65      	ldr	r3, [pc, #404]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a64      	ldr	r2, [pc, #400]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b62      	ldr	r3, [pc, #392]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a61      	ldr	r2, [pc, #388]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	4b5f      	ldr	r3, [pc, #380]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5e      	ldr	r2, [pc, #376]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e011      	b.n	8003ef0 <HAL_RCC_OscConfig+0x12c>
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5a      	ldr	r2, [pc, #360]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b58      	ldr	r3, [pc, #352]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a57      	ldr	r2, [pc, #348]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b55      	ldr	r3, [pc, #340]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003eea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd fd08 	bl	800190c <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd fd04 	bl	800190c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e356      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f12:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0x13c>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd fcf4 	bl	800190c <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd fcf0 	bl	800190c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e342      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x164>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 808d 	beq.w	8004072 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f58:	4b38      	ldr	r3, [pc, #224]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1ba>
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	2b18      	cmp	r3, #24
 8003f72:	d137      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x220>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d132      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7e:	4b2f      	ldr	r3, [pc, #188]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e314      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f96:	4b29      	ldr	r3, [pc, #164]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 0219 	bic.w	r2, r3, #25
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4926      	ldr	r1, [pc, #152]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fa8:	f7fd fcb0 	bl	800190c <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb0:	f7fd fcac 	bl	800190c <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e2fe      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fce:	4b1b      	ldr	r3, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	4917      	ldr	r1, [pc, #92]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fe2:	e046      	b.n	8004072 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d029      	beq.n	8004040 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 0219 	bic.w	r2, r3, #25
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4910      	ldr	r1, [pc, #64]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fc85 	bl	800190c <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004006:	f7fd fc81 	bl	800190c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e2d3      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_RCC_OscConfig+0x278>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	4902      	ldr	r1, [pc, #8]	; (800403c <HAL_RCC_OscConfig+0x278>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
 8004038:	e01b      	b.n	8004072 <HAL_RCC_OscConfig+0x2ae>
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004040:	4b97      	ldr	r3, [pc, #604]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a96      	ldr	r2, [pc, #600]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fc5e 	bl	800190c <HAL_GetTick>
 8004050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004054:	f7fd fc5a 	bl	800190c <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e2ac      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004066:	4b8e      	ldr	r3, [pc, #568]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d06a      	beq.n	8004154 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004086:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004088:	4b85      	ldr	r3, [pc, #532]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d007      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2e0>
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b18      	cmp	r3, #24
 8004098:	d11b      	bne.n	80040d2 <HAL_RCC_OscConfig+0x30e>
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d116      	bne.n	80040d2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040a4:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x2f8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e281      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040bc:	4b78      	ldr	r3, [pc, #480]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4975      	ldr	r1, [pc, #468]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040d0:	e040      	b.n	8004154 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d023      	beq.n	8004122 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040da:	4b71      	ldr	r3, [pc, #452]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a70      	ldr	r2, [pc, #448]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fd fc11 	bl	800190c <HAL_GetTick>
 80040ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040ee:	f7fd fc0d 	bl	800190c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e25f      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004100:	4b67      	ldr	r3, [pc, #412]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800410c:	4b64      	ldr	r3, [pc, #400]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	061b      	lsls	r3, r3, #24
 800411a:	4961      	ldr	r1, [pc, #388]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800411c:	4313      	orrs	r3, r2
 800411e:	60cb      	str	r3, [r1, #12]
 8004120:	e018      	b.n	8004154 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004122:	4b5f      	ldr	r3, [pc, #380]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800412c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd fbed 	bl	800190c <HAL_GetTick>
 8004132:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004136:	f7fd fbe9 	bl	800190c <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e23b      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004148:	4b55      	ldr	r3, [pc, #340]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d036      	beq.n	80041ce <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d019      	beq.n	800419c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004168:	4b4d      	ldr	r3, [pc, #308]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800416a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416c:	4a4c      	ldr	r2, [pc, #304]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd fbca 	bl	800190c <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417c:	f7fd fbc6 	bl	800190c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e218      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800418e:	4b44      	ldr	r3, [pc, #272]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x3b8>
 800419a:	e018      	b.n	80041ce <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419c:	4b40      	ldr	r3, [pc, #256]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	4a3f      	ldr	r2, [pc, #252]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a8:	f7fd fbb0 	bl	800190c <HAL_GetTick>
 80041ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b0:	f7fd fbac 	bl	800190c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1fe      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80041c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d036      	beq.n	8004248 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d019      	beq.n	8004216 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2e      	ldr	r2, [pc, #184]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 80041e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ee:	f7fd fb8d 	bl	800190c <HAL_GetTick>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041f4:	e008      	b.n	8004208 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041f6:	f7fd fb89 	bl	800190c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e1db      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0f0      	beq.n	80041f6 <HAL_RCC_OscConfig+0x432>
 8004214:	e018      	b.n	8004248 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800421c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004220:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004222:	f7fd fb73 	bl	800190c <HAL_GetTick>
 8004226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800422a:	f7fd fb6f 	bl	800190c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1c1      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800423c:	4b18      	ldr	r3, [pc, #96]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f0      	bne.n	800422a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0304 	and.w	r3, r3, #4
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80af 	beq.w	80043b4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_RCC_OscConfig+0x4e0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <HAL_RCC_OscConfig+0x4e0>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004262:	f7fd fb53 	bl	800190c <HAL_GetTick>
 8004266:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fd fb4f 	bl	800190c <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e1a1      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x4e0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10b      	bne.n	80042a8 <HAL_RCC_OscConfig+0x4e4>
 8004290:	4b03      	ldr	r3, [pc, #12]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a02      	ldr	r2, [pc, #8]	; (80042a0 <HAL_RCC_OscConfig+0x4dc>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
 800429c:	e05b      	b.n	8004356 <HAL_RCC_OscConfig+0x592>
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
 80042a4:	58024800 	.word	0x58024800
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d112      	bne.n	80042d6 <HAL_RCC_OscConfig+0x512>
 80042b0:	4b9d      	ldr	r3, [pc, #628]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b4:	4a9c      	ldr	r2, [pc, #624]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6713      	str	r3, [r2, #112]	; 0x70
 80042bc:	4b9a      	ldr	r3, [pc, #616]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	4a99      	ldr	r2, [pc, #612]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c6:	6713      	str	r3, [r2, #112]	; 0x70
 80042c8:	4b97      	ldr	r3, [pc, #604]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a96      	ldr	r2, [pc, #600]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042ce:	f023 0304 	bic.w	r3, r3, #4
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	e03f      	b.n	8004356 <HAL_RCC_OscConfig+0x592>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x540>
 80042de:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a91      	ldr	r2, [pc, #580]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
 80042ea:	4b8f      	ldr	r3, [pc, #572]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a8e      	ldr	r2, [pc, #568]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a8b      	ldr	r2, [pc, #556]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	e028      	b.n	8004356 <HAL_RCC_OscConfig+0x592>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b85      	cmp	r3, #133	; 0x85
 800430a:	d112      	bne.n	8004332 <HAL_RCC_OscConfig+0x56e>
 800430c:	4b86      	ldr	r3, [pc, #536]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4a85      	ldr	r2, [pc, #532]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004312:	f043 0304 	orr.w	r3, r3, #4
 8004316:	6713      	str	r3, [r2, #112]	; 0x70
 8004318:	4b83      	ldr	r3, [pc, #524]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a82      	ldr	r2, [pc, #520]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a7f      	ldr	r2, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e011      	b.n	8004356 <HAL_RCC_OscConfig+0x592>
 8004332:	4b7d      	ldr	r3, [pc, #500]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a7c      	ldr	r2, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	4b7a      	ldr	r3, [pc, #488]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a79      	ldr	r2, [pc, #484]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	4b77      	ldr	r3, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	4a76      	ldr	r2, [pc, #472]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004354:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d015      	beq.n	800438a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fad5 	bl	800190c <HAL_GetTick>
 8004362:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fad1 	bl	800190c <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e121      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800437c:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ee      	beq.n	8004366 <HAL_RCC_OscConfig+0x5a2>
 8004388:	e014      	b.n	80043b4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438a:	f7fd fabf 	bl	800190c <HAL_GetTick>
 800438e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004390:	e00a      	b.n	80043a8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004392:	f7fd fabb 	bl	800190c <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e10b      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a8:	4b5f      	ldr	r3, [pc, #380]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80043aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ee      	bne.n	8004392 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 8100 	beq.w	80045be <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80043be:	4b5a      	ldr	r3, [pc, #360]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c6:	2b18      	cmp	r3, #24
 80043c8:	f000 80bb 	beq.w	8004542 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f040 8095 	bne.w	8004500 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b54      	ldr	r3, [pc, #336]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a53      	ldr	r2, [pc, #332]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80043dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e2:	f7fd fa93 	bl	800190c <HAL_GetTick>
 80043e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fa8f 	bl	800190c <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e0e1      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043fc:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f0      	bne.n	80043ea <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004408:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800440a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800440c:	4b47      	ldr	r3, [pc, #284]	; (800452c <HAL_RCC_OscConfig+0x768>)
 800440e:	4013      	ands	r3, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004418:	0112      	lsls	r2, r2, #4
 800441a:	430a      	orrs	r2, r1
 800441c:	4942      	ldr	r1, [pc, #264]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800441e:	4313      	orrs	r3, r2
 8004420:	628b      	str	r3, [r1, #40]	; 0x28
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	3b01      	subs	r3, #1
 8004428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004430:	3b01      	subs	r3, #1
 8004432:	025b      	lsls	r3, r3, #9
 8004434:	b29b      	uxth	r3, r3
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	3b01      	subs	r3, #1
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	3b01      	subs	r3, #1
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004452:	4935      	ldr	r1, [pc, #212]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004454:	4313      	orrs	r3, r2
 8004456:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004458:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	4a32      	ldr	r2, [pc, #200]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_RCC_OscConfig+0x76c>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004470:	00d2      	lsls	r2, r2, #3
 8004472:	492d      	ldr	r1, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004474:	4313      	orrs	r3, r2
 8004476:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004478:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f023 020c 	bic.w	r2, r3, #12
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	4928      	ldr	r1, [pc, #160]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004486:	4313      	orrs	r3, r2
 8004488:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800448a:	4b27      	ldr	r3, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f023 0202 	bic.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	4924      	ldr	r1, [pc, #144]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004498:	4313      	orrs	r3, r2
 800449a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	4a21      	ldr	r2, [pc, #132]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a8:	4b1f      	ldr	r3, [pc, #124]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fa18 	bl	800190c <HAL_GetTick>
 80044dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd fa14 	bl	800190c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e066      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x71c>
 80044fe:	e05e      	b.n	80045be <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a08      	ldr	r2, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x764>)
 8004506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450c:	f7fd f9fe 	bl	800190c <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004512:	e00f      	b.n	8004534 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004514:	f7fd f9fa 	bl	800190c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d908      	bls.n	8004534 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e04c      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400
 800452c:	fffffc0c 	.word	0xfffffc0c
 8004530:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_OscConfig+0x804>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e9      	bne.n	8004514 <HAL_RCC_OscConfig+0x750>
 8004540:	e03d      	b.n	80045be <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004542:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <HAL_RCC_OscConfig+0x804>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <HAL_RCC_OscConfig+0x804>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	2b01      	cmp	r3, #1
 8004554:	d031      	beq.n	80045ba <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d12a      	bne.n	80045ba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d122      	bne.n	80045ba <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d11a      	bne.n	80045ba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	0a5b      	lsrs	r3, r3, #9
 8004588:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004590:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d111      	bne.n	80045ba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d108      	bne.n	80045ba <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	0e1b      	lsrs	r3, r3, #24
 80045ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3730      	adds	r7, #48	; 0x30
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	58024400 	.word	0x58024400

080045cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e19c      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b8a      	ldr	r3, [pc, #552]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b87      	ldr	r3, [pc, #540]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 020f 	bic.w	r2, r3, #15
 80045f6:	4985      	ldr	r1, [pc, #532]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b83      	ldr	r3, [pc, #524]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e184      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	4b7b      	ldr	r3, [pc, #492]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004628:	429a      	cmp	r2, r3
 800462a:	d908      	bls.n	800463e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800462c:	4b78      	ldr	r3, [pc, #480]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	4975      	ldr	r1, [pc, #468]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800463a:	4313      	orrs	r3, r2
 800463c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	4b70      	ldr	r3, [pc, #448]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004650:	69db      	ldr	r3, [r3, #28]
 8004652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004656:	429a      	cmp	r2, r3
 8004658:	d908      	bls.n	800466c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800465a:	4b6d      	ldr	r3, [pc, #436]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	496a      	ldr	r1, [pc, #424]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004668:	4313      	orrs	r3, r2
 800466a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	4b64      	ldr	r3, [pc, #400]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004684:	429a      	cmp	r2, r3
 8004686:	d908      	bls.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004688:	4b61      	ldr	r3, [pc, #388]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	495e      	ldr	r1, [pc, #376]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004696:	4313      	orrs	r3, r2
 8004698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d010      	beq.n	80046c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	4b59      	ldr	r3, [pc, #356]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d908      	bls.n	80046c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	4953      	ldr	r1, [pc, #332]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d010      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	4b4d      	ldr	r3, [pc, #308]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d908      	bls.n	80046f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e4:	4b4a      	ldr	r3, [pc, #296]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	f023 020f 	bic.w	r2, r3, #15
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4947      	ldr	r1, [pc, #284]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d055      	beq.n	80047ae <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004702:	4b43      	ldr	r3, [pc, #268]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	4940      	ldr	r1, [pc, #256]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004710:	4313      	orrs	r3, r2
 8004712:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800471c:	4b3c      	ldr	r3, [pc, #240]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d121      	bne.n	800476c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0f6      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b03      	cmp	r3, #3
 8004732:	d107      	bne.n	8004744 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d115      	bne.n	800476c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0ea      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800474c:	4b30      	ldr	r3, [pc, #192]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0de      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800475c:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0d6      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800476c:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f023 0207 	bic.w	r2, r3, #7
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4925      	ldr	r1, [pc, #148]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477e:	f7fd f8c5 	bl	800190c <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004784:	e00a      	b.n	800479c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004786:	f7fd f8c1 	bl	800190c <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0be      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479c:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d1eb      	bne.n	8004786 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d208      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ca:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f023 020f 	bic.w	r2, r3, #15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	490e      	ldr	r1, [pc, #56]	; (8004810 <HAL_RCC_ClockConfig+0x244>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d214      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f023 020f 	bic.w	r2, r3, #15
 80047f2:	4906      	ldr	r1, [pc, #24]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <HAL_RCC_ClockConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d005      	beq.n	8004814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e086      	b.n	800491a <HAL_RCC_ClockConfig+0x34e>
 800480c:	52002000 	.word	0x52002000
 8004810:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800482c:	429a      	cmp	r2, r3
 800482e:	d208      	bcs.n	8004842 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004830:	4b3c      	ldr	r3, [pc, #240]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	4939      	ldr	r1, [pc, #228]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 800483e:	4313      	orrs	r3, r2
 8004840:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d010      	beq.n	8004870 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	4b34      	ldr	r3, [pc, #208]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800485a:	429a      	cmp	r2, r3
 800485c:	d208      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	492e      	ldr	r1, [pc, #184]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 800486c:	4313      	orrs	r3, r2
 800486e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d010      	beq.n	800489e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	4b28      	ldr	r3, [pc, #160]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004888:	429a      	cmp	r2, r3
 800488a:	d208      	bcs.n	800489e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	4922      	ldr	r1, [pc, #136]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 800489a:	4313      	orrs	r3, r2
 800489c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d208      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4917      	ldr	r1, [pc, #92]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80048cc:	f000 f834 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 80048d0:	4602      	mov	r2, r0
 80048d2:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	4912      	ldr	r1, [pc, #72]	; (8004928 <HAL_RCC_ClockConfig+0x35c>)
 80048de:	5ccb      	ldrb	r3, [r1, r3]
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <HAL_RCC_ClockConfig+0x358>)
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <HAL_RCC_ClockConfig+0x35c>)
 80048f4:	5cd3      	ldrb	r3, [r2, r3]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <HAL_RCC_ClockConfig+0x360>)
 8004902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <HAL_RCC_ClockConfig+0x364>)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800490a:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x368>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc ffb2 	bl	8001878 <HAL_InitTick>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	58024400 	.word	0x58024400
 8004928:	08008198 	.word	0x08008198
 800492c:	24012008 	.word	0x24012008
 8004930:	24012004 	.word	0x24012004
 8004934:	2401200c 	.word	0x2401200c

08004938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493e:	4bb3      	ldr	r3, [pc, #716]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004946:	2b18      	cmp	r3, #24
 8004948:	f200 8155 	bhi.w	8004bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	080049b9 	.word	0x080049b9
 8004958:	08004bf7 	.word	0x08004bf7
 800495c:	08004bf7 	.word	0x08004bf7
 8004960:	08004bf7 	.word	0x08004bf7
 8004964:	08004bf7 	.word	0x08004bf7
 8004968:	08004bf7 	.word	0x08004bf7
 800496c:	08004bf7 	.word	0x08004bf7
 8004970:	08004bf7 	.word	0x08004bf7
 8004974:	080049df 	.word	0x080049df
 8004978:	08004bf7 	.word	0x08004bf7
 800497c:	08004bf7 	.word	0x08004bf7
 8004980:	08004bf7 	.word	0x08004bf7
 8004984:	08004bf7 	.word	0x08004bf7
 8004988:	08004bf7 	.word	0x08004bf7
 800498c:	08004bf7 	.word	0x08004bf7
 8004990:	08004bf7 	.word	0x08004bf7
 8004994:	080049e5 	.word	0x080049e5
 8004998:	08004bf7 	.word	0x08004bf7
 800499c:	08004bf7 	.word	0x08004bf7
 80049a0:	08004bf7 	.word	0x08004bf7
 80049a4:	08004bf7 	.word	0x08004bf7
 80049a8:	08004bf7 	.word	0x08004bf7
 80049ac:	08004bf7 	.word	0x08004bf7
 80049b0:	08004bf7 	.word	0x08004bf7
 80049b4:	080049eb 	.word	0x080049eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049b8:	4b94      	ldr	r3, [pc, #592]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049c4:	4b91      	ldr	r3, [pc, #580]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	08db      	lsrs	r3, r3, #3
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	4a90      	ldr	r2, [pc, #576]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049d0:	fa22 f303 	lsr.w	r3, r2, r3
 80049d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049d6:	e111      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049d8:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049da:	61bb      	str	r3, [r7, #24]
    break;
 80049dc:	e10e      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049de:	4b8d      	ldr	r3, [pc, #564]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049e0:	61bb      	str	r3, [r7, #24]
    break;
 80049e2:	e10b      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049e4:	4b8c      	ldr	r3, [pc, #560]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049e6:	61bb      	str	r3, [r7, #24]
    break;
 80049e8:	e108      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049ea:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049f4:	4b85      	ldr	r3, [pc, #532]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	091b      	lsrs	r3, r3, #4
 80049fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a00:	4b82      	ldr	r3, [pc, #520]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a0a:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80e1 	beq.w	8004bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	f000 8083 	beq.w	8004b3c <HAL_RCC_GetSysClockFreq+0x204>
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	f200 80a1 	bhi.w	8004b80 <HAL_RCC_GetSysClockFreq+0x248>
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCC_GetSysClockFreq+0x114>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d056      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a4a:	e099      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a4c:	4b6f      	ldr	r3, [pc, #444]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d02d      	beq.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a58:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	4a6b      	ldr	r2, [pc, #428]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
 8004a68:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	ee07 3a90 	vmov	s15, r3
 8004a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	ee07 3a90 	vmov	s15, r3
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b62      	ldr	r3, [pc, #392]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ab2:	e087      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac6:	4b51      	ldr	r3, [pc, #324]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ada:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af6:	e065      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b3a:	e043      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b2f      	ldr	r3, [pc, #188]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7e:	e021      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	0a5b      	lsrs	r3, r3, #9
 8004bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bce:	3301      	adds	r3, #1
 8004bd0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be8:	ee17 3a90 	vmov	r3, s15
 8004bec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bee:	e005      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61bb      	str	r3, [r7, #24]
    break;
 8004bf4:	e002      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bf8:	61bb      	str	r3, [r7, #24]
    break;
 8004bfa:	bf00      	nop
  }

  return sysclockfreq;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	03d09000 	.word	0x03d09000
 8004c14:	003d0900 	.word	0x003d0900
 8004c18:	007a1200 	.word	0x007a1200
 8004c1c:	46000000 	.word	0x46000000
 8004c20:	4c742400 	.word	0x4c742400
 8004c24:	4a742400 	.word	0x4a742400
 8004c28:	4af42400 	.word	0x4af42400

08004c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8004c32:	f7ff fe81 	bl	8004938 <HAL_RCC_GetSysClockFreq>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	0a1b      	lsrs	r3, r3, #8
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	490f      	ldr	r1, [pc, #60]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c44:	5ccb      	ldrb	r3, [r1, r3]
 8004c46:	f003 031f 	and.w	r3, r3, #31
 8004c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c4e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	4a09      	ldr	r2, [pc, #36]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	fa22 f303 	lsr.w	r3, r2, r3
 8004c66:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c6a:	4a07      	ldr	r2, [pc, #28]	; (8004c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c70:	4b04      	ldr	r3, [pc, #16]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	08008198 	.word	0x08008198
 8004c84:	24012008 	.word	0x24012008
 8004c88:	24012004 	.word	0x24012004

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8004c90:	f7ff ffcc 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	58024400 	.word	0x58024400
 8004cb4:	08008198 	.word	0x08008198

08004cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8004cbc:	f7ff ffb6 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4904      	ldr	r1, [pc, #16]	; (8004ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	08008198 	.word	0x08008198

08004ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cec:	2300      	movs	r3, #0
 8004cee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d03f      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d08:	d02a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d0e:	d824      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d14:	d018      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d1a:	d81e      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d24:	d007      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d26:	e018      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4b9f      	ldr	r3, [pc, #636]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a9e      	ldr	r2, [pc, #632]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d34:	e015      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 ff1b 	bl	8006b78 <RCCEx_PLL2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d46:	e00c      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3324      	adds	r3, #36	; 0x24
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 ffc4 	bl	8006cdc <RCCEx_PLL3_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d58:	e003      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d109      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d68:	4b8f      	ldr	r3, [pc, #572]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d74:	498c      	ldr	r1, [pc, #560]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	650b      	str	r3, [r1, #80]	; 0x50
 8004d7a:	e001      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d03d      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	d826      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004db1 	.word	0x08004db1
 8004da0:	08004dbf 	.word	0x08004dbf
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db0:	4b7d      	ldr	r3, [pc, #500]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4a7c      	ldr	r2, [pc, #496]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dbc:	e015      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f001 fed7 	bl	8006b78 <RCCEx_PLL2_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dce:	e00c      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3324      	adds	r3, #36	; 0x24
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 ff80 	bl	8006cdc <RCCEx_PLL3_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004de0:	e003      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
      break;
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004df0:	4b6d      	ldr	r3, [pc, #436]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	f023 0207 	bic.w	r2, r3, #7
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	496a      	ldr	r1, [pc, #424]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	650b      	str	r3, [r1, #80]	; 0x50
 8004e02:	e001      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d04a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e1c:	d031      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004e1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004e22:	d82b      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e28:	d02d      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2e:	d825      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e30:	2bc0      	cmp	r3, #192	; 0xc0
 8004e32:	d02a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004e34:	2bc0      	cmp	r3, #192	; 0xc0
 8004e36:	d821      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e38:	2b80      	cmp	r3, #128	; 0x80
 8004e3a:	d016      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d81d      	bhi.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d007      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8004e48:	e018      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e4a:	4b57      	ldr	r3, [pc, #348]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	4a56      	ldr	r2, [pc, #344]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e56:	e019      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 fe8a 	bl	8006b78 <RCCEx_PLL2_Config>
 8004e64:	4603      	mov	r3, r0
 8004e66:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e68:	e010      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3324      	adds	r3, #36	; 0x24
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 ff33 	bl	8006cdc <RCCEx_PLL3_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8004e7a:	e007      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e80:	e004      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8004e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8004e92:	4b45      	ldr	r3, [pc, #276]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	4942      	ldr	r1, [pc, #264]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	650b      	str	r3, [r1, #80]	; 0x50
 8004ea4:	e001      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	7dfb      	ldrb	r3, [r7, #23]
 8004ea8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d04f      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ebe:	d036      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004ec0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004ec4:	d830      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eca:	d032      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8004ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed0:	d82a      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ed2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ed6:	d02e      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8004ed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004edc:	d824      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee2:	d018      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee8:	d81e      	bhi.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004eee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef2:	d007      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004ef4:	e018      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef6:	4b2c      	ldr	r3, [pc, #176]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f02:	e019      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fe34 	bl	8006b78 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f14:	e010      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3324      	adds	r3, #36	; 0x24
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fedd 	bl	8006cdc <RCCEx_PLL3_Config>
 8004f22:	4603      	mov	r3, r0
 8004f24:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8004f26:	e007      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	e004      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8004f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8004f3e:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f42:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	4917      	ldr	r1, [pc, #92]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	650b      	str	r3, [r1, #80]	; 0x50
 8004f50:	e001      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d034      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f66:	2b30      	cmp	r3, #48	; 0x30
 8004f68:	d01c      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004f6a:	2b30      	cmp	r3, #48	; 0x30
 8004f6c:	d817      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d00c      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d813      	bhi.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d018      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004f7a:	2b10      	cmp	r3, #16
 8004f7c:	d10f      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f7e:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f8a:	e010      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	2102      	movs	r1, #2
 8004f92:	4618      	mov	r0, r3
 8004f94:	f001 fdf0 	bl	8006b78 <RCCEx_PLL2_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004f9c:	e007      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa2:	e004      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004fa4:	bf00      	nop
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004fa8:	58024400 	.word	0x58024400
      break;
 8004fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004fb4:	4b9b      	ldr	r3, [pc, #620]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc0:	4998      	ldr	r1, [pc, #608]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d047      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe0:	d030      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004fe2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe6:	d82a      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fec:	d02c      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8004fee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ff2:	d824      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff8:	d018      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d81e      	bhi.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d007      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800500a:	e018      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500c:	4b85      	ldr	r3, [pc, #532]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a84      	ldr	r2, [pc, #528]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005018:	e017      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f001 fda9 	bl	8006b78 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800502a:	e00e      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3324      	adds	r3, #36	; 0x24
 8005030:	2100      	movs	r1, #0
 8005032:	4618      	mov	r0, r3
 8005034:	f001 fe52 	bl	8006cdc <RCCEx_PLL3_Config>
 8005038:	4603      	mov	r3, r0
 800503a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800503c:	e005      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
      break;
 8005042:	e002      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005044:	bf00      	nop
 8005046:	e000      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d109      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005050:	4b74      	ldr	r3, [pc, #464]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005054:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	4971      	ldr	r1, [pc, #452]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800505e:	4313      	orrs	r3, r2
 8005060:	650b      	str	r3, [r1, #80]	; 0x50
 8005062:	e001      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	7dfb      	ldrb	r3, [r7, #23]
 8005066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d049      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800507c:	d02e      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800507e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005082:	d828      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005088:	d02a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800508a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800508e:	d822      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005094:	d026      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005096:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800509a:	d81c      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d010      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80050a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a6:	d816      	bhi.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01d      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d111      	bne.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3304      	adds	r3, #4
 80050b6:	2101      	movs	r1, #1
 80050b8:	4618      	mov	r0, r3
 80050ba:	f001 fd5d 	bl	8006b78 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050c2:	e012      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3324      	adds	r3, #36	; 0x24
 80050c8:	2101      	movs	r1, #1
 80050ca:	4618      	mov	r0, r3
 80050cc:	f001 fe06 	bl	8006cdc <RCCEx_PLL3_Config>
 80050d0:	4603      	mov	r3, r0
 80050d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050d4:	e009      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	75fb      	strb	r3, [r7, #23]
      break;
 80050da:	e006      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050dc:	bf00      	nop
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050e0:	bf00      	nop
 80050e2:	e002      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80050e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050f0:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050fc:	4949      	ldr	r1, [pc, #292]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	650b      	str	r3, [r1, #80]	; 0x50
 8005102:	e001      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d053      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800511a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800511e:	d034      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005120:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005124:	d82e      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512a:	d030      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800512c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005130:	d828      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005136:	d02c      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513c:	d822      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800513e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005142:	d028      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005144:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005148:	d81c      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800514a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514e:	d010      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005154:	d816      	bhi.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d01f      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800515a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800515e:	d111      	bne.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	2101      	movs	r1, #1
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fd06 	bl	8006b78 <RCCEx_PLL2_Config>
 800516c:	4603      	mov	r3, r0
 800516e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005170:	e014      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3324      	adds	r3, #36	; 0x24
 8005176:	2101      	movs	r1, #1
 8005178:	4618      	mov	r0, r3
 800517a:	f001 fdaf 	bl	8006cdc <RCCEx_PLL3_Config>
 800517e:	4603      	mov	r3, r0
 8005180:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005182:	e00b      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
      break;
 8005188:	e008      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800518a:	bf00      	nop
 800518c:	e006      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800518e:	bf00      	nop
 8005190:	e004      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005192:	bf00      	nop
 8005194:	e002      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005196:	bf00      	nop
 8005198:	e000      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800519a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051b0:	491c      	ldr	r1, [pc, #112]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	658b      	str	r3, [r1, #88]	; 0x58
 80051b6:	e001      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
 80051ba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d031      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d0:	d00e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80051d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d6:	d814      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d015      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80051dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e0:	d10f      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80051e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051ee:	e00c      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	2101      	movs	r1, #1
 80051f6:	4618      	mov	r0, r3
 80051f8:	f001 fcbe 	bl	8006b78 <RCCEx_PLL2_Config>
 80051fc:	4603      	mov	r3, r0
 80051fe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	75fb      	strb	r3, [r7, #23]
      break;
 8005206:	e000      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8005208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005214:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	4901      	ldr	r1, [pc, #4]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800521e:	4313      	orrs	r3, r2
 8005220:	650b      	str	r3, [r1, #80]	; 0x50
 8005222:	e003      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d032      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800523c:	2b03      	cmp	r3, #3
 800523e:	d81b      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800527f 	.word	0x0800527f
 800524c:	08005259 	.word	0x08005259
 8005250:	08005267 	.word	0x08005267
 8005254:	0800527f 	.word	0x0800527f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005258:	4bb2      	ldr	r3, [pc, #712]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4ab1      	ldr	r2, [pc, #708]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800525e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005264:	e00c      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fc83 	bl	8006b78 <RCCEx_PLL2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005276:	e003      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	e000      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800527e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005286:	4ba7      	ldr	r3, [pc, #668]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528a:	f023 0203 	bic.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	49a4      	ldr	r1, [pc, #656]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005294:	4313      	orrs	r3, r2
 8005296:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005298:	e001      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529a:	7dfb      	ldrb	r3, [r7, #23]
 800529c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8086 	beq.w	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ac:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a9d      	ldr	r2, [pc, #628]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052b8:	f7fc fb28 	bl	800190c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052be:	e009      	b.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c0:	f7fc fb24 	bl	800190c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d902      	bls.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	75fb      	strb	r3, [r7, #23]
        break;
 80052d2:	e005      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052d4:	4b94      	ldr	r3, [pc, #592]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ef      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80052e0:	7dfb      	ldrb	r3, [r7, #23]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d166      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052e6:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052f0:	4053      	eors	r3, r2
 80052f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d013      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052fa:	4b8a      	ldr	r3, [pc, #552]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005302:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b87      	ldr	r3, [pc, #540]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	4a86      	ldr	r2, [pc, #536]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800530a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005310:	4b84      	ldr	r3, [pc, #528]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	4a83      	ldr	r2, [pc, #524]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800531c:	4a81      	ldr	r2, [pc, #516]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532c:	d115      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532e:	f7fc faed 	bl	800190c <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005334:	e00b      	b.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005336:	f7fc fae9 	bl	800190c <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	; 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d902      	bls.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	75fb      	strb	r3, [r7, #23]
            break;
 800534c:	e005      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800534e:	4b75      	ldr	r3, [pc, #468]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005352:	f003 0302 	and.w	r3, r3, #2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0ed      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d126      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d10d      	bne.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005370:	4b6c      	ldr	r3, [pc, #432]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800537e:	0919      	lsrs	r1, r3, #4
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005382:	400b      	ands	r3, r1
 8005384:	4967      	ldr	r1, [pc, #412]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005386:	4313      	orrs	r3, r2
 8005388:	610b      	str	r3, [r1, #16]
 800538a:	e005      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800538c:	4b65      	ldr	r3, [pc, #404]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	4a64      	ldr	r2, [pc, #400]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005396:	6113      	str	r3, [r2, #16]
 8005398:	4b62      	ldr	r3, [pc, #392]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800539a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	495f      	ldr	r1, [pc, #380]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	670b      	str	r3, [r1, #112]	; 0x70
 80053ac:	e004      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ae:	7dfb      	ldrb	r3, [r7, #23]
 80053b0:	75bb      	strb	r3, [r7, #22]
 80053b2:	e001      	b.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
 80053b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d07f      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ca:	2b28      	cmp	r3, #40	; 0x28
 80053cc:	d866      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80053ce:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80053d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d4:	080054a3 	.word	0x080054a3
 80053d8:	0800549d 	.word	0x0800549d
 80053dc:	0800549d 	.word	0x0800549d
 80053e0:	0800549d 	.word	0x0800549d
 80053e4:	0800549d 	.word	0x0800549d
 80053e8:	0800549d 	.word	0x0800549d
 80053ec:	0800549d 	.word	0x0800549d
 80053f0:	0800549d 	.word	0x0800549d
 80053f4:	08005479 	.word	0x08005479
 80053f8:	0800549d 	.word	0x0800549d
 80053fc:	0800549d 	.word	0x0800549d
 8005400:	0800549d 	.word	0x0800549d
 8005404:	0800549d 	.word	0x0800549d
 8005408:	0800549d 	.word	0x0800549d
 800540c:	0800549d 	.word	0x0800549d
 8005410:	0800549d 	.word	0x0800549d
 8005414:	0800548b 	.word	0x0800548b
 8005418:	0800549d 	.word	0x0800549d
 800541c:	0800549d 	.word	0x0800549d
 8005420:	0800549d 	.word	0x0800549d
 8005424:	0800549d 	.word	0x0800549d
 8005428:	0800549d 	.word	0x0800549d
 800542c:	0800549d 	.word	0x0800549d
 8005430:	0800549d 	.word	0x0800549d
 8005434:	080054a3 	.word	0x080054a3
 8005438:	0800549d 	.word	0x0800549d
 800543c:	0800549d 	.word	0x0800549d
 8005440:	0800549d 	.word	0x0800549d
 8005444:	0800549d 	.word	0x0800549d
 8005448:	0800549d 	.word	0x0800549d
 800544c:	0800549d 	.word	0x0800549d
 8005450:	0800549d 	.word	0x0800549d
 8005454:	080054a3 	.word	0x080054a3
 8005458:	0800549d 	.word	0x0800549d
 800545c:	0800549d 	.word	0x0800549d
 8005460:	0800549d 	.word	0x0800549d
 8005464:	0800549d 	.word	0x0800549d
 8005468:	0800549d 	.word	0x0800549d
 800546c:	0800549d 	.word	0x0800549d
 8005470:	0800549d 	.word	0x0800549d
 8005474:	080054a3 	.word	0x080054a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fb7a 	bl	8006b78 <RCCEx_PLL2_Config>
 8005484:	4603      	mov	r3, r0
 8005486:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005488:	e00c      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3324      	adds	r3, #36	; 0x24
 800548e:	2101      	movs	r1, #1
 8005490:	4618      	mov	r0, r3
 8005492:	f001 fc23 	bl	8006cdc <RCCEx_PLL3_Config>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800549a:	e003      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
      break;
 80054a0:	e000      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 80054a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10a      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054aa:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054b8:	491a      	ldr	r1, [pc, #104]	; (8005524 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	654b      	str	r3, [r1, #84]	; 0x54
 80054be:	e001      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
 80054c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d03f      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d4:	2b05      	cmp	r3, #5
 80054d6:	d821      	bhi.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005531 	.word	0x08005531
 80054e4:	080054f9 	.word	0x080054f9
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	08005531 	.word	0x08005531
 80054f0:	08005531 	.word	0x08005531
 80054f4:	08005531 	.word	0x08005531
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 fb3a 	bl	8006b78 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005508:	e013      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f001 fbe3 	bl	8006cdc <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800551a:	e00a      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	e007      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005522:	bf00      	nop
 8005524:	58024400 	.word	0x58024400
 8005528:	58024800 	.word	0x58024800
 800552c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005530:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005538:	4b9f      	ldr	r3, [pc, #636]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f023 0207 	bic.w	r2, r3, #7
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005544:	499c      	ldr	r1, [pc, #624]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005546:	4313      	orrs	r3, r2
 8005548:	654b      	str	r3, [r1, #84]	; 0x54
 800554a:	e001      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d039      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005562:	2b05      	cmp	r3, #5
 8005564:	d820      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005566:	a201      	add	r2, pc, #4	; (adr r2, 800556c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	080055af 	.word	0x080055af
 8005570:	08005585 	.word	0x08005585
 8005574:	08005597 	.word	0x08005597
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	2101      	movs	r1, #1
 800558a:	4618      	mov	r0, r3
 800558c:	f001 faf4 	bl	8006b78 <RCCEx_PLL2_Config>
 8005590:	4603      	mov	r3, r0
 8005592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005594:	e00c      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3324      	adds	r3, #36	; 0x24
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f001 fb9d 	bl	8006cdc <RCCEx_PLL3_Config>
 80055a2:	4603      	mov	r3, r0
 80055a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055a6:	e003      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	75fb      	strb	r3, [r7, #23]
      break;
 80055ac:	e000      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80055ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055b6:	4b80      	ldr	r3, [pc, #512]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f023 0207 	bic.w	r2, r3, #7
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c4:	497c      	ldr	r1, [pc, #496]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	658b      	str	r3, [r1, #88]	; 0x58
 80055ca:	e001      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d04b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055e6:	d02e      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80055e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ec:	d828      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f2:	d02a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80055f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f8:	d822      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80055fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055fe:	d026      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005604:	d81c      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560a:	d010      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800560c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005610:	d816      	bhi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01d      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800561a:	d111      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f001 faa8 	bl	8006b78 <RCCEx_PLL2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800562c:	e012      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3324      	adds	r3, #36	; 0x24
 8005632:	2102      	movs	r1, #2
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fb51 	bl	8006cdc <RCCEx_PLL3_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800563e:	e009      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	75fb      	strb	r3, [r7, #23]
      break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005654:	7dfb      	ldrb	r3, [r7, #23]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10a      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800565a:	4b57      	ldr	r3, [pc, #348]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005668:	4953      	ldr	r1, [pc, #332]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800566a:	4313      	orrs	r3, r2
 800566c:	654b      	str	r3, [r1, #84]	; 0x54
 800566e:	e001      	b.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d04b      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800568a:	d02e      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800568c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005690:	d828      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005696:	d02a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569c:	d822      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d026      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80056a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a8:	d81c      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d010      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d816      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01d      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80056ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056be:	d111      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f001 fa56 	bl	8006b78 <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056d0:	e012      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3324      	adds	r3, #36	; 0x24
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 faff 	bl	8006cdc <RCCEx_PLL3_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80056e2:	e009      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
      break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056ea:	bf00      	nop
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80056f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800570c:	492a      	ldr	r1, [pc, #168]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800570e:	4313      	orrs	r3, r2
 8005710:	658b      	str	r3, [r1, #88]	; 0x58
 8005712:	e001      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b00      	cmp	r3, #0
 8005722:	d04d      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800572a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800572e:	d02e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005730:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005734:	d828      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	d02a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	d822      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005742:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005746:	d026      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005748:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800574c:	d81c      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800574e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005752:	d010      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005758:	d816      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01d      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800575e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005762:	d111      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	2100      	movs	r1, #0
 800576a:	4618      	mov	r0, r3
 800576c:	f001 fa04 	bl	8006b78 <RCCEx_PLL2_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005774:	e012      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	2102      	movs	r1, #2
 800577c:	4618      	mov	r0, r3
 800577e:	f001 faad 	bl	8006cdc <RCCEx_PLL3_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005786:	e009      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e006      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800578e:	bf00      	nop
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800579a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10c      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057a2:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057b0:	4901      	ldr	r1, [pc, #4]	; (80057b8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	658b      	str	r3, [r1, #88]	; 0x58
 80057b6:	e003      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80057b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	7dfb      	ldrb	r3, [r7, #23]
 80057be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d10a      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3324      	adds	r3, #36	; 0x24
 80057dc:	2102      	movs	r1, #2
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fa7c 	bl	8006cdc <RCCEx_PLL3_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80057ee:	4b8c      	ldr	r3, [pc, #560]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	4988      	ldr	r1, [pc, #544]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01a      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005818:	d10a      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3324      	adds	r3, #36	; 0x24
 800581e:	2102      	movs	r1, #2
 8005820:	4618      	mov	r0, r3
 8005822:	f001 fa5b 	bl	8006cdc <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005830:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583e:	4978      	ldr	r1, [pc, #480]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005840:	4313      	orrs	r3, r2
 8005842:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d034      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585a:	d01d      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800585c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005860:	d817      	bhi.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586a:	d009      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800586c:	e011      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f97f 	bl	8006b78 <RCCEx_PLL2_Config>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800587e:	e00c      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3324      	adds	r3, #36	; 0x24
 8005884:	2102      	movs	r1, #2
 8005886:	4618      	mov	r0, r3
 8005888:	f001 fa28 	bl	8006cdc <RCCEx_PLL3_Config>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	75fb      	strb	r3, [r7, #23]
      break;
 8005896:	e000      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800589a:	7dfb      	ldrb	r3, [r7, #23]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10a      	bne.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058a0:	4b5f      	ldr	r3, [pc, #380]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058ae:	495c      	ldr	r1, [pc, #368]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	658b      	str	r3, [r1, #88]	; 0x58
 80058b4:	e001      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d033      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058d0:	d01c      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80058d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058d6:	d816      	bhi.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80058d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058dc:	d003      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80058de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058e2:	d007      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80058e4:	e00f      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e6:	4b4e      	ldr	r3, [pc, #312]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	4a4d      	ldr	r2, [pc, #308]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80058ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80058f2:	e00c      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 f9ee 	bl	8006cdc <RCCEx_PLL3_Config>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
      break;
 800590a:	e000      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800590c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005914:	4b42      	ldr	r3, [pc, #264]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	493f      	ldr	r1, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	654b      	str	r3, [r1, #84]	; 0x54
 8005928:	e001      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d029      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005946:	d007      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005948:	e00f      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594a:	4b35      	ldr	r3, [pc, #212]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	4a34      	ldr	r2, [pc, #208]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005956:	e00b      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	2102      	movs	r1, #2
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f90a 	bl	8006b78 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005968:	e002      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	75fb      	strb	r3, [r7, #23]
      break;
 800596e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005970:	7dfb      	ldrb	r3, [r7, #23]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d109      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005976:	4b2a      	ldr	r3, [pc, #168]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005982:	4927      	ldr	r1, [pc, #156]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005984:	4313      	orrs	r3, r2
 8005986:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005988:	e001      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3324      	adds	r3, #36	; 0x24
 800599e:	2102      	movs	r1, #2
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f99b 	bl	8006cdc <RCCEx_PLL3_Config>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d035      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059c6:	d017      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80059c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059cc:	d811      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d2:	d013      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d80b      	bhi.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d010      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 80059de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e2:	d106      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80059ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80059f0:	e007      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	75fb      	strb	r3, [r7, #23]
      break;
 80059f6:	e004      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059f8:	bf00      	nop
 80059fa:	e002      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80059fc:	bf00      	nop
 80059fe:	e000      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a08:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a16:	4902      	ldr	r1, [pc, #8]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8005a1c:	e004      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a34:	4b30      	ldr	r3, [pc, #192]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a40:	492d      	ldr	r1, [pc, #180]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d008      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a56:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a5e:	4926      	ldr	r1, [pc, #152]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005a70:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a74:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	491e      	ldr	r1, [pc, #120]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a98:	6113      	str	r3, [r2, #16]
 8005a9a:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005aa4:	4914      	ldr	r1, [pc, #80]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	da08      	bge.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ab2:	4b11      	ldr	r3, [pc, #68]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abe:	490e      	ldr	r1, [pc, #56]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ad0:	4b09      	ldr	r3, [pc, #36]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	4906      	ldr	r1, [pc, #24]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005ae4:	7dbb      	ldrb	r3, [r7, #22]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	e000      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	58024400 	.word	0x58024400

08005afc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b090      	sub	sp, #64	; 0x40
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0a:	f040 8089 	bne.w	8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005b0e:	4b91      	ldr	r3, [pc, #580]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d87d      	bhi.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005b1e:	a201      	add	r2, pc, #4	; (adr r2, 8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005b39 	.word	0x08005b39
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005c15 	.word	0x08005c15
 8005b34:	08005ba5 	.word	0x08005ba5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b38:	4b86      	ldr	r3, [pc, #536]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b44:	d107      	bne.n	8005b56 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fec2 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b54:	e3f4      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b5a:	e3f1      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b5c:	4b7d      	ldr	r3, [pc, #500]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b68:	d107      	bne.n	8005b7a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b6a:	f107 0318 	add.w	r3, r7, #24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fc08 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b78:	e3e2      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7e:	e3df      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b80:	4b74      	ldr	r3, [pc, #464]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8c:	d107      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fd4a 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b9c:	e3d0      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba2:	e3cd      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ba4:	4b6b      	ldr	r3, [pc, #428]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bae:	4b69      	ldr	r3, [pc, #420]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bc0:	4b64      	ldr	r3, [pc, #400]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	08db      	lsrs	r3, r3, #3
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	4a63      	ldr	r2, [pc, #396]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd2:	e01e      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bd4:	4b5f      	ldr	r3, [pc, #380]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d106      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be8:	d102      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005bea:	4b5c      	ldr	r3, [pc, #368]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bee:	e010      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bf0:	4b58      	ldr	r3, [pc, #352]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bfc:	d106      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c04:	d102      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c06:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0a:	e002      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c10:	e396      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005c12:	e395      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c18:	e392      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c1e:	e38f      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c26:	f040 809f 	bne.w	8005d68 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 8005c2a:	4b4a      	ldr	r3, [pc, #296]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005c32:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3a:	d04d      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c42:	f200 8084 	bhi.w	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	2bc0      	cmp	r3, #192	; 0xc0
 8005c4a:	d07d      	beq.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c50:	d87d      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d02d      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d877      	bhi.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d012      	beq.n	8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005c6a:	e070      	b.n	8005d4e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c6c:	4b39      	ldr	r3, [pc, #228]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c78:	d107      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fe28 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c88:	e35a      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c8e:	e357      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c90:	4b30      	ldr	r3, [pc, #192]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c9c:	d107      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9e:	f107 0318 	add.w	r3, r7, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fb6e 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cac:	e348      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cb2:	e345      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005cb4:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc2:	f107 030c 	add.w	r3, r7, #12
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fcb0 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cd0:	e336      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cd6:	e333      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cd8:	4b1e      	ldr	r3, [pc, #120]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 8005cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d109      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cf4:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	08db      	lsrs	r3, r3, #3
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	4a16      	ldr	r2, [pc, #88]	; (8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d06:	e01e      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d08:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d14:	d106      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d1c:	d102      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d22:	e010      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d30:	d106      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d38:	d102      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3e:	e002      	b.n	8005d46 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d40:	2300      	movs	r3, #0
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d44:	e2fc      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d46:	e2fb      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d4c:	e2f8      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d52:	e2f5      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	003d0900 	.word	0x003d0900
 8005d60:	007a1200 	.word	0x007a1200
 8005d64:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6e:	f040 809c 	bne.w	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8005d72:	4b9d      	ldr	r3, [pc, #628]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d76:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d82:	d054      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d8a:	f200 808b 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d94:	f000 8083 	beq.w	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d9e:	f200 8081 	bhi.w	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da8:	d02f      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db0:	d878      	bhi.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbe:	d012      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005dc0:	e070      	b.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005dc2:	4b89      	ldr	r3, [pc, #548]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dce:	d107      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fd7d 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dde:	e2af      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005de0:	2300      	movs	r3, #0
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de4:	e2ac      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de6:	4b80      	ldr	r3, [pc, #512]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df2:	d107      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005df4:	f107 0318 	add.w	r3, r7, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fac3 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e02:	e29d      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e08:	e29a      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e0a:	4b77      	ldr	r3, [pc, #476]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e16:	d107      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fc05 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e26:	e28b      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e2c:	e288      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e2e:	4b6e      	ldr	r3, [pc, #440]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e38:	4b6b      	ldr	r3, [pc, #428]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d10c      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e4a:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	08db      	lsrs	r3, r3, #3
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	4a65      	ldr	r2, [pc, #404]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5c:	e01e      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e5e:	4b62      	ldr	r3, [pc, #392]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d106      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e72:	d102      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e74:	4b5e      	ldr	r3, [pc, #376]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e010      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e7a:	4b5b      	ldr	r3, [pc, #364]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e86:	d106      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e90:	4b58      	ldr	r3, [pc, #352]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8005e9a:	e251      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005e9c:	e250      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e9e:	4b56      	ldr	r3, [pc, #344]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea2:	e24d      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea8:	e24a      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb0:	f040 80a7 	bne.w	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005eb4:	4b4c      	ldr	r3, [pc, #304]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec4:	d055      	beq.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ecc:	f200 8096 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ed6:	f000 8084 	beq.w	8005fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 8005eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ee0:	f200 808c 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eea:	d030      	beq.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef2:	f200 8083 	bhi.w	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8005f04:	e07a      	b.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f06:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f12:	d107      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 fcdb 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f22:	e20d      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f24:	2300      	movs	r3, #0
 8005f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f28:	e20a      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f36:	d107      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f38:	f107 0318 	add.w	r3, r7, #24
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fa21 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f46:	e1fb      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4c:	e1f8      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 fb63 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f6a:	e1e9      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f70:	e1e6      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d10c      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8005f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa0:	e01e      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d106      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb6:	d102      	bne.n	8005fbe <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005fb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fbc:	e010      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fca:	d106      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fd2:	d102      	bne.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8005fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd8:	e002      	b.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005fde:	e1af      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005fe0:	e1ae      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8005fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fe6:	e1ab      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	03d09000 	.word	0x03d09000
 8005ff0:	003d0900 	.word	0x003d0900
 8005ff4:	007a1200 	.word	0x007a1200
 8005ff8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006000:	e19e      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006008:	d173      	bne.n	80060f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800600a:	4b9d      	ldr	r3, [pc, #628]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006012:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800601a:	d02f      	beq.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006022:	d863      	bhi.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d012      	beq.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006032:	e05b      	b.n	80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006034:	4b92      	ldr	r3, [pc, #584]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006040:	d107      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006042:	f107 0318 	add.w	r3, r7, #24
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f99c 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006050:	e176      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006056:	e173      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006058:	4b89      	ldr	r3, [pc, #548]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006064:	d107      	bne.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006066:	f107 030c 	add.w	r3, r7, #12
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fade 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006074:	e164      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607a:	e161      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800607c:	4b80      	ldr	r3, [pc, #512]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800607e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006084:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006086:	4b7e      	ldr	r3, [pc, #504]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b04      	cmp	r3, #4
 8006090:	d10c      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006098:	4b79      	ldr	r3, [pc, #484]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	08db      	lsrs	r3, r3, #3
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	4a78      	ldr	r2, [pc, #480]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060aa:	e01e      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060ac:	4b74      	ldr	r3, [pc, #464]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b8:	d106      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060c0:	d102      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80060c2:	4b71      	ldr	r3, [pc, #452]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c6:	e010      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060c8:	4b6d      	ldr	r3, [pc, #436]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060d4:	d106      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060dc:	d102      	bne.n	80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80060de:	4b6b      	ldr	r3, [pc, #428]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e2:	e002      	b.n	80060ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060e8:	e12a      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80060ea:	e129      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060f0:	e126      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f8:	d133      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80060fa:	4b61      	ldr	r3, [pc, #388]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d004      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006110:	d012      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006112:	e023      	b.n	800615c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006114:	4b5a      	ldr	r3, [pc, #360]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006120:	d107      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fbd4 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006130:	e106      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006132:	2300      	movs	r3, #0
 8006134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006136:	e103      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006138:	4b51      	ldr	r3, [pc, #324]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006140:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006144:	d107      	bne.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006146:	f107 0318 	add.w	r3, r7, #24
 800614a:	4618      	mov	r0, r3
 800614c:	f000 f91a 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006154:	e0f4      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006156:	2300      	movs	r3, #0
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800615a:	e0f1      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006160:	e0ee      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006168:	f040 809b 	bne.w	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800616c:	4b44      	ldr	r3, [pc, #272]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006174:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800617c:	f000 808b 	beq.w	8006296 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006186:	f200 8089 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006190:	d06c      	beq.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006198:	f200 8080 	bhi.w	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d056      	beq.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d877      	bhi.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80061ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061b2:	d03b      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80061ba:	d86f      	bhi.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c2:	d021      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ca:	d867      	bhi.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061d8:	d004      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80061da:	e05f      	b.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80061dc:	f000 f8bc 	bl	8006358 <HAL_RCCEx_GetD3PCLK1Freq>
 80061e0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80061e2:	e0ad      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061e4:	4b26      	ldr	r3, [pc, #152]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f0:	d107      	bne.n	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f8c4 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006200:	e09e      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006206:	e09b      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006208:	4b1d      	ldr	r3, [pc, #116]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006214:	d107      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006216:	f107 030c 	add.w	r3, r7, #12
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fa06 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006224:	e08c      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800622a:	e089      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800622c:	4b14      	ldr	r3, [pc, #80]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d109      	bne.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006238:	4b11      	ldr	r3, [pc, #68]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	08db      	lsrs	r3, r3, #3
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	4a10      	ldr	r2, [pc, #64]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006244:	fa22 f303 	lsr.w	r3, r2, r3
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800624a:	e079      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006250:	e076      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625e:	d102      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006262:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006264:	e06c      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800626a:	e069      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800626c:	4b04      	ldr	r3, [pc, #16]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800627a:	4b04      	ldr	r3, [pc, #16]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800627c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800627e:	e05f      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006280:	58024400 	.word	0x58024400
 8006284:	03d09000 	.word	0x03d09000
 8006288:	003d0900 	.word	0x003d0900
 800628c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006294:	e054      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006296:	4b2d      	ldr	r3, [pc, #180]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800629a:	e051      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062a0:	e04e      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a8:	d148      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80062aa:	4b29      	ldr	r3, [pc, #164]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80062ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062ba:	d02a      	beq.n	8006312 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c2:	d838      	bhi.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062d0:	d00d      	beq.n	80062ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80062d2:	e030      	b.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062e0:	d102      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80062e2:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80062e6:	e02b      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062ec:	e028      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062ee:	4b18      	ldr	r3, [pc, #96]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062fa:	d107      	bne.n	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006300:	4618      	mov	r0, r3
 8006302:	f000 fae7 	bl	80068d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800630a:	e019      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006310:	e016      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006312:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800631e:	d107      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006320:	f107 0318 	add.w	r3, r7, #24
 8006324:	4618      	mov	r0, r3
 8006326:	f000 f82d 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800632e:	e007      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006334:	e004      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800633a:	e001      	b.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006342:	4618      	mov	r0, r3
 8006344:	3740      	adds	r7, #64	; 0x40
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	00bb8000 	.word	0x00bb8000
 8006350:	58024400 	.word	0x58024400
 8006354:	007a1200 	.word	0x007a1200

08006358 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800635c:	f7fe fc66 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8006360:	4602      	mov	r2, r0
 8006362:	4b06      	ldr	r3, [pc, #24]	; (800637c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	4904      	ldr	r1, [pc, #16]	; (8006380 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800636e:	5ccb      	ldrb	r3, [r1, r3]
 8006370:	f003 031f 	and.w	r3, r3, #31
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006378:	4618      	mov	r0, r3
 800637a:	bd80      	pop	{r7, pc}
 800637c:	58024400 	.word	0x58024400
 8006380:	08008198 	.word	0x08008198

08006384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006384:	b480      	push	{r7}
 8006386:	b089      	sub	sp, #36	; 0x24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800638c:	4ba1      	ldr	r3, [pc, #644]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	f003 0303 	and.w	r3, r3, #3
 8006394:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006396:	4b9f      	ldr	r3, [pc, #636]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639a:	0b1b      	lsrs	r3, r3, #12
 800639c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80063a2:	4b9c      	ldr	r3, [pc, #624]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	091b      	lsrs	r3, r3, #4
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80063ae:	4b99      	ldr	r3, [pc, #612]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	08db      	lsrs	r3, r3, #3
 80063b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8111 	beq.w	80065f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	f000 8083 	beq.w	80064e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	f200 80a1 	bhi.w	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d056      	beq.n	800649c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80063ee:	e099      	b.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063f0:	4b88      	ldr	r3, [pc, #544]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d02d      	beq.n	8006458 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063fc:	4b85      	ldr	r3, [pc, #532]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	08db      	lsrs	r3, r3, #3
 8006402:	f003 0303 	and.w	r3, r3, #3
 8006406:	4a84      	ldr	r2, [pc, #528]	; (8006618 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
 800640c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006426:	4b7b      	ldr	r3, [pc, #492]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	ed97 6a03 	vldr	s12, [r7, #12]
 800643a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800661c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006456:	e087      	b.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006462:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006620 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646a:	4b6a      	ldr	r3, [pc, #424]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647a:	ed97 6a03 	vldr	s12, [r7, #12]
 800647e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800661c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800649a:	e065      	b.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80064aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ae:	4b59      	ldr	r3, [pc, #356]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064be:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800661c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80064c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064de:	e043      	b.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b48      	ldr	r3, [pc, #288]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a03 	vldr	s12, [r7, #12]
 8006506:	eddf 5a45 	vldr	s11, [pc, #276]	; 800661c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006522:	e021      	b.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a03 	vldr	s12, [r7, #12]
 800654a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800661c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006566:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006568:	4b2a      	ldr	r3, [pc, #168]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	0a5b      	lsrs	r3, r3, #9
 800656e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800657e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006582:	edd7 6a07 	vldr	s13, [r7, #28]
 8006586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800658e:	ee17 2a90 	vmov	r2, s15
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	0c1b      	lsrs	r3, r3, #16
 800659c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a0:	ee07 3a90 	vmov	s15, r3
 80065a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065bc:	ee17 2a90 	vmov	r2, s15
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80065c4:	4b13      	ldr	r3, [pc, #76]	; (8006614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	0e1b      	lsrs	r3, r3, #24
 80065ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065ce:	ee07 3a90 	vmov	s15, r3
 80065d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065de:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ea:	ee17 2a90 	vmov	r2, s15
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80065f2:	e008      	b.n	8006606 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
}
 8006606:	bf00      	nop
 8006608:	3724      	adds	r7, #36	; 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	58024400 	.word	0x58024400
 8006618:	03d09000 	.word	0x03d09000
 800661c:	46000000 	.word	0x46000000
 8006620:	4c742400 	.word	0x4c742400
 8006624:	4a742400 	.word	0x4a742400
 8006628:	4af42400 	.word	0x4af42400

0800662c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006634:	4ba1      	ldr	r3, [pc, #644]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800663e:	4b9f      	ldr	r3, [pc, #636]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006642:	0d1b      	lsrs	r3, r3, #20
 8006644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006648:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800664a:	4b9c      	ldr	r3, [pc, #624]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006656:	4b99      	ldr	r3, [pc, #612]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	08db      	lsrs	r3, r3, #3
 800665c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8111 	beq.w	800689c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b02      	cmp	r3, #2
 800667e:	f000 8083 	beq.w	8006788 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	2b02      	cmp	r3, #2
 8006686:	f200 80a1 	bhi.w	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d056      	beq.n	8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006696:	e099      	b.n	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006698:	4b88      	ldr	r3, [pc, #544]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d02d      	beq.n	8006700 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066a4:	4b85      	ldr	r3, [pc, #532]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	08db      	lsrs	r3, r3, #3
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	4a84      	ldr	r2, [pc, #528]	; (80068c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
 80066b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ce:	4b7b      	ldr	r3, [pc, #492]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066de:	ed97 6a03 	vldr	s12, [r7, #12]
 80066e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80066e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80066fe:	e087      	b.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80068c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800670e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006712:	4b6a      	ldr	r3, [pc, #424]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671a:	ee07 3a90 	vmov	s15, r3
 800671e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006722:	ed97 6a03 	vldr	s12, [r7, #12]
 8006726:	eddf 5a67 	vldr	s11, [pc, #412]	; 80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800672a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006742:	e065      	b.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006756:	4b59      	ldr	r3, [pc, #356]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006766:	ed97 6a03 	vldr	s12, [r7, #12]
 800676a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800676e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800677a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006786:	e043      	b.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b48      	ldr	r3, [pc, #288]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ca:	e021      	b.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80068cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067de:	4b37      	ldr	r3, [pc, #220]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80068c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800680e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006810:	4b2a      	ldr	r3, [pc, #168]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	0a5b      	lsrs	r3, r3, #9
 8006816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800682a:	edd7 6a07 	vldr	s13, [r7, #28]
 800682e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006836:	ee17 2a90 	vmov	r2, s15
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800683e:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006858:	edd7 6a07 	vldr	s13, [r7, #28]
 800685c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006864:	ee17 2a90 	vmov	r2, s15
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	0e1b      	lsrs	r3, r3, #24
 8006872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006886:	edd7 6a07 	vldr	s13, [r7, #28]
 800688a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800688e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006892:	ee17 2a90 	vmov	r2, s15
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800689a:	e008      	b.n	80068ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	609a      	str	r2, [r3, #8]
}
 80068ae:	bf00      	nop
 80068b0:	3724      	adds	r7, #36	; 0x24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	58024400 	.word	0x58024400
 80068c0:	03d09000 	.word	0x03d09000
 80068c4:	46000000 	.word	0x46000000
 80068c8:	4c742400 	.word	0x4c742400
 80068cc:	4a742400 	.word	0x4a742400
 80068d0:	4af42400 	.word	0x4af42400

080068d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068dc:	4ba0      	ldr	r3, [pc, #640]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	f003 0303 	and.w	r3, r3, #3
 80068e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80068e6:	4b9e      	ldr	r3, [pc, #632]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80068f2:	4b9b      	ldr	r3, [pc, #620]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068fc:	4b98      	ldr	r3, [pc, #608]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006900:	08db      	lsrs	r3, r3, #3
 8006902:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006914:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 8111 	beq.w	8006b42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b02      	cmp	r3, #2
 8006924:	f000 8083 	beq.w	8006a2e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b02      	cmp	r3, #2
 800692c:	f200 80a1 	bhi.w	8006a72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d056      	beq.n	80069ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800693c:	e099      	b.n	8006a72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800693e:	4b88      	ldr	r3, [pc, #544]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d02d      	beq.n	80069a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800694a:	4b85      	ldr	r3, [pc, #532]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	08db      	lsrs	r3, r3, #3
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	4a83      	ldr	r2, [pc, #524]	; (8006b64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006974:	4b7a      	ldr	r3, [pc, #488]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006984:	ed97 6a03 	vldr	s12, [r7, #12]
 8006988:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800698c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800699c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80069a4:	e087      	b.n	8006ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	ee07 3a90 	vmov	s15, r3
 80069ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80069b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b8:	4b69      	ldr	r3, [pc, #420]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80069cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80069d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069e8:	e065      	b.n	8006ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	ee07 3a90 	vmov	s15, r3
 80069f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006b70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80069f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fc:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a04:	ee07 3a90 	vmov	s15, r3
 8006a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a10:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a2c:	e043      	b.n	8006ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	ee07 3a90 	vmov	s15, r3
 8006a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a38:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006b74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a40:	4b47      	ldr	r3, [pc, #284]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	ee07 3a90 	vmov	s15, r3
 8006a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a50:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a54:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a70:	e021      	b.n	8006ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006b6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8c:	ee07 3a90 	vmov	s15, r3
 8006a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a98:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006b68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ab4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	0a5b      	lsrs	r3, r3, #9
 8006abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006acc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006adc:	ee17 2a90 	vmov	r2, s15
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006ae4:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006afa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b0a:	ee17 2a90 	vmov	r2, s15
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006b12:	4b13      	ldr	r3, [pc, #76]	; (8006b60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	0e1b      	lsrs	r3, r3, #24
 8006b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b1c:	ee07 3a90 	vmov	s15, r3
 8006b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b38:	ee17 2a90 	vmov	r2, s15
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006b40:	e008      	b.n	8006b54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3724      	adds	r7, #36	; 0x24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	58024400 	.word	0x58024400
 8006b64:	03d09000 	.word	0x03d09000
 8006b68:	46000000 	.word	0x46000000
 8006b6c:	4c742400 	.word	0x4c742400
 8006b70:	4a742400 	.word	0x4a742400
 8006b74:	4af42400 	.word	0x4af42400

08006b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b86:	4b53      	ldr	r3, [pc, #332]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d101      	bne.n	8006b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e099      	b.n	8006cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b96:	4b4f      	ldr	r3, [pc, #316]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4e      	ldr	r2, [pc, #312]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fa feb3 	bl	800190c <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ba8:	e008      	b.n	8006bbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006baa:	f7fa feaf 	bl	800190c <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e086      	b.n	8006cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bbc:	4b45      	ldr	r3, [pc, #276]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	031b      	lsls	r3, r3, #12
 8006bd6:	493f      	ldr	r1, [pc, #252]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	628b      	str	r3, [r1, #40]	; 0x28
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	025b      	lsls	r3, r3, #9
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	041b      	lsls	r3, r3, #16
 8006bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c0c:	4931      	ldr	r1, [pc, #196]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c12:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	492d      	ldr	r1, [pc, #180]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c24:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	f023 0220 	bic.w	r2, r3, #32
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	4928      	ldr	r1, [pc, #160]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c36:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c3c:	f023 0310 	bic.w	r3, r3, #16
 8006c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c42:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c46:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <RCCEx_PLL2_Config+0x160>)
 8006c48:	4013      	ands	r3, r2
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	69d2      	ldr	r2, [r2, #28]
 8006c4e:	00d2      	lsls	r2, r2, #3
 8006c50:	4920      	ldr	r1, [pc, #128]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006c56:	4b1f      	ldr	r3, [pc, #124]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c5c:	f043 0310 	orr.w	r3, r3, #16
 8006c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4a19      	ldr	r2, [pc, #100]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c74:	e00f      	b.n	8006c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d106      	bne.n	8006c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006c7c:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c88:	e005      	b.n	8006c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8e:	4a11      	ldr	r2, [pc, #68]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006c96:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a0e      	ldr	r2, [pc, #56]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca2:	f7fa fe33 	bl	800190c <HAL_GetTick>
 8006ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ca8:	e008      	b.n	8006cbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006caa:	f7fa fe2f 	bl	800190c <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e006      	b.n	8006cca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	58024400 	.word	0x58024400
 8006cd8:	ffff0007 	.word	0xffff0007

08006cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cea:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d101      	bne.n	8006cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e099      	b.n	8006e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cfa:	4b4f      	ldr	r3, [pc, #316]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a4e      	ldr	r2, [pc, #312]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d06:	f7fa fe01 	bl	800190c <HAL_GetTick>
 8006d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d0c:	e008      	b.n	8006d20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d0e:	f7fa fdfd 	bl	800190c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e086      	b.n	8006e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d20:	4b45      	ldr	r3, [pc, #276]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f0      	bne.n	8006d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d2c:	4b42      	ldr	r3, [pc, #264]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	051b      	lsls	r3, r3, #20
 8006d3a:	493f      	ldr	r1, [pc, #252]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	025b      	lsls	r3, r3, #9
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	061b      	lsls	r3, r3, #24
 8006d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d70:	4931      	ldr	r1, [pc, #196]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d76:	4b30      	ldr	r3, [pc, #192]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	492d      	ldr	r1, [pc, #180]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d88:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	4928      	ldr	r1, [pc, #160]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d9a:	4b27      	ldr	r3, [pc, #156]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	4a26      	ldr	r2, [pc, #152]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006da6:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <RCCEx_PLL3_Config+0x160>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	69d2      	ldr	r2, [r2, #28]
 8006db2:	00d2      	lsls	r2, r2, #3
 8006db4:	4920      	ldr	r1, [pc, #128]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006dba:	4b1f      	ldr	r3, [pc, #124]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbe:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d106      	bne.n	8006dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dd8:	e00f      	b.n	8006dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d106      	bne.n	8006dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006de0:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de4:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dec:	e005      	b.n	8006dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a0e      	ldr	r2, [pc, #56]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e06:	f7fa fd81 	bl	800190c <HAL_GetTick>
 8006e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e0c:	e008      	b.n	8006e20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e0e:	f7fa fd7d 	bl	800190c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e20:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0f0      	beq.n	8006e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	ffff0007 	.word	0xffff0007

08006e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e042      	b.n	8006ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7fa fb75 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2224      	movs	r2, #36	; 0x24
 8006e6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0201 	bic.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f82c 	bl	8006ee0 <UART_SetConfig>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e022      	b.n	8006ed8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fe8c 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 ff13 	bl	8007cfc <UART_CheckIdleState>
 8006ed6:	4603      	mov	r3, r0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee4:	b092      	sub	sp, #72	; 0x48
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4bbe      	ldr	r3, [pc, #760]	; (8007208 <UART_SetConfig+0x328>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4ab3      	ldr	r2, [pc, #716]	; (800720c <UART_SetConfig+0x32c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	6a1b      	ldr	r3, [r3, #32]
 8006f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	4baf      	ldr	r3, [pc, #700]	; (8007210 <UART_SetConfig+0x330>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	f023 010f 	bic.w	r1, r3, #15
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4aa6      	ldr	r2, [pc, #664]	; (8007214 <UART_SetConfig+0x334>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d177      	bne.n	8007070 <UART_SetConfig+0x190>
 8006f80:	4ba5      	ldr	r3, [pc, #660]	; (8007218 <UART_SetConfig+0x338>)
 8006f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f88:	2b28      	cmp	r3, #40	; 0x28
 8006f8a:	d86d      	bhi.n	8007068 <UART_SetConfig+0x188>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <UART_SetConfig+0xb4>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08007039 	.word	0x08007039
 8006f98:	08007069 	.word	0x08007069
 8006f9c:	08007069 	.word	0x08007069
 8006fa0:	08007069 	.word	0x08007069
 8006fa4:	08007069 	.word	0x08007069
 8006fa8:	08007069 	.word	0x08007069
 8006fac:	08007069 	.word	0x08007069
 8006fb0:	08007069 	.word	0x08007069
 8006fb4:	08007041 	.word	0x08007041
 8006fb8:	08007069 	.word	0x08007069
 8006fbc:	08007069 	.word	0x08007069
 8006fc0:	08007069 	.word	0x08007069
 8006fc4:	08007069 	.word	0x08007069
 8006fc8:	08007069 	.word	0x08007069
 8006fcc:	08007069 	.word	0x08007069
 8006fd0:	08007069 	.word	0x08007069
 8006fd4:	08007049 	.word	0x08007049
 8006fd8:	08007069 	.word	0x08007069
 8006fdc:	08007069 	.word	0x08007069
 8006fe0:	08007069 	.word	0x08007069
 8006fe4:	08007069 	.word	0x08007069
 8006fe8:	08007069 	.word	0x08007069
 8006fec:	08007069 	.word	0x08007069
 8006ff0:	08007069 	.word	0x08007069
 8006ff4:	08007051 	.word	0x08007051
 8006ff8:	08007069 	.word	0x08007069
 8006ffc:	08007069 	.word	0x08007069
 8007000:	08007069 	.word	0x08007069
 8007004:	08007069 	.word	0x08007069
 8007008:	08007069 	.word	0x08007069
 800700c:	08007069 	.word	0x08007069
 8007010:	08007069 	.word	0x08007069
 8007014:	08007059 	.word	0x08007059
 8007018:	08007069 	.word	0x08007069
 800701c:	08007069 	.word	0x08007069
 8007020:	08007069 	.word	0x08007069
 8007024:	08007069 	.word	0x08007069
 8007028:	08007069 	.word	0x08007069
 800702c:	08007069 	.word	0x08007069
 8007030:	08007069 	.word	0x08007069
 8007034:	08007061 	.word	0x08007061
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703e:	e326      	b.n	800768e <UART_SetConfig+0x7ae>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007046:	e322      	b.n	800768e <UART_SetConfig+0x7ae>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704e:	e31e      	b.n	800768e <UART_SetConfig+0x7ae>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007056:	e31a      	b.n	800768e <UART_SetConfig+0x7ae>
 8007058:	2320      	movs	r3, #32
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e316      	b.n	800768e <UART_SetConfig+0x7ae>
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e312      	b.n	800768e <UART_SetConfig+0x7ae>
 8007068:	2380      	movs	r3, #128	; 0x80
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e30e      	b.n	800768e <UART_SetConfig+0x7ae>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a69      	ldr	r2, [pc, #420]	; (800721c <UART_SetConfig+0x33c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d130      	bne.n	80070dc <UART_SetConfig+0x1fc>
 800707a:	4b67      	ldr	r3, [pc, #412]	; (8007218 <UART_SetConfig+0x338>)
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	2b05      	cmp	r3, #5
 8007084:	d826      	bhi.n	80070d4 <UART_SetConfig+0x1f4>
 8007086:	a201      	add	r2, pc, #4	; (adr r2, 800708c <UART_SetConfig+0x1ac>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	080070a5 	.word	0x080070a5
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070b5 	.word	0x080070b5
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070aa:	e2f0      	b.n	800768e <UART_SetConfig+0x7ae>
 80070ac:	2304      	movs	r3, #4
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b2:	e2ec      	b.n	800768e <UART_SetConfig+0x7ae>
 80070b4:	2308      	movs	r3, #8
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ba:	e2e8      	b.n	800768e <UART_SetConfig+0x7ae>
 80070bc:	2310      	movs	r3, #16
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c2:	e2e4      	b.n	800768e <UART_SetConfig+0x7ae>
 80070c4:	2320      	movs	r3, #32
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e2e0      	b.n	800768e <UART_SetConfig+0x7ae>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e2dc      	b.n	800768e <UART_SetConfig+0x7ae>
 80070d4:	2380      	movs	r3, #128	; 0x80
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070da:	e2d8      	b.n	800768e <UART_SetConfig+0x7ae>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a4f      	ldr	r2, [pc, #316]	; (8007220 <UART_SetConfig+0x340>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d130      	bne.n	8007148 <UART_SetConfig+0x268>
 80070e6:	4b4c      	ldr	r3, [pc, #304]	; (8007218 <UART_SetConfig+0x338>)
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b05      	cmp	r3, #5
 80070f0:	d826      	bhi.n	8007140 <UART_SetConfig+0x260>
 80070f2:	a201      	add	r2, pc, #4	; (adr r2, 80070f8 <UART_SetConfig+0x218>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007111 	.word	0x08007111
 80070fc:	08007119 	.word	0x08007119
 8007100:	08007121 	.word	0x08007121
 8007104:	08007129 	.word	0x08007129
 8007108:	08007131 	.word	0x08007131
 800710c:	08007139 	.word	0x08007139
 8007110:	2300      	movs	r3, #0
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e2ba      	b.n	800768e <UART_SetConfig+0x7ae>
 8007118:	2304      	movs	r3, #4
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e2b6      	b.n	800768e <UART_SetConfig+0x7ae>
 8007120:	2308      	movs	r3, #8
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e2b2      	b.n	800768e <UART_SetConfig+0x7ae>
 8007128:	2310      	movs	r3, #16
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e2ae      	b.n	800768e <UART_SetConfig+0x7ae>
 8007130:	2320      	movs	r3, #32
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e2aa      	b.n	800768e <UART_SetConfig+0x7ae>
 8007138:	2340      	movs	r3, #64	; 0x40
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713e:	e2a6      	b.n	800768e <UART_SetConfig+0x7ae>
 8007140:	2380      	movs	r3, #128	; 0x80
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007146:	e2a2      	b.n	800768e <UART_SetConfig+0x7ae>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a35      	ldr	r2, [pc, #212]	; (8007224 <UART_SetConfig+0x344>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d130      	bne.n	80071b4 <UART_SetConfig+0x2d4>
 8007152:	4b31      	ldr	r3, [pc, #196]	; (8007218 <UART_SetConfig+0x338>)
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b05      	cmp	r3, #5
 800715c:	d826      	bhi.n	80071ac <UART_SetConfig+0x2cc>
 800715e:	a201      	add	r2, pc, #4	; (adr r2, 8007164 <UART_SetConfig+0x284>)
 8007160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007164:	0800717d 	.word	0x0800717d
 8007168:	08007185 	.word	0x08007185
 800716c:	0800718d 	.word	0x0800718d
 8007170:	08007195 	.word	0x08007195
 8007174:	0800719d 	.word	0x0800719d
 8007178:	080071a5 	.word	0x080071a5
 800717c:	2300      	movs	r3, #0
 800717e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007182:	e284      	b.n	800768e <UART_SetConfig+0x7ae>
 8007184:	2304      	movs	r3, #4
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800718a:	e280      	b.n	800768e <UART_SetConfig+0x7ae>
 800718c:	2308      	movs	r3, #8
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007192:	e27c      	b.n	800768e <UART_SetConfig+0x7ae>
 8007194:	2310      	movs	r3, #16
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719a:	e278      	b.n	800768e <UART_SetConfig+0x7ae>
 800719c:	2320      	movs	r3, #32
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a2:	e274      	b.n	800768e <UART_SetConfig+0x7ae>
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071aa:	e270      	b.n	800768e <UART_SetConfig+0x7ae>
 80071ac:	2380      	movs	r3, #128	; 0x80
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b2:	e26c      	b.n	800768e <UART_SetConfig+0x7ae>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <UART_SetConfig+0x348>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d142      	bne.n	8007244 <UART_SetConfig+0x364>
 80071be:	4b16      	ldr	r3, [pc, #88]	; (8007218 <UART_SetConfig+0x338>)
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	2b05      	cmp	r3, #5
 80071c8:	d838      	bhi.n	800723c <UART_SetConfig+0x35c>
 80071ca:	a201      	add	r2, pc, #4	; (adr r2, 80071d0 <UART_SetConfig+0x2f0>)
 80071cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d0:	080071e9 	.word	0x080071e9
 80071d4:	080071f1 	.word	0x080071f1
 80071d8:	080071f9 	.word	0x080071f9
 80071dc:	08007201 	.word	0x08007201
 80071e0:	0800722d 	.word	0x0800722d
 80071e4:	08007235 	.word	0x08007235
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e24e      	b.n	800768e <UART_SetConfig+0x7ae>
 80071f0:	2304      	movs	r3, #4
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e24a      	b.n	800768e <UART_SetConfig+0x7ae>
 80071f8:	2308      	movs	r3, #8
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e246      	b.n	800768e <UART_SetConfig+0x7ae>
 8007200:	2310      	movs	r3, #16
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e242      	b.n	800768e <UART_SetConfig+0x7ae>
 8007208:	cfff69f3 	.word	0xcfff69f3
 800720c:	58000c00 	.word	0x58000c00
 8007210:	11fff4ff 	.word	0x11fff4ff
 8007214:	40011000 	.word	0x40011000
 8007218:	58024400 	.word	0x58024400
 800721c:	40004400 	.word	0x40004400
 8007220:	40004800 	.word	0x40004800
 8007224:	40004c00 	.word	0x40004c00
 8007228:	40005000 	.word	0x40005000
 800722c:	2320      	movs	r3, #32
 800722e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007232:	e22c      	b.n	800768e <UART_SetConfig+0x7ae>
 8007234:	2340      	movs	r3, #64	; 0x40
 8007236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723a:	e228      	b.n	800768e <UART_SetConfig+0x7ae>
 800723c:	2380      	movs	r3, #128	; 0x80
 800723e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007242:	e224      	b.n	800768e <UART_SetConfig+0x7ae>
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4ab1      	ldr	r2, [pc, #708]	; (8007510 <UART_SetConfig+0x630>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d176      	bne.n	800733c <UART_SetConfig+0x45c>
 800724e:	4bb1      	ldr	r3, [pc, #708]	; (8007514 <UART_SetConfig+0x634>)
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007256:	2b28      	cmp	r3, #40	; 0x28
 8007258:	d86c      	bhi.n	8007334 <UART_SetConfig+0x454>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <UART_SetConfig+0x380>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007305 	.word	0x08007305
 8007264:	08007335 	.word	0x08007335
 8007268:	08007335 	.word	0x08007335
 800726c:	08007335 	.word	0x08007335
 8007270:	08007335 	.word	0x08007335
 8007274:	08007335 	.word	0x08007335
 8007278:	08007335 	.word	0x08007335
 800727c:	08007335 	.word	0x08007335
 8007280:	0800730d 	.word	0x0800730d
 8007284:	08007335 	.word	0x08007335
 8007288:	08007335 	.word	0x08007335
 800728c:	08007335 	.word	0x08007335
 8007290:	08007335 	.word	0x08007335
 8007294:	08007335 	.word	0x08007335
 8007298:	08007335 	.word	0x08007335
 800729c:	08007335 	.word	0x08007335
 80072a0:	08007315 	.word	0x08007315
 80072a4:	08007335 	.word	0x08007335
 80072a8:	08007335 	.word	0x08007335
 80072ac:	08007335 	.word	0x08007335
 80072b0:	08007335 	.word	0x08007335
 80072b4:	08007335 	.word	0x08007335
 80072b8:	08007335 	.word	0x08007335
 80072bc:	08007335 	.word	0x08007335
 80072c0:	0800731d 	.word	0x0800731d
 80072c4:	08007335 	.word	0x08007335
 80072c8:	08007335 	.word	0x08007335
 80072cc:	08007335 	.word	0x08007335
 80072d0:	08007335 	.word	0x08007335
 80072d4:	08007335 	.word	0x08007335
 80072d8:	08007335 	.word	0x08007335
 80072dc:	08007335 	.word	0x08007335
 80072e0:	08007325 	.word	0x08007325
 80072e4:	08007335 	.word	0x08007335
 80072e8:	08007335 	.word	0x08007335
 80072ec:	08007335 	.word	0x08007335
 80072f0:	08007335 	.word	0x08007335
 80072f4:	08007335 	.word	0x08007335
 80072f8:	08007335 	.word	0x08007335
 80072fc:	08007335 	.word	0x08007335
 8007300:	0800732d 	.word	0x0800732d
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730a:	e1c0      	b.n	800768e <UART_SetConfig+0x7ae>
 800730c:	2304      	movs	r3, #4
 800730e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007312:	e1bc      	b.n	800768e <UART_SetConfig+0x7ae>
 8007314:	2308      	movs	r3, #8
 8007316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731a:	e1b8      	b.n	800768e <UART_SetConfig+0x7ae>
 800731c:	2310      	movs	r3, #16
 800731e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007322:	e1b4      	b.n	800768e <UART_SetConfig+0x7ae>
 8007324:	2320      	movs	r3, #32
 8007326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732a:	e1b0      	b.n	800768e <UART_SetConfig+0x7ae>
 800732c:	2340      	movs	r3, #64	; 0x40
 800732e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007332:	e1ac      	b.n	800768e <UART_SetConfig+0x7ae>
 8007334:	2380      	movs	r3, #128	; 0x80
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800733a:	e1a8      	b.n	800768e <UART_SetConfig+0x7ae>
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a75      	ldr	r2, [pc, #468]	; (8007518 <UART_SetConfig+0x638>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d130      	bne.n	80073a8 <UART_SetConfig+0x4c8>
 8007346:	4b73      	ldr	r3, [pc, #460]	; (8007514 <UART_SetConfig+0x634>)
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b05      	cmp	r3, #5
 8007350:	d826      	bhi.n	80073a0 <UART_SetConfig+0x4c0>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0x478>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007371 	.word	0x08007371
 800735c:	08007379 	.word	0x08007379
 8007360:	08007381 	.word	0x08007381
 8007364:	08007389 	.word	0x08007389
 8007368:	08007391 	.word	0x08007391
 800736c:	08007399 	.word	0x08007399
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007376:	e18a      	b.n	800768e <UART_SetConfig+0x7ae>
 8007378:	2304      	movs	r3, #4
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800737e:	e186      	b.n	800768e <UART_SetConfig+0x7ae>
 8007380:	2308      	movs	r3, #8
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007386:	e182      	b.n	800768e <UART_SetConfig+0x7ae>
 8007388:	2310      	movs	r3, #16
 800738a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800738e:	e17e      	b.n	800768e <UART_SetConfig+0x7ae>
 8007390:	2320      	movs	r3, #32
 8007392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007396:	e17a      	b.n	800768e <UART_SetConfig+0x7ae>
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800739e:	e176      	b.n	800768e <UART_SetConfig+0x7ae>
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073a6:	e172      	b.n	800768e <UART_SetConfig+0x7ae>
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a5b      	ldr	r2, [pc, #364]	; (800751c <UART_SetConfig+0x63c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d130      	bne.n	8007414 <UART_SetConfig+0x534>
 80073b2:	4b58      	ldr	r3, [pc, #352]	; (8007514 <UART_SetConfig+0x634>)
 80073b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b6:	f003 0307 	and.w	r3, r3, #7
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d826      	bhi.n	800740c <UART_SetConfig+0x52c>
 80073be:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0x4e4>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	080073dd 	.word	0x080073dd
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073ed 	.word	0x080073ed
 80073d0:	080073f5 	.word	0x080073f5
 80073d4:	080073fd 	.word	0x080073fd
 80073d8:	08007405 	.word	0x08007405
 80073dc:	2300      	movs	r3, #0
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e154      	b.n	800768e <UART_SetConfig+0x7ae>
 80073e4:	2304      	movs	r3, #4
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e150      	b.n	800768e <UART_SetConfig+0x7ae>
 80073ec:	2308      	movs	r3, #8
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e14c      	b.n	800768e <UART_SetConfig+0x7ae>
 80073f4:	2310      	movs	r3, #16
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e148      	b.n	800768e <UART_SetConfig+0x7ae>
 80073fc:	2320      	movs	r3, #32
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e144      	b.n	800768e <UART_SetConfig+0x7ae>
 8007404:	2340      	movs	r3, #64	; 0x40
 8007406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800740a:	e140      	b.n	800768e <UART_SetConfig+0x7ae>
 800740c:	2380      	movs	r3, #128	; 0x80
 800740e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007412:	e13c      	b.n	800768e <UART_SetConfig+0x7ae>
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a41      	ldr	r2, [pc, #260]	; (8007520 <UART_SetConfig+0x640>)
 800741a:	4293      	cmp	r3, r2
 800741c:	f040 8082 	bne.w	8007524 <UART_SetConfig+0x644>
 8007420:	4b3c      	ldr	r3, [pc, #240]	; (8007514 <UART_SetConfig+0x634>)
 8007422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007424:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007428:	2b28      	cmp	r3, #40	; 0x28
 800742a:	d86d      	bhi.n	8007508 <UART_SetConfig+0x628>
 800742c:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0x554>)
 800742e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007432:	bf00      	nop
 8007434:	080074d9 	.word	0x080074d9
 8007438:	08007509 	.word	0x08007509
 800743c:	08007509 	.word	0x08007509
 8007440:	08007509 	.word	0x08007509
 8007444:	08007509 	.word	0x08007509
 8007448:	08007509 	.word	0x08007509
 800744c:	08007509 	.word	0x08007509
 8007450:	08007509 	.word	0x08007509
 8007454:	080074e1 	.word	0x080074e1
 8007458:	08007509 	.word	0x08007509
 800745c:	08007509 	.word	0x08007509
 8007460:	08007509 	.word	0x08007509
 8007464:	08007509 	.word	0x08007509
 8007468:	08007509 	.word	0x08007509
 800746c:	08007509 	.word	0x08007509
 8007470:	08007509 	.word	0x08007509
 8007474:	080074e9 	.word	0x080074e9
 8007478:	08007509 	.word	0x08007509
 800747c:	08007509 	.word	0x08007509
 8007480:	08007509 	.word	0x08007509
 8007484:	08007509 	.word	0x08007509
 8007488:	08007509 	.word	0x08007509
 800748c:	08007509 	.word	0x08007509
 8007490:	08007509 	.word	0x08007509
 8007494:	080074f1 	.word	0x080074f1
 8007498:	08007509 	.word	0x08007509
 800749c:	08007509 	.word	0x08007509
 80074a0:	08007509 	.word	0x08007509
 80074a4:	08007509 	.word	0x08007509
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007509 	.word	0x08007509
 80074b0:	08007509 	.word	0x08007509
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	08007509 	.word	0x08007509
 80074bc:	08007509 	.word	0x08007509
 80074c0:	08007509 	.word	0x08007509
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007509 	.word	0x08007509
 80074cc:	08007509 	.word	0x08007509
 80074d0:	08007509 	.word	0x08007509
 80074d4:	08007501 	.word	0x08007501
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e0d6      	b.n	800768e <UART_SetConfig+0x7ae>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e0d2      	b.n	800768e <UART_SetConfig+0x7ae>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e0ce      	b.n	800768e <UART_SetConfig+0x7ae>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e0ca      	b.n	800768e <UART_SetConfig+0x7ae>
 80074f8:	2320      	movs	r3, #32
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e0c6      	b.n	800768e <UART_SetConfig+0x7ae>
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e0c2      	b.n	800768e <UART_SetConfig+0x7ae>
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e0be      	b.n	800768e <UART_SetConfig+0x7ae>
 8007510:	40011400 	.word	0x40011400
 8007514:	58024400 	.word	0x58024400
 8007518:	40007800 	.word	0x40007800
 800751c:	40007c00 	.word	0x40007c00
 8007520:	40011800 	.word	0x40011800
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4aad      	ldr	r2, [pc, #692]	; (80077e0 <UART_SetConfig+0x900>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d176      	bne.n	800761c <UART_SetConfig+0x73c>
 800752e:	4bad      	ldr	r3, [pc, #692]	; (80077e4 <UART_SetConfig+0x904>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007536:	2b28      	cmp	r3, #40	; 0x28
 8007538:	d86c      	bhi.n	8007614 <UART_SetConfig+0x734>
 800753a:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <UART_SetConfig+0x660>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	080075e5 	.word	0x080075e5
 8007544:	08007615 	.word	0x08007615
 8007548:	08007615 	.word	0x08007615
 800754c:	08007615 	.word	0x08007615
 8007550:	08007615 	.word	0x08007615
 8007554:	08007615 	.word	0x08007615
 8007558:	08007615 	.word	0x08007615
 800755c:	08007615 	.word	0x08007615
 8007560:	080075ed 	.word	0x080075ed
 8007564:	08007615 	.word	0x08007615
 8007568:	08007615 	.word	0x08007615
 800756c:	08007615 	.word	0x08007615
 8007570:	08007615 	.word	0x08007615
 8007574:	08007615 	.word	0x08007615
 8007578:	08007615 	.word	0x08007615
 800757c:	08007615 	.word	0x08007615
 8007580:	080075f5 	.word	0x080075f5
 8007584:	08007615 	.word	0x08007615
 8007588:	08007615 	.word	0x08007615
 800758c:	08007615 	.word	0x08007615
 8007590:	08007615 	.word	0x08007615
 8007594:	08007615 	.word	0x08007615
 8007598:	08007615 	.word	0x08007615
 800759c:	08007615 	.word	0x08007615
 80075a0:	080075fd 	.word	0x080075fd
 80075a4:	08007615 	.word	0x08007615
 80075a8:	08007615 	.word	0x08007615
 80075ac:	08007615 	.word	0x08007615
 80075b0:	08007615 	.word	0x08007615
 80075b4:	08007615 	.word	0x08007615
 80075b8:	08007615 	.word	0x08007615
 80075bc:	08007615 	.word	0x08007615
 80075c0:	08007605 	.word	0x08007605
 80075c4:	08007615 	.word	0x08007615
 80075c8:	08007615 	.word	0x08007615
 80075cc:	08007615 	.word	0x08007615
 80075d0:	08007615 	.word	0x08007615
 80075d4:	08007615 	.word	0x08007615
 80075d8:	08007615 	.word	0x08007615
 80075dc:	08007615 	.word	0x08007615
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ea:	e050      	b.n	800768e <UART_SetConfig+0x7ae>
 80075ec:	2304      	movs	r3, #4
 80075ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f2:	e04c      	b.n	800768e <UART_SetConfig+0x7ae>
 80075f4:	2308      	movs	r3, #8
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075fa:	e048      	b.n	800768e <UART_SetConfig+0x7ae>
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007602:	e044      	b.n	800768e <UART_SetConfig+0x7ae>
 8007604:	2320      	movs	r3, #32
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800760a:	e040      	b.n	800768e <UART_SetConfig+0x7ae>
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007612:	e03c      	b.n	800768e <UART_SetConfig+0x7ae>
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761a:	e038      	b.n	800768e <UART_SetConfig+0x7ae>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a71      	ldr	r2, [pc, #452]	; (80077e8 <UART_SetConfig+0x908>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d130      	bne.n	8007688 <UART_SetConfig+0x7a8>
 8007626:	4b6f      	ldr	r3, [pc, #444]	; (80077e4 <UART_SetConfig+0x904>)
 8007628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762a:	f003 0307 	and.w	r3, r3, #7
 800762e:	2b05      	cmp	r3, #5
 8007630:	d826      	bhi.n	8007680 <UART_SetConfig+0x7a0>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <UART_SetConfig+0x758>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	08007651 	.word	0x08007651
 800763c:	08007659 	.word	0x08007659
 8007640:	08007661 	.word	0x08007661
 8007644:	08007669 	.word	0x08007669
 8007648:	08007671 	.word	0x08007671
 800764c:	08007679 	.word	0x08007679
 8007650:	2302      	movs	r3, #2
 8007652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007656:	e01a      	b.n	800768e <UART_SetConfig+0x7ae>
 8007658:	2304      	movs	r3, #4
 800765a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800765e:	e016      	b.n	800768e <UART_SetConfig+0x7ae>
 8007660:	2308      	movs	r3, #8
 8007662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007666:	e012      	b.n	800768e <UART_SetConfig+0x7ae>
 8007668:	2310      	movs	r3, #16
 800766a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766e:	e00e      	b.n	800768e <UART_SetConfig+0x7ae>
 8007670:	2320      	movs	r3, #32
 8007672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007676:	e00a      	b.n	800768e <UART_SetConfig+0x7ae>
 8007678:	2340      	movs	r3, #64	; 0x40
 800767a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800767e:	e006      	b.n	800768e <UART_SetConfig+0x7ae>
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007686:	e002      	b.n	800768e <UART_SetConfig+0x7ae>
 8007688:	2380      	movs	r3, #128	; 0x80
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a55      	ldr	r2, [pc, #340]	; (80077e8 <UART_SetConfig+0x908>)
 8007694:	4293      	cmp	r3, r2
 8007696:	f040 80f8 	bne.w	800788a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800769a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800769e:	2b20      	cmp	r3, #32
 80076a0:	dc46      	bgt.n	8007730 <UART_SetConfig+0x850>
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	db75      	blt.n	8007792 <UART_SetConfig+0x8b2>
 80076a6:	3b02      	subs	r3, #2
 80076a8:	2b1e      	cmp	r3, #30
 80076aa:	d872      	bhi.n	8007792 <UART_SetConfig+0x8b2>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <UART_SetConfig+0x7d4>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	08007737 	.word	0x08007737
 80076b8:	08007793 	.word	0x08007793
 80076bc:	0800773f 	.word	0x0800773f
 80076c0:	08007793 	.word	0x08007793
 80076c4:	08007793 	.word	0x08007793
 80076c8:	08007793 	.word	0x08007793
 80076cc:	0800774f 	.word	0x0800774f
 80076d0:	08007793 	.word	0x08007793
 80076d4:	08007793 	.word	0x08007793
 80076d8:	08007793 	.word	0x08007793
 80076dc:	08007793 	.word	0x08007793
 80076e0:	08007793 	.word	0x08007793
 80076e4:	08007793 	.word	0x08007793
 80076e8:	08007793 	.word	0x08007793
 80076ec:	0800775f 	.word	0x0800775f
 80076f0:	08007793 	.word	0x08007793
 80076f4:	08007793 	.word	0x08007793
 80076f8:	08007793 	.word	0x08007793
 80076fc:	08007793 	.word	0x08007793
 8007700:	08007793 	.word	0x08007793
 8007704:	08007793 	.word	0x08007793
 8007708:	08007793 	.word	0x08007793
 800770c:	08007793 	.word	0x08007793
 8007710:	08007793 	.word	0x08007793
 8007714:	08007793 	.word	0x08007793
 8007718:	08007793 	.word	0x08007793
 800771c:	08007793 	.word	0x08007793
 8007720:	08007793 	.word	0x08007793
 8007724:	08007793 	.word	0x08007793
 8007728:	08007793 	.word	0x08007793
 800772c:	08007785 	.word	0x08007785
 8007730:	2b40      	cmp	r3, #64	; 0x40
 8007732:	d02a      	beq.n	800778a <UART_SetConfig+0x8aa>
 8007734:	e02d      	b.n	8007792 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007736:	f7fe fe0f 	bl	8006358 <HAL_RCCEx_GetD3PCLK1Freq>
 800773a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800773c:	e02f      	b.n	800779e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800773e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007742:	4618      	mov	r0, r3
 8007744:	f7fe fe1e 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800774c:	e027      	b.n	800779e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800774e:	f107 0318 	add.w	r3, r7, #24
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe ff6a 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800775c:	e01f      	b.n	800779e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800775e:	4b21      	ldr	r3, [pc, #132]	; (80077e4 <UART_SetConfig+0x904>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800776a:	4b1e      	ldr	r3, [pc, #120]	; (80077e4 <UART_SetConfig+0x904>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	08db      	lsrs	r3, r3, #3
 8007770:	f003 0303 	and.w	r3, r3, #3
 8007774:	4a1d      	ldr	r2, [pc, #116]	; (80077ec <UART_SetConfig+0x90c>)
 8007776:	fa22 f303 	lsr.w	r3, r2, r3
 800777a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800777c:	e00f      	b.n	800779e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800777e:	4b1b      	ldr	r3, [pc, #108]	; (80077ec <UART_SetConfig+0x90c>)
 8007780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007782:	e00c      	b.n	800779e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007784:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <UART_SetConfig+0x910>)
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007788:	e009      	b.n	800779e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800778a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007790:	e005      	b.n	800779e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800779c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 81ee 	beq.w	8007b82 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	4a12      	ldr	r2, [pc, #72]	; (80077f4 <UART_SetConfig+0x914>)
 80077ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b0:	461a      	mov	r2, r3
 80077b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4413      	add	r3, r2
 80077c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d305      	bcc.n	80077d6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d910      	bls.n	80077f8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80077dc:	e1d1      	b.n	8007b82 <UART_SetConfig+0xca2>
 80077de:	bf00      	nop
 80077e0:	40011c00 	.word	0x40011c00
 80077e4:	58024400 	.word	0x58024400
 80077e8:	58000c00 	.word	0x58000c00
 80077ec:	03d09000 	.word	0x03d09000
 80077f0:	003d0900 	.word	0x003d0900
 80077f4:	080081a8 	.word	0x080081a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077fa:	2200      	movs	r2, #0
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	60fa      	str	r2, [r7, #12]
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	4ac0      	ldr	r2, [pc, #768]	; (8007b08 <UART_SetConfig+0xc28>)
 8007806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800780a:	b29b      	uxth	r3, r3
 800780c:	2200      	movs	r2, #0
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800781a:	f7f8 fd67 	bl	80002ec <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4610      	mov	r0, r2
 8007824:	4619      	mov	r1, r3
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	020b      	lsls	r3, r1, #8
 8007830:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007834:	0202      	lsls	r2, r0, #8
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	6849      	ldr	r1, [r1, #4]
 800783a:	0849      	lsrs	r1, r1, #1
 800783c:	2000      	movs	r0, #0
 800783e:	460c      	mov	r4, r1
 8007840:	4605      	mov	r5, r0
 8007842:	eb12 0804 	adds.w	r8, r2, r4
 8007846:	eb43 0905 	adc.w	r9, r3, r5
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	469a      	mov	sl, r3
 8007852:	4693      	mov	fp, r2
 8007854:	4652      	mov	r2, sl
 8007856:	465b      	mov	r3, fp
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	f7f8 fd46 	bl	80002ec <__aeabi_uldivmod>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4613      	mov	r3, r2
 8007866:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786e:	d308      	bcc.n	8007882 <UART_SetConfig+0x9a2>
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007876:	d204      	bcs.n	8007882 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800787e:	60da      	str	r2, [r3, #12]
 8007880:	e17f      	b.n	8007b82 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007888:	e17b      	b.n	8007b82 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007892:	f040 80bd 	bne.w	8007a10 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007896:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800789a:	2b20      	cmp	r3, #32
 800789c:	dc48      	bgt.n	8007930 <UART_SetConfig+0xa50>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db7b      	blt.n	800799a <UART_SetConfig+0xaba>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d879      	bhi.n	800799a <UART_SetConfig+0xaba>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <UART_SetConfig+0x9cc>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	08007937 	.word	0x08007937
 80078b0:	0800793f 	.word	0x0800793f
 80078b4:	0800799b 	.word	0x0800799b
 80078b8:	0800799b 	.word	0x0800799b
 80078bc:	08007947 	.word	0x08007947
 80078c0:	0800799b 	.word	0x0800799b
 80078c4:	0800799b 	.word	0x0800799b
 80078c8:	0800799b 	.word	0x0800799b
 80078cc:	08007957 	.word	0x08007957
 80078d0:	0800799b 	.word	0x0800799b
 80078d4:	0800799b 	.word	0x0800799b
 80078d8:	0800799b 	.word	0x0800799b
 80078dc:	0800799b 	.word	0x0800799b
 80078e0:	0800799b 	.word	0x0800799b
 80078e4:	0800799b 	.word	0x0800799b
 80078e8:	0800799b 	.word	0x0800799b
 80078ec:	08007967 	.word	0x08007967
 80078f0:	0800799b 	.word	0x0800799b
 80078f4:	0800799b 	.word	0x0800799b
 80078f8:	0800799b 	.word	0x0800799b
 80078fc:	0800799b 	.word	0x0800799b
 8007900:	0800799b 	.word	0x0800799b
 8007904:	0800799b 	.word	0x0800799b
 8007908:	0800799b 	.word	0x0800799b
 800790c:	0800799b 	.word	0x0800799b
 8007910:	0800799b 	.word	0x0800799b
 8007914:	0800799b 	.word	0x0800799b
 8007918:	0800799b 	.word	0x0800799b
 800791c:	0800799b 	.word	0x0800799b
 8007920:	0800799b 	.word	0x0800799b
 8007924:	0800799b 	.word	0x0800799b
 8007928:	0800799b 	.word	0x0800799b
 800792c:	0800798d 	.word	0x0800798d
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d02e      	beq.n	8007992 <UART_SetConfig+0xab2>
 8007934:	e031      	b.n	800799a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007936:	f7fd f9a9 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 800793a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800793c:	e033      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800793e:	f7fd f9bb 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8007942:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007944:	e02f      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fd1a 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007954:	e027      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007956:	f107 0318 	add.w	r3, r7, #24
 800795a:	4618      	mov	r0, r3
 800795c:	f7fe fe66 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007964:	e01f      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007966:	4b69      	ldr	r3, [pc, #420]	; (8007b0c <UART_SetConfig+0xc2c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007972:	4b66      	ldr	r3, [pc, #408]	; (8007b0c <UART_SetConfig+0xc2c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	08db      	lsrs	r3, r3, #3
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	4a64      	ldr	r2, [pc, #400]	; (8007b10 <UART_SetConfig+0xc30>)
 800797e:	fa22 f303 	lsr.w	r3, r2, r3
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007984:	e00f      	b.n	80079a6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007986:	4b62      	ldr	r3, [pc, #392]	; (8007b10 <UART_SetConfig+0xc30>)
 8007988:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800798a:	e00c      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800798c:	4b61      	ldr	r3, [pc, #388]	; (8007b14 <UART_SetConfig+0xc34>)
 800798e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007990:	e009      	b.n	80079a6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007998:	e005      	b.n	80079a6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 80ea 	beq.w	8007b82 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b2:	4a55      	ldr	r2, [pc, #340]	; (8007b08 <UART_SetConfig+0xc28>)
 80079b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079c0:	005a      	lsls	r2, r3, #1
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	441a      	add	r2, r3
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d916      	bls.n	8007a08 <UART_SetConfig+0xb28>
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e0:	d212      	bcs.n	8007a08 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f023 030f 	bic.w	r3, r3, #15
 80079ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079fa:	4313      	orrs	r3, r2
 80079fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	e0bc      	b.n	8007b82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a0e:	e0b8      	b.n	8007b82 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a14:	2b20      	cmp	r3, #32
 8007a16:	dc4b      	bgt.n	8007ab0 <UART_SetConfig+0xbd0>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f2c0 8087 	blt.w	8007b2c <UART_SetConfig+0xc4c>
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	f200 8084 	bhi.w	8007b2c <UART_SetConfig+0xc4c>
 8007a24:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <UART_SetConfig+0xb4c>)
 8007a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2a:	bf00      	nop
 8007a2c:	08007ab7 	.word	0x08007ab7
 8007a30:	08007abf 	.word	0x08007abf
 8007a34:	08007b2d 	.word	0x08007b2d
 8007a38:	08007b2d 	.word	0x08007b2d
 8007a3c:	08007ac7 	.word	0x08007ac7
 8007a40:	08007b2d 	.word	0x08007b2d
 8007a44:	08007b2d 	.word	0x08007b2d
 8007a48:	08007b2d 	.word	0x08007b2d
 8007a4c:	08007ad7 	.word	0x08007ad7
 8007a50:	08007b2d 	.word	0x08007b2d
 8007a54:	08007b2d 	.word	0x08007b2d
 8007a58:	08007b2d 	.word	0x08007b2d
 8007a5c:	08007b2d 	.word	0x08007b2d
 8007a60:	08007b2d 	.word	0x08007b2d
 8007a64:	08007b2d 	.word	0x08007b2d
 8007a68:	08007b2d 	.word	0x08007b2d
 8007a6c:	08007ae7 	.word	0x08007ae7
 8007a70:	08007b2d 	.word	0x08007b2d
 8007a74:	08007b2d 	.word	0x08007b2d
 8007a78:	08007b2d 	.word	0x08007b2d
 8007a7c:	08007b2d 	.word	0x08007b2d
 8007a80:	08007b2d 	.word	0x08007b2d
 8007a84:	08007b2d 	.word	0x08007b2d
 8007a88:	08007b2d 	.word	0x08007b2d
 8007a8c:	08007b2d 	.word	0x08007b2d
 8007a90:	08007b2d 	.word	0x08007b2d
 8007a94:	08007b2d 	.word	0x08007b2d
 8007a98:	08007b2d 	.word	0x08007b2d
 8007a9c:	08007b2d 	.word	0x08007b2d
 8007aa0:	08007b2d 	.word	0x08007b2d
 8007aa4:	08007b2d 	.word	0x08007b2d
 8007aa8:	08007b2d 	.word	0x08007b2d
 8007aac:	08007b1f 	.word	0x08007b1f
 8007ab0:	2b40      	cmp	r3, #64	; 0x40
 8007ab2:	d037      	beq.n	8007b24 <UART_SetConfig+0xc44>
 8007ab4:	e03a      	b.n	8007b2c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ab6:	f7fd f8e9 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 8007aba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007abc:	e03c      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007abe:	f7fd f8fb 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 8007ac2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ac4:	e038      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe fc5a 	bl	8006384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad4:	e030      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad6:	f107 0318 	add.w	r3, r7, #24
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fda6 	bl	800662c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae4:	e028      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <UART_SetConfig+0xc2c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d012      	beq.n	8007b18 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <UART_SetConfig+0xc2c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	4a04      	ldr	r2, [pc, #16]	; (8007b10 <UART_SetConfig+0xc30>)
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b04:	e018      	b.n	8007b38 <UART_SetConfig+0xc58>
 8007b06:	bf00      	nop
 8007b08:	080081a8 	.word	0x080081a8
 8007b0c:	58024400 	.word	0x58024400
 8007b10:	03d09000 	.word	0x03d09000
 8007b14:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b24      	ldr	r3, [pc, #144]	; (8007bac <UART_SetConfig+0xccc>)
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b1c:	e00c      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b1e:	4b24      	ldr	r3, [pc, #144]	; (8007bb0 <UART_SetConfig+0xcd0>)
 8007b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b22:	e009      	b.n	8007b38 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b2a:	e005      	b.n	8007b38 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b36:	bf00      	nop
    }

    if (pclk != 0U)
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d021      	beq.n	8007b82 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	4a1c      	ldr	r2, [pc, #112]	; (8007bb4 <UART_SetConfig+0xcd4>)
 8007b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	441a      	add	r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b64:	2b0f      	cmp	r3, #15
 8007b66:	d909      	bls.n	8007b7c <UART_SetConfig+0xc9c>
 8007b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6e:	d205      	bcs.n	8007b7c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	e002      	b.n	8007b82 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2200      	movs	r2, #0
 8007b96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007b9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3748      	adds	r7, #72	; 0x48
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bac:	03d09000 	.word	0x03d09000
 8007bb0:	003d0900 	.word	0x003d0900
 8007bb4:	080081a8 	.word	0x080081a8

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7f9 fdfe 	bl	800190c <HAL_GetTick>
 8007d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10e      	bne.n	8007d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f82f 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e025      	b.n	8007d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0304 	and.w	r3, r3, #4
 8007d48:	2b04      	cmp	r3, #4
 8007d4a:	d10e      	bne.n	8007d6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f819 	bl	8007d92 <UART_WaitOnFlagUntilTimeout>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e00f      	b.n	8007d8a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b09c      	sub	sp, #112	; 0x70
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	603b      	str	r3, [r7, #0]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007da2:	e0a9      	b.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	f000 80a5 	beq.w	8007ef8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dae:	f7f9 fdad 	bl	800190c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d302      	bcc.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8007dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d140      	bne.n	8007e46 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007dd8:	667b      	str	r3, [r7, #100]	; 0x64
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007de4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007de8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3308      	adds	r3, #8
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e16:	64ba      	str	r2, [r7, #72]	; 0x48
 8007e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e5      	bne.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e069      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d051      	beq.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e62:	d149      	bne.n	8007ef8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	e853 3f00 	ldrex	r3, [r3]
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e6      	bne.n	8007e6e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	e853 3f00 	ldrex	r3, [r3]
 8007eae:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ec0:	623a      	str	r2, [r7, #32]
 8007ec2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	69f9      	ldr	r1, [r7, #28]
 8007ec6:	6a3a      	ldr	r2, [r7, #32]
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e5      	bne.n	8007ea0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e010      	b.n	8007f1a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	461a      	mov	r2, r3
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	f43f af46 	beq.w	8007da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3770      	adds	r7, #112	; 0x70
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b085      	sub	sp, #20
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e027      	b.n	8007f88 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2224      	movs	r2, #36	; 0x24
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0201 	bic.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e02d      	b.n	8008008 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2224      	movs	r2, #36	; 0x24
 8007fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 0201 	bic.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 f84f 	bl	800808c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008020:	2b01      	cmp	r3, #1
 8008022:	d101      	bne.n	8008028 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008024:	2302      	movs	r3, #2
 8008026:	e02d      	b.n	8008084 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2224      	movs	r2, #36	; 0x24
 8008034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	430a      	orrs	r2, r1
 8008062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f811 	bl	800808c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	2b00      	cmp	r3, #0
 800809a:	d108      	bne.n	80080ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080ac:	e031      	b.n	8008112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080ae:	2310      	movs	r3, #16
 80080b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080b2:	2310      	movs	r3, #16
 80080b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	0e5b      	lsrs	r3, r3, #25
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	0f5b      	lsrs	r3, r3, #29
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	7b3a      	ldrb	r2, [r7, #12]
 80080da:	4911      	ldr	r1, [pc, #68]	; (8008120 <UARTEx_SetNbDataToProcess+0x94>)
 80080dc:	5c8a      	ldrb	r2, [r1, r2]
 80080de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080e2:	7b3a      	ldrb	r2, [r7, #12]
 80080e4:	490f      	ldr	r1, [pc, #60]	; (8008124 <UARTEx_SetNbDataToProcess+0x98>)
 80080e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	7b7a      	ldrb	r2, [r7, #13]
 80080f8:	4909      	ldr	r1, [pc, #36]	; (8008120 <UARTEx_SetNbDataToProcess+0x94>)
 80080fa:	5c8a      	ldrb	r2, [r1, r2]
 80080fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008100:	7b7a      	ldrb	r2, [r7, #13]
 8008102:	4908      	ldr	r1, [pc, #32]	; (8008124 <UARTEx_SetNbDataToProcess+0x98>)
 8008104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008106:	fb93 f3f2 	sdiv	r3, r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	080081c0 	.word	0x080081c0
 8008124:	080081c8 	.word	0x080081c8

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f000 f820 	bl	8008180 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	080081d8 	.word	0x080081d8
 8008164:	080081d8 	.word	0x080081d8
 8008168:	080081d8 	.word	0x080081d8
 800816c:	080081dc 	.word	0x080081dc

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
