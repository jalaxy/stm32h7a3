
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00012014  24000000  080085e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ea808  24012014  0801a5f4  00032014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240fc81c  0801a5f4  0003c81c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00032014  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a2a9  00000000  00000000  00032042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cd4  00000000  00000000  0004c2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001350  00000000  00000000  0004efc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001230  00000000  00000000  00050310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031d9d  00000000  00000000  00051540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018c28  00000000  00000000  000832dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001492ef  00000000  00000000  0009bf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e51f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005280  00000000  00000000  001e5244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24012014 	.word	0x24012014
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008570 	.word	0x08008570

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24012018 	.word	0x24012018
 80002e8:	08008570 	.word	0x08008570

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fa29 	bl	8001a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8bd 	bl	8000778 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2104      	movs	r1, #4
 8000602:	4857      	ldr	r0, [pc, #348]	; (8000760 <main+0x170>)
 8000604:	f002 fcf2 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4855      	ldr	r0, [pc, #340]	; (8000764 <main+0x174>)
 800060e:	f002 fced 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000612:	2064      	movs	r0, #100	; 0x64
 8000614:	f001 faac 	bl	8001b70 <HAL_Delay>
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, SET); // LCD reset
 8000618:	2201      	movs	r2, #1
 800061a:	2104      	movs	r1, #4
 800061c:	4850      	ldr	r0, [pc, #320]	; (8000760 <main+0x170>)
 800061e:	f002 fce5 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, SET); // I2C reset
 8000622:	2201      	movs	r2, #1
 8000624:	2180      	movs	r1, #128	; 0x80
 8000626:	484f      	ldr	r0, [pc, #316]	; (8000764 <main+0x174>)
 8000628:	f002 fce0 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, SET); // background light on
 800062c:	2201      	movs	r2, #1
 800062e:	2101      	movs	r1, #1
 8000630:	484c      	ldr	r0, [pc, #304]	; (8000764 <main+0x174>)
 8000632:	f002 fcdb 	bl	8002fec <HAL_GPIO_WritePin>
	pos_t pos = clrscreen();
 8000636:	f000 fd13 	bl	8001060 <clrscreen>
 800063a:	6378      	str	r0, [r7, #52]	; 0x34

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 fab4 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000640:	f000 fa5e 	bl	8000b00 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000644:	f000 faa8 	bl	8000b98 <MX_USB_OTG_HS_USB_Init>
  MX_LTDC_Init();
 8000648:	f000 f9c8 	bl	80009dc <MX_LTDC_Init>
  MX_I2C1_Init();
 800064c:	f000 f986 	bl	800095c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000650:	f000 f90c 	bl	800086c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	pos = _putl(pos, touch_init(&hi2c1), 10);
 8000654:	4844      	ldr	r0, [pc, #272]	; (8000768 <main+0x178>)
 8000656:	f001 f925 	bl	80018a4 <touch_init>
 800065a:	4603      	mov	r3, r0
 800065c:	220a      	movs	r2, #10
 800065e:	4619      	mov	r1, r3
 8000660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000662:	f000 fcde 	bl	8001022 <_putl>
 8000666:	6378      	str	r0, [r7, #52]	; 0x34
	pos = _putc(pos, '\n');
 8000668:	210a      	movs	r1, #10
 800066a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800066c:	f000 fc00 	bl	8000e70 <_putc>
 8000670:	6378      	str	r0, [r7, #52]	; 0x34
	unsigned char addr[] = { 0x00, 0xa4, 0x80, 0x88, 0xa1, 0xa2, 0x02 }, buf[1];
 8000672:	4a3e      	ldr	r2, [pc, #248]	; (800076c <main+0x17c>)
 8000674:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067c:	6018      	str	r0, [r3, #0]
 800067e:	3304      	adds	r3, #4
 8000680:	8019      	strh	r1, [r3, #0]
 8000682:	3302      	adds	r3, #2
 8000684:	0c0a      	lsrs	r2, r1, #16
 8000686:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(addr); i++)
 8000688:	2300      	movs	r3, #0
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
 800068c:	e064      	b.n	8000758 <main+0x168>
	{
		char suc = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		suc &= HAL_I2C_Master_Transmit(&hi2c1, 0x70, &addr[i], 1, HAL_MAX_DELAY) == 0;
 8000694:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069a:	441a      	add	r2, r3
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2301      	movs	r3, #1
 80006a4:	2170      	movs	r1, #112	; 0x70
 80006a6:	4830      	ldr	r0, [pc, #192]	; (8000768 <main+0x178>)
 80006a8:	f002 fd88 	bl	80031bc <HAL_I2C_Master_Transmit>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf0c      	ite	eq
 80006b2:	2301      	moveq	r3, #1
 80006b4:	2300      	movne	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80006be:	4013      	ands	r3, r2
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		suc &= HAL_I2C_Master_Receive(&hi2c1, 0x70, buf, 1, HAL_MAX_DELAY) == 0;
 80006c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2301      	movs	r3, #1
 80006d2:	2170      	movs	r1, #112	; 0x70
 80006d4:	4824      	ldr	r0, [pc, #144]	; (8000768 <main+0x178>)
 80006d6:	f002 fe65 	bl	80033a4 <HAL_I2C_Master_Receive>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b25a      	sxtb	r2, r3
 80006e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80006ec:	4013      	ands	r3, r2
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		pos = _puts(pos, "0x");
 80006f4:	491e      	ldr	r1, [pc, #120]	; (8000770 <main+0x180>)
 80006f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006f8:	f000 fc4a 	bl	8000f90 <_puts>
 80006fc:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _putl(pos, addr[i], 16);
 80006fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2210      	movs	r2, #16
 800070a:	4619      	mov	r1, r3
 800070c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800070e:	f000 fc88 	bl	8001022 <_putl>
 8000712:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _puts(pos, ": ");
 8000714:	4917      	ldr	r1, [pc, #92]	; (8000774 <main+0x184>)
 8000716:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000718:	f000 fc3a 	bl	8000f90 <_puts>
 800071c:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _putl(pos, suc, 2);
 800071e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000722:	2202      	movs	r2, #2
 8000724:	4619      	mov	r1, r3
 8000726:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000728:	f000 fc7b 	bl	8001022 <_putl>
 800072c:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _putc(pos, ' ');
 800072e:	2120      	movs	r1, #32
 8000730:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000732:	f000 fb9d 	bl	8000e70 <_putc>
 8000736:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _putl(pos, buf[0], 16);
 8000738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800073c:	2210      	movs	r2, #16
 800073e:	4619      	mov	r1, r3
 8000740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000742:	f000 fc6e 	bl	8001022 <_putl>
 8000746:	6378      	str	r0, [r7, #52]	; 0x34
		pos = _putc(pos, '\n');
 8000748:	210a      	movs	r1, #10
 800074a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800074c:	f000 fb90 	bl	8000e70 <_putc>
 8000750:	6378      	str	r0, [r7, #52]	; 0x34
	for (int i = 0; i < sizeof(addr); i++)
 8000752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000754:	3301      	adds	r3, #1
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
 8000758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800075a:	2b06      	cmp	r3, #6
 800075c:	d997      	bls.n	800068e <main+0x9e>
		//HAL_Delay(100);
	}
	while(1)
 800075e:	e7fe      	b.n	800075e <main+0x16e>
 8000760:	58020400 	.word	0x58020400
 8000764:	58020000 	.word	0x58020000
 8000768:	24012094 	.word	0x24012094
 800076c:	08008590 	.word	0x08008590
 8000770:	08008588 	.word	0x08008588
 8000774:	0800858c 	.word	0x0800858c

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	; 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f007 feea 	bl	8008560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f007 fee4 	bl	8008560 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000798:	2004      	movs	r0, #4
 800079a:	f003 fcb1 	bl	8004100 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <SystemClock_Config+0xec>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a2f      	ldr	r2, [pc, #188]	; (8000864 <SystemClock_Config+0xec>)
 80007a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <SystemClock_Config+0xec>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007ba:	bf00      	nop
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <SystemClock_Config+0xec>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c8:	d1f8      	bne.n	80007bc <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <SystemClock_Config+0xf0>)
 80007cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ce:	f023 0303 	bic.w	r3, r3, #3
 80007d2:	4a25      	ldr	r2, [pc, #148]	; (8000868 <SystemClock_Config+0xf0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007da:	2321      	movs	r3, #33	; 0x21
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80007f4:	2346      	movs	r3, #70	; 0x46
 80007f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000800:	2302      	movs	r3, #2
 8000802:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000804:	230c      	movs	r3, #12
 8000806:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000808:	2300      	movs	r3, #0
 800080a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fccd 	bl	80041b4 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000820:	f000 fb20 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	233f      	movs	r3, #63	; 0x3f
 8000826:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2303      	movs	r3, #3
 800082a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000834:	2340      	movs	r3, #64	; 0x40
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000838:	2340      	movs	r3, #64	; 0x40
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000840:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2107      	movs	r1, #7
 800084a:	4618      	mov	r0, r3
 800084c:	f004 f8b6 	bl	80049bc <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000856:	f000 fb05 	bl	8000e64 <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3770      	adds	r7, #112	; 0x70
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024800 	.word	0x58024800
 8000868:	58024400 	.word	0x58024400

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <MX_ADC1_Init+0xe8>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_ADC1_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008ba:	4b25      	ldr	r3, [pc, #148]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008bc:	2201      	movs	r2, #1
 80008be:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <MX_ADC1_Init+0xe4>)
 80008ee:	f001 faef 	bl	8001ed0 <HAL_ADC_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f8:	f000 fab4 	bl	8000e64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_ADC1_Init+0xe4>)
 8000908:	f002 f814 	bl	8002934 <HAL_ADCEx_MultiModeConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000912:	f000 faa7 	bl	8000e64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <MX_ADC1_Init+0xec>)
 8000918:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2306      	movs	r3, #6
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000922:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000926:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000928:	2304      	movs	r3, #4
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_ADC1_Init+0xe4>)
 800093a:	f001 fc23 	bl	8002184 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000944:	f000 fa8e 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24012030 	.word	0x24012030
 8000954:	40022000 	.word	0x40022000
 8000958:	08600004 	.word	0x08600004

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_I2C1_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00D04BFF;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_I2C1_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 112;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_I2C1_Init+0x74>)
 800096e:	2270      	movs	r2, #112	; 0x70
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_I2C1_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_I2C1_Init+0x74>)
 8000998:	f002 fb80 	bl	800309c <HAL_I2C_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009a2:	f000 fa5f 	bl	8000e64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009aa:	f003 f869 	bl	8003a80 <HAL_I2CEx_ConfigAnalogFilter>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f000 fa56 	bl	8000e64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_I2C1_Init+0x74>)
 80009bc:	f003 f8ab 	bl	8003b16 <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 fa4d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24012094 	.word	0x24012094
 80009d4:	40005400 	.word	0x40005400
 80009d8:	00d04bff 	.word	0x00d04bff

080009dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2234      	movs	r2, #52	; 0x34
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f007 fdb9 	bl	8008560 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009ee:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <MX_LTDC_Init+0x114>)
 80009f0:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <MX_LTDC_Init+0x118>)
 80009f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_LTDC_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009fa:	4b3d      	ldr	r3, [pc, #244]	; (8000af0 <MX_LTDC_Init+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a00:	4b3b      	ldr	r3, [pc, #236]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a0e:	2214      	movs	r2, #20
 8000a10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000a12:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a14:	2203      	movs	r2, #3
 8000a16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8000a18:	4b35      	ldr	r3, [pc, #212]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a1a:	22a0      	movs	r2, #160	; 0xa0
 8000a1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8000a1e:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a20:	2217      	movs	r2, #23
 8000a22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1184;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a26:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 623;
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a2e:	f240 226f 	movw	r2, #623	; 0x26f
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1344;
 8000a34:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a36:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 635;
 8000a3c:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a3e:	f240 227b 	movw	r2, #635	; 0x27b
 8000a42:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000a5e:	f003 f8a7 	bl	8003bb0 <HAL_LTDC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 f9fc 	bl	8000e64 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 100;
 8000a6c:	2364      	movs	r3, #100	; 0x64
 8000a6e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 900;
 8000a70:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000a74:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 8000a7a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a7e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a84:	23ff      	movs	r3, #255	; 0xff
 8000a86:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 8000a88:	23ff      	movs	r3, #255	; 0xff
 8000a8a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a90:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a92:	2305      	movs	r3, #5
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000200;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_LTDC_Init+0x11c>)
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8000a9a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 8000aa0:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000ac0:	f003 f946 	bl	8003d50 <HAL_LTDC_ConfigLayer>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000aca:	f000 f9cb 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	pLayerCfg.FBStartAdress = (uint32_t) pixels_565;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_LTDC_Init+0x120>)
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_LTDC_Init+0x114>)
 8000ada:	f003 f939 	bl	8003d50 <HAL_LTDC_ConfigLayer>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_LTDC_Init+0x10c>
		Error_Handler();
 8000ae4:	f000 f9be 	bl	8000e64 <Error_Handler>
	}

  /* USER CODE END LTDC_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3738      	adds	r7, #56	; 0x38
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	240120e0 	.word	0x240120e0
 8000af4:	50001000 	.word	0x50001000
 8000af8:	24000200 	.word	0x24000200
 8000afc:	24012218 	.word	0x24012218

08000b00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	; (8000b94 <MX_USART3_UART_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b4a:	f006 fb71 	bl	8007230 <HAL_UART_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f986 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b5c:	f007 fc12 	bl	8008384 <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f97d 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b6e:	f007 fc47 	bl	8008400 <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f974 	bl	8000e64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f007 fbc8 	bl	8008312 <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f96c 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24012188 	.word	0x24012188
 8000b94:	40004800 	.word	0x40004800

08000b98 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4ba2      	ldr	r3, [pc, #648]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bc4:	4aa0      	ldr	r2, [pc, #640]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bce:	4b9e      	ldr	r3, [pc, #632]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	623b      	str	r3, [r7, #32]
 8000bda:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bdc:	4b9a      	ldr	r3, [pc, #616]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bde:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be2:	4a99      	ldr	r2, [pc, #612]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bec:	4b96      	ldr	r3, [pc, #600]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	f003 0304 	and.w	r3, r3, #4
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bfa:	4b93      	ldr	r3, [pc, #588]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000bfc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c00:	4a91      	ldr	r2, [pc, #580]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c0a:	4b8f      	ldr	r3, [pc, #572]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c10:	f003 0320 	and.w	r3, r3, #32
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c18:	4b8b      	ldr	r3, [pc, #556]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c1e:	4a8a      	ldr	r2, [pc, #552]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c28:	4b87      	ldr	r3, [pc, #540]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b84      	ldr	r3, [pc, #528]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3c:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5a:	4a7b      	ldr	r2, [pc, #492]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c64:	4b78      	ldr	r3, [pc, #480]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c74:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c78:	4a73      	ldr	r2, [pc, #460]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c82:	4b71      	ldr	r3, [pc, #452]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c90:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c96:	4a6c      	ldr	r2, [pc, #432]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ca0:	4b69      	ldr	r3, [pc, #420]	; (8000e48 <MX_GPIO_Init+0x2a0>)
 8000ca2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb4:	4865      	ldr	r0, [pc, #404]	; (8000e4c <MX_GPIO_Init+0x2a4>)
 8000cb6:	f002 f999 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LTDC_BL_Pin|I2C1_RST_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2181      	movs	r1, #129	; 0x81
 8000cbe:	4864      	ldr	r0, [pc, #400]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000cc0:	f002 f994 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cca:	4862      	ldr	r0, [pc, #392]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000ccc:	f002 f98e 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	485f      	ldr	r0, [pc, #380]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000cd6:	f002 f989 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	485e      	ldr	r0, [pc, #376]	; (8000e58 <MX_GPIO_Init+0x2b0>)
 8000ce0:	f002 f984 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4858      	ldr	r0, [pc, #352]	; (8000e5c <MX_GPIO_Init+0x2b4>)
 8000cfc:	f001 ffc6 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	4619      	mov	r1, r3
 8000d18:	484c      	ldr	r0, [pc, #304]	; (8000e4c <MX_GPIO_Init+0x2a4>)
 8000d1a:	f001 ffb7 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LTDC_BL_Pin I2C1_RST_Pin */
  GPIO_InitStruct.Pin = LTDC_BL_Pin|I2C1_RST_Pin;
 8000d1e:	2381      	movs	r3, #129	; 0x81
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4846      	ldr	r0, [pc, #280]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000d36:	f001 ffa9 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d3a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4840      	ldr	r0, [pc, #256]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000d54:	f001 ff9a 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_RST_Pin */
  GPIO_InitStruct.Pin = LTDC_RST_Pin;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LTDC_RST_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4839      	ldr	r0, [pc, #228]	; (8000e54 <MX_GPIO_Init+0x2ac>)
 8000d70:	f001 ff8c 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4835      	ldr	r0, [pc, #212]	; (8000e60 <MX_GPIO_Init+0x2b8>)
 8000d8a:	f001 ff7f 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_INT_Pin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	482a      	ldr	r0, [pc, #168]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000da6:	f001 ff71 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000dc0:	f001 ff64 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000de2:	f001 ff53 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000de6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4814      	ldr	r0, [pc, #80]	; (8000e50 <MX_GPIO_Init+0x2a8>)
 8000e00:	f001 ff44 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e04:	2302      	movs	r3, #2
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480f      	ldr	r0, [pc, #60]	; (8000e58 <MX_GPIO_Init+0x2b0>)
 8000e1c:	f001 ff36 	bl	8002c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2017      	movs	r0, #23
 8000e26:	f001 fefc 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e2a:	2017      	movs	r0, #23
 8000e2c:	f001 ff13 	bl	8002c56 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2028      	movs	r0, #40	; 0x28
 8000e36:	f001 fef4 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e3a:	2028      	movs	r0, #40	; 0x28
 8000e3c:	f001 ff0b 	bl	8002c56 <HAL_NVIC_EnableIRQ>

}
 8000e40:	bf00      	nop
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58021400 	.word	0x58021400
 8000e50:	58020000 	.word	0x58020000
 8000e54:	58020400 	.word	0x58020400
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020800 	.word	0x58020800
 8000e60:	58021800 	.word	0x58021800

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <_putc>:

unsigned short pixels_565[WINDOW_HEIGHT][WINDOW_WIDTH];
float linespace = 1.5;

pos_t _putc(pos_t pos, char ch)
{
 8000e70:	b590      	push	{r4, r7, lr}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	70fb      	strb	r3, [r7, #3]
	if (ch == '\n')
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	2b0a      	cmp	r3, #10
 8000e80:	d115      	bne.n	8000eae <_putc+0x3e>
		return POS(MARGIN_X, Y(pos) + linespace * MONO_HEIGHT);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <_putc+0x114>)
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000e98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ea4:	ee17 3a90 	vmov	r3, s15
 8000ea8:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8000eac:	e066      	b.n	8000f7c <_putc+0x10c>
    unsigned short x = X(pos), y = Y(pos);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	82fb      	strh	r3, [r7, #22]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	82bb      	strh	r3, [r7, #20]
	if (x + MONO_WIDTH > WINDOW_WIDTH - MARGIN_X)
 8000eb8:	8afb      	ldrh	r3, [r7, #22]
 8000eba:	f240 320a 	movw	r2, #778	; 0x30a
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d914      	bls.n	8000eec <_putc+0x7c>
	{
		x = MARGIN_X;
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	82fb      	strh	r3, [r7, #22]
		y += linespace * MONO_HEIGHT;
 8000ec6:	8abb      	ldrh	r3, [r7, #20]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <_putc+0x114>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000eda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee6:	ee17 3a90 	vmov	r3, s15
 8000eea:	82bb      	strh	r3, [r7, #20]
	}
	if (y + MONO_HEIGHT > WINDOW_HEIGHT - MARGIN_Y)
 8000eec:	8abb      	ldrh	r3, [r7, #20]
 8000eee:	f240 2236 	movw	r2, #566	; 0x236
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d909      	bls.n	8000f0a <_putc+0x9a>
		y = Y(scrollup(POS(x, y), 1));
 8000ef6:	8afb      	ldrh	r3, [r7, #22]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	8abb      	ldrh	r3, [r7, #20]
 8000efc:	4413      	add	r3, r2
 8000efe:	2101      	movs	r1, #1
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f8db 	bl	80010bc <scrollup>
 8000f06:	4603      	mov	r3, r0
 8000f08:	82bb      	strh	r3, [r7, #20]
    unsigned short(*img)[MONO_WIDTH] = (unsigned short(*)[MONO_WIDTH])monofont[(int)ch];
 8000f0a:	78fa      	ldrb	r2, [r7, #3]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	019b      	lsls	r3, r3, #6
 8000f14:	4a1c      	ldr	r2, [pc, #112]	; (8000f88 <_putc+0x118>)
 8000f16:	4413      	add	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < MONO_HEIGHT; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e025      	b.n	8000f6c <_putc+0xfc>
        for (int j = 0; j < MONO_WIDTH; j++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e01c      	b.n	8000f60 <_putc+0xf0>
            pixels_565[y + i][x + j] = img[i][j];
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	461a      	mov	r2, r3
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1899      	adds	r1, r3, r2
 8000f36:	8aba      	ldrh	r2, [r7, #20]
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	441a      	add	r2, r3
 8000f3c:	8af8      	ldrh	r0, [r7, #22]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	4403      	add	r3, r0
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8000f48:	4910      	ldr	r1, [pc, #64]	; (8000f8c <_putc+0x11c>)
 8000f4a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f4e:	fb00 f202 	mul.w	r2, r0, r2
 8000f52:	4413      	add	r3, r2
 8000f54:	4622      	mov	r2, r4
 8000f56:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < MONO_WIDTH; j++)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b0b      	cmp	r3, #11
 8000f64:	dddf      	ble.n	8000f26 <_putc+0xb6>
    for (int i = 0; i < MONO_HEIGHT; i++)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b17      	cmp	r3, #23
 8000f70:	ddd6      	ble.n	8000f20 <_putc+0xb0>
    return POS(x + MONO_WIDTH, y);
 8000f72:	8afb      	ldrh	r3, [r7, #22]
 8000f74:	330c      	adds	r3, #12
 8000f76:	041a      	lsls	r2, r3, #16
 8000f78:	8abb      	ldrh	r3, [r7, #20]
 8000f7a:	4413      	add	r3, r2
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd90      	pop	{r4, r7, pc}
 8000f84:	24012000 	.word	0x24012000
 8000f88:	24000000 	.word	0x24000000
 8000f8c:	24012218 	.word	0x24012218

08000f90 <_puts>:

pos_t _puts(pos_t pos, char *s)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
    while (*s)
 8000f9a:	e008      	b.n	8000fae <_puts+0x1e>
        pos = _putc(pos, *s++);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	603a      	str	r2, [r7, #0]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff62 	bl	8000e70 <_putc>
 8000fac:	6078      	str	r0, [r7, #4]
    while (*s)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f2      	bne.n	8000f9c <_puts+0xc>
    return pos;
 8000fb6:	687b      	ldr	r3, [r7, #4]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <_putul>:

pos_t _putul(pos_t pos, unsigned long ul, int base)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
	unsigned long div = ul / base;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
	char digit = ul % base;
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fde:	fb01 f202 	mul.w	r2, r1, r2
 8000fe2:	1a9b      	subs	r3, r3, r2
 8000fe4:	74fb      	strb	r3, [r7, #19]
	digit += digit < 10 ? '0' : 'A' - 10;
 8000fe6:	7cfb      	ldrb	r3, [r7, #19]
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d801      	bhi.n	8000ff0 <_putul+0x30>
 8000fec:	2230      	movs	r2, #48	; 0x30
 8000fee:	e000      	b.n	8000ff2 <_putul+0x32>
 8000ff0:	2237      	movs	r2, #55	; 0x37
 8000ff2:	7cfb      	ldrb	r3, [r7, #19]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	74fb      	strb	r3, [r7, #19]
	return _putc(div ? _putul(pos, div, base) : pos, digit);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d006      	beq.n	800100c <_putul+0x4c>
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	6979      	ldr	r1, [r7, #20]
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff ffdc 	bl	8000fc0 <_putul>
 8001008:	4603      	mov	r3, r0
 800100a:	e000      	b.n	800100e <_putul+0x4e>
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	7cfa      	ldrb	r2, [r7, #19]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff2c 	bl	8000e70 <_putc>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_putl>:

pos_t _putl(pos_t pos, long l, int base)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
	unsigned long ul;
	if (l >= 0)
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db02      	blt.n	800103a <_putl+0x18>
		ul = l;
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	e007      	b.n	800104a <_putl+0x28>
	else
	{
		ul = -l;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	425b      	negs	r3, r3
 800103e:	617b      	str	r3, [r7, #20]
		pos = _putc(pos, '-');
 8001040:	212d      	movs	r1, #45	; 0x2d
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f7ff ff14 	bl	8000e70 <_putc>
 8001048:	60f8      	str	r0, [r7, #12]
	}
	return _putul(pos, ul, base);
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff ffb6 	bl	8000fc0 <_putul>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <clrscreen>:
	}
    return pos;
}

pos_t clrscreen()
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e018      	b.n	800109e <clrscreen+0x3e>
		for (int j = 0; j < WINDOW_WIDTH; j++)
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	e00e      	b.n	8001090 <clrscreen+0x30>
			pixels_565[i][j] = 0xffff;
 8001072:	4911      	ldr	r1, [pc, #68]	; (80010b8 <clrscreen+0x58>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f44f 7248 	mov.w	r2, #800	; 0x320
 800107a:	fb03 f202 	mul.w	r2, r3, r2
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001086:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < WINDOW_WIDTH; j++)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001096:	dbec      	blt.n	8001072 <clrscreen+0x12>
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3301      	adds	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80010a4:	dbe2      	blt.n	800106c <clrscreen+0xc>
	return POS(MARGIN_X, MARGIN_Y);
 80010a6:	f04f 130a 	mov.w	r3, #655370	; 0xa000a
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24012218 	.word	0x24012218

080010bc <scrollup>:

pos_t scrollup(pos_t pos, int n)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
    int d = n * linespace * MONO_HEIGHT;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <scrollup+0xec>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80010de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	e023      	b.n	800113a <scrollup+0x7e>
        for (int j = 0; j < WINDOW_WIDTH; j++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e019      	b.n	800112c <scrollup+0x70>
            pixels_565[i][j] = pixels_565[i + d][j];
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4413      	add	r3, r2
 80010fe:	492b      	ldr	r1, [pc, #172]	; (80011ac <scrollup+0xf0>)
 8001100:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001104:	fb03 f202 	mul.w	r2, r3, r2
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	4413      	add	r3, r2
 800110c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8001110:	4926      	ldr	r1, [pc, #152]	; (80011ac <scrollup+0xf0>)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001118:	fb03 f202 	mul.w	r2, r3, r2
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	4413      	add	r3, r2
 8001120:	4602      	mov	r2, r0
 8001122:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	3301      	adds	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001132:	dbe1      	blt.n	80010f8 <scrollup+0x3c>
    for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	3301      	adds	r3, #1
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	dbd5      	blt.n	80010f2 <scrollup+0x36>
    for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e018      	b.n	8001182 <scrollup+0xc6>
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	e00e      	b.n	8001174 <scrollup+0xb8>
            pixels_565[i][j] = 0xffff;
 8001156:	4915      	ldr	r1, [pc, #84]	; (80011ac <scrollup+0xf0>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800115e:	fb03 f202 	mul.w	r2, r3, r2
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4413      	add	r3, r2
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < WINDOW_WIDTH; j++)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	3301      	adds	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800117a:	dbec      	blt.n	8001156 <scrollup+0x9a>
    for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001188:	dbe2      	blt.n	8001150 <scrollup+0x94>
    return POS(X(pos), Y(pos) - d);
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <scrollup+0xf4>)
 800118e:	4013      	ands	r3, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	b291      	uxth	r1, r2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	1a8a      	subs	r2, r1, r2
 8001198:	4413      	add	r3, r2
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	24012000 	.word	0x24012000
 80011ac:	24012218 	.word	0x24012218
 80011b0:	ffff0000 	.word	0xffff0000

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_MspInit+0x30>)
 80011bc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <HAL_MspInit+0x30>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b0b8      	sub	sp, #224	; 0xe0
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	22b8      	movs	r2, #184	; 0xb8
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f007 f9a9 	bl	8008560 <memset>
  if(hadc->Instance==ADC1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <HAL_ADC_MspInit+0xd4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d14d      	bne.n	80012b4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001218:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800121c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001222:	2310      	movs	r3, #16
 8001224:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800122a:	2302      	movs	r3, #2
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800122e:	2302      	movs	r3, #2
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4618      	mov	r0, r3
 800124a:	f003 ff43 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001254:	f7ff fe06 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 800125a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 800126a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 8001278:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800127c:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_ADC_MspInit+0xd8>)
 8001288:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129c:	2303      	movs	r3, #3
 800129e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ac:	4619      	mov	r1, r3
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <HAL_ADC_MspInit+0xdc>)
 80012b0:	f001 fcec 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	37e0      	adds	r7, #224	; 0xe0
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40022000 	.word	0x40022000
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58021400 	.word	0x58021400

080012c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0b8      	sub	sp, #224	; 0xe0
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	22b8      	movs	r2, #184	; 0xb8
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f007 f939 	bl	8008560 <memset>
  if(hi2c->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <HAL_I2C_MspInit+0xbc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d141      	bne.n	800137c <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f8:	2308      	movs	r3, #8
 80012fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4618      	mov	r0, r3
 8001308:	f003 fee4 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001312:	f7ff fda7 	bl	8000e64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 8001318:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 8001328:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001334:	23c0      	movs	r3, #192	; 0xc0
 8001336:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133a:	2312      	movs	r3, #18
 800133c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134c:	2304      	movs	r3, #4
 800134e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001356:	4619      	mov	r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_I2C_MspInit+0xc4>)
 800135a:	f001 fc97 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 8001360:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001364:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 8001366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800136a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_I2C_MspInit+0xc0>)
 8001370:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	37e0      	adds	r7, #224	; 0xe0
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	58024400 	.word	0x58024400
 800138c:	58020400 	.word	0x58020400

08001390 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0bc      	sub	sp, #240	; 0xf0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	22b8      	movs	r2, #184	; 0xb8
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f007 f8d5 	bl	8008560 <memset>
  if(hltdc->Instance==LTDC)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a96      	ldr	r2, [pc, #600]	; (8001614 <HAL_LTDC_MspInit+0x284>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	f040 8125 	bne.w	800160c <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 16;
 80013cc:	2310      	movs	r3, #16
 80013ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80013dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fe70 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 80013fa:	f7ff fd33 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80013fe:	4b86      	ldr	r3, [pc, #536]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001400:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001404:	4a84      	ldr	r2, [pc, #528]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800140e:	4b82      	ldr	r3, [pc, #520]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001410:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800141c:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800141e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001422:	4a7d      	ldr	r2, [pc, #500]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800142c:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800142e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b77      	ldr	r3, [pc, #476]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800143c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001440:	4a75      	ldr	r2, [pc, #468]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800144c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800145a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800146a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001478:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800147c:	4a66      	ldr	r2, [pc, #408]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001486:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001488:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001494:	4b60      	ldr	r3, [pc, #384]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 8001496:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800149a:	4a5f      	ldr	r2, [pc, #380]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80014a4:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_LTDC_MspInit+0x288>)
 80014a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    PD2     ------> LTDC_B7
    PD6     ------> LTDC_B2
    PB8     ------> LTDC_B6
    PE0     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80014b2:	f64d 0371 	movw	r3, #55409	; 0xd871
 80014b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014cc:	230e      	movs	r3, #14
 80014ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d6:	4619      	mov	r1, r3
 80014d8:	4850      	ldr	r0, [pc, #320]	; (800161c <HAL_LTDC_MspInit+0x28c>)
 80014da:	f001 fbd7 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 80014de:	f240 43e3 	movw	r3, #1251	; 0x4e3
 80014e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f8:	230e      	movs	r3, #14
 80014fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001502:	4619      	mov	r1, r3
 8001504:	4846      	ldr	r0, [pc, #280]	; (8001620 <HAL_LTDC_MspInit+0x290>)
 8001506:	f001 fbc1 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800150a:	237c      	movs	r3, #124	; 0x7c
 800150c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001522:	230e      	movs	r3, #14
 8001524:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800152c:	4619      	mov	r1, r3
 800152e:	483d      	ldr	r0, [pc, #244]	; (8001624 <HAL_LTDC_MspInit+0x294>)
 8001530:	f001 fbac 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001534:	2302      	movs	r3, #2
 8001536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800154c:	2309      	movs	r3, #9
 800154e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001556:	4619      	mov	r1, r3
 8001558:	4833      	ldr	r0, [pc, #204]	; (8001628 <HAL_LTDC_MspInit+0x298>)
 800155a:	f001 fb97 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_8;
 800155e:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8001562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001578:	230e      	movs	r3, #14
 800157a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001582:	4619      	mov	r1, r3
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <HAL_LTDC_MspInit+0x298>)
 8001586:	f001 fb81 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_6;
 800158a:	f240 4341 	movw	r3, #1089	; 0x441
 800158e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159e:	2303      	movs	r3, #3
 80015a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015a4:	230e      	movs	r3, #14
 80015a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ae:	4619      	mov	r1, r3
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <HAL_LTDC_MspInit+0x29c>)
 80015b2:	f001 fb6b 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015d0:	2309      	movs	r3, #9
 80015d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015da:	4619      	mov	r1, r3
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <HAL_LTDC_MspInit+0x294>)
 80015de:	f001 fb55 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e2:	2304      	movs	r3, #4
 80015e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015fa:	2309      	movs	r3, #9
 80015fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001604:	4619      	mov	r1, r3
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_LTDC_MspInit+0x29c>)
 8001608:	f001 fb40 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	37f0      	adds	r7, #240	; 0xf0
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	50001000 	.word	0x50001000
 8001618:	58024400 	.word	0x58024400
 800161c:	58021000 	.word	0x58021000
 8001620:	58020800 	.word	0x58020800
 8001624:	58020000 	.word	0x58020000
 8001628:	58020400 	.word	0x58020400
 800162c:	58020c00 	.word	0x58020c00

08001630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0b8      	sub	sp, #224	; 0xe0
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	22b8      	movs	r2, #184	; 0xb8
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f006 ff85 	bl	8008560 <memset>
  if(huart->Instance==USART3)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a25      	ldr	r2, [pc, #148]	; (80016f0 <HAL_UART_MspInit+0xc0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d142      	bne.n	80016e6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fd30 	bl	80050d4 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800167a:	f7ff fbf3 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800167e:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 8001680:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 8001686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800168a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800168e:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 8001690:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 800169e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_UART_MspInit+0xc4>)
 80016ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016d4:	2307      	movs	r3, #7
 80016d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_UART_MspInit+0xc8>)
 80016e2:	f001 fad3 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	37e0      	adds	r7, #224	; 0xe0
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40004800 	.word	0x40004800
 80016f4:	58024400 	.word	0x58024400
 80016f8:	58020c00 	.word	0x58020c00

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001748:	f000 f9f2 	bl	8001b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(I2C1_INT_Pin))
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <EXTI9_5_IRQHandler+0x1e>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <EXTI9_5_IRQHandler+0x30>)
 800176a:	f001 fc58 	bl	800301e <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 800176e:	2080      	movs	r0, #128	; 0x80
 8001770:	f001 fc6f 	bl	8003052 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C1_INT_Pin);
 8001774:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001778:	f001 fc6b 	bl	8003052 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58020400 	.word	0x58020400

08001784 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(B1_Pin))
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d004      	beq.n	80017a2 <EXTI15_10_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <EXTI15_10_IRQHandler+0x2c>)
 800179e:	f001 fc3e 	bl	800301e <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017a6:	f001 fc54 	bl	8003052 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	58020400 	.word	0x58020400

080017b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <SystemInit+0xd0>)
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	4a31      	ldr	r2, [pc, #196]	; (8001884 <SystemInit+0xd0>)
 80017c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <SystemInit+0xd4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d807      	bhi.n	80017e4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <SystemInit+0xd4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 030f 	bic.w	r3, r3, #15
 80017dc:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <SystemInit+0xd4>)
 80017de:	f043 0303 	orr.w	r3, r3, #3
 80017e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <SystemInit+0xd8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <SystemInit+0xd8>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <SystemInit+0xd8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <SystemInit+0xd8>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4924      	ldr	r1, [pc, #144]	; (800188c <SystemInit+0xd8>)
 80017fc:	4b24      	ldr	r3, [pc, #144]	; (8001890 <SystemInit+0xdc>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <SystemInit+0xd4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800180e:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <SystemInit+0xd4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 030f 	bic.w	r3, r3, #15
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <SystemInit+0xd4>)
 8001818:	f043 0303 	orr.w	r3, r3, #3
 800181c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <SystemInit+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <SystemInit+0xd8>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <SystemInit+0xd8>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <SystemInit+0xd8>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <SystemInit+0xe0>)
 8001834:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <SystemInit+0xd8>)
 8001838:	4a17      	ldr	r2, [pc, #92]	; (8001898 <SystemInit+0xe4>)
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <SystemInit+0xd8>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <SystemInit+0xe8>)
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <SystemInit+0xd8>)
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <SystemInit+0xd8>)
 800184a:	4a14      	ldr	r2, [pc, #80]	; (800189c <SystemInit+0xe8>)
 800184c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <SystemInit+0xd8>)
 8001850:	2200      	movs	r2, #0
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <SystemInit+0xd8>)
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <SystemInit+0xe8>)
 8001858:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <SystemInit+0xd8>)
 800185c:	2200      	movs	r2, #0
 800185e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <SystemInit+0xd8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <SystemInit+0xd8>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <SystemInit+0xd8>)
 800186e:	2200      	movs	r2, #0
 8001870:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <SystemInit+0xec>)
 8001874:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001878:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	52002000 	.word	0x52002000
 800188c:	58024400 	.word	0x58024400
 8001890:	eaf6ed7f 	.word	0xeaf6ed7f
 8001894:	02020200 	.word	0x02020200
 8001898:	01ff0000 	.word	0x01ff0000
 800189c:	01010280 	.word	0x01010280
 80018a0:	52004000 	.word	0x52004000

080018a4 <touch_init>:
#include "touch.h"

char touch_init(I2C_HandleTypeDef *phi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af02      	add	r7, sp, #8
 80018aa:	6078      	str	r0, [r7, #4]
	unsigned char buf[3];
	char suc = 1;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x00, buf[1] = 0x00;
 80018b0:	2300      	movs	r3, #0
 80018b2:	733b      	strb	r3, [r7, #12]
 80018b4:	2300      	movs	r3, #0
 80018b6:	737b      	strb	r3, [r7, #13]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 2, HAL_MAX_DELAY) == 0;
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2302      	movs	r3, #2
 80018c4:	2170      	movs	r1, #112	; 0x70
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f001 fc78 	bl	80031bc <HAL_I2C_Master_Transmit>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf0c      	ite	eq
 80018d2:	2301      	moveq	r3, #1
 80018d4:	2300      	movne	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b25a      	sxtb	r2, r3
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4013      	ands	r3, r2
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0xa4, buf[1] = 0x00;
 80018e4:	23a4      	movs	r3, #164	; 0xa4
 80018e6:	733b      	strb	r3, [r7, #12]
 80018e8:	2300      	movs	r3, #0
 80018ea:	737b      	strb	r3, [r7, #13]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 2, HAL_MAX_DELAY) == 0;
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2302      	movs	r3, #2
 80018f8:	2170      	movs	r1, #112	; 0x70
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f001 fc5e 	bl	80031bc <HAL_I2C_Master_Transmit>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	b25a      	sxtb	r2, r3
 800190e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001912:	4013      	ands	r3, r2
 8001914:	b25b      	sxtb	r3, r3
 8001916:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x80, buf[1] = 0x46;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	733b      	strb	r3, [r7, #12]
 800191c:	2346      	movs	r3, #70	; 0x46
 800191e:	737b      	strb	r3, [r7, #13]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 2, HAL_MAX_DELAY) == 0;
 8001920:	f107 020c 	add.w	r2, r7, #12
 8001924:	f04f 33ff 	mov.w	r3, #4294967295
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2302      	movs	r3, #2
 800192c:	2170      	movs	r1, #112	; 0x70
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f001 fc44 	bl	80031bc <HAL_I2C_Master_Transmit>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b25a      	sxtb	r2, r3
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4013      	ands	r3, r2
 8001948:	b25b      	sxtb	r3, r3
 800194a:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x88, buf[1] = 0x0c;
 800194c:	2388      	movs	r3, #136	; 0x88
 800194e:	733b      	strb	r3, [r7, #12]
 8001950:	230c      	movs	r3, #12
 8001952:	737b      	strb	r3, [r7, #13]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 2, HAL_MAX_DELAY) == 0;
 8001954:	f107 020c 	add.w	r2, r7, #12
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2302      	movs	r3, #2
 8001960:	2170      	movs	r1, #112	; 0x70
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f001 fc2a 	bl	80031bc <HAL_I2C_Master_Transmit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	b25a      	sxtb	r2, r3
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4013      	ands	r3, r2
 800197c:	b25b      	sxtb	r3, r3
 800197e:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0xa1, buf[1] = 0x30, buf[2] = 0x03;
 8001980:	23a1      	movs	r3, #161	; 0xa1
 8001982:	733b      	strb	r3, [r7, #12]
 8001984:	2330      	movs	r3, #48	; 0x30
 8001986:	737b      	strb	r3, [r7, #13]
 8001988:	2303      	movs	r3, #3
 800198a:	73bb      	strb	r3, [r7, #14]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 3, HAL_MAX_DELAY) == 0;
 800198c:	f107 020c 	add.w	r2, r7, #12
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2303      	movs	r3, #3
 8001998:	2170      	movs	r1, #112	; 0x70
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f001 fc0e 	bl	80031bc <HAL_I2C_Master_Transmit>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	bf0c      	ite	eq
 80019a6:	2301      	moveq	r3, #1
 80019a8:	2300      	movne	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4013      	ands	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	73fb      	strb	r3, [r7, #15]
	buf[0] = 0x02, buf[1] = 0x05;
 80019b8:	2302      	movs	r3, #2
 80019ba:	733b      	strb	r3, [r7, #12]
 80019bc:	2305      	movs	r3, #5
 80019be:	737b      	strb	r3, [r7, #13]
	suc &= HAL_I2C_Master_Transmit(phi2c, 0x70, buf, 2, HAL_MAX_DELAY) == 0;
 80019c0:	f107 020c 	add.w	r2, r7, #12
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2302      	movs	r3, #2
 80019cc:	2170      	movs	r1, #112	; 0x70
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f001 fbf4 	bl	80031bc <HAL_I2C_Master_Transmit>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	b25a      	sxtb	r2, r3
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4013      	ands	r3, r2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	73fb      	strb	r3, [r7, #15]
	return suc;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019fc:	f7ff feda 	bl	80017b4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a00:	480c      	ldr	r0, [pc, #48]	; (8001a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a02:	490d      	ldr	r1, [pc, #52]	; (8001a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a08:	e002      	b.n	8001a10 <LoopCopyDataInit>

08001a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0e:	3304      	adds	r3, #4

08001a10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a14:	d3f9      	bcc.n	8001a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a18:	4c0a      	ldr	r4, [pc, #40]	; (8001a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a1c:	e001      	b.n	8001a22 <LoopFillZerobss>

08001a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a20:	3204      	adds	r2, #4

08001a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a24:	d3fb      	bcc.n	8001a1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f006 fd77 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7fe fde1 	bl	80005f0 <main>
  bx  lr
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a38:	24012014 	.word	0x24012014
  ldr r2, =_sidata
 8001a3c:	080085e0 	.word	0x080085e0
  ldr r2, =_sbss
 8001a40:	24012014 	.word	0x24012014
  ldr r4, =_ebss
 8001a44:	240fc81c 	.word	0x240fc81c

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a52:	2003      	movs	r0, #3
 8001a54:	f001 f8da 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a58:	f003 f966 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_Init+0x68>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	4913      	ldr	r1, [pc, #76]	; (8001ab8 <HAL_Init+0x6c>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_Init+0x68>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_Init+0x6c>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_Init+0x70>)
 8001a8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a90:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <HAL_Init+0x74>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a96:	2000      	movs	r0, #0
 8001a98:	f000 f814 	bl	8001ac4 <HAL_InitTick>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e002      	b.n	8001aac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa6:	f7ff fb85 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	58024400 	.word	0x58024400
 8001ab8:	08008598 	.word	0x08008598
 8001abc:	24012008 	.word	0x24012008
 8001ac0:	24012004 	.word	0x24012004

08001ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_InitTick+0x60>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e021      	b.n	8001b1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_InitTick+0x64>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_InitTick+0x60>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 f8bf 	bl	8002c72 <HAL_SYSTICK_Config>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00e      	b.n	8001b1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b0f      	cmp	r3, #15
 8001b02:	d80a      	bhi.n	8001b1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0c:	f001 f889 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b10:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <HAL_InitTick+0x68>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e000      	b.n	8001b1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	24012010 	.word	0x24012010
 8001b28:	24012004 	.word	0x24012004
 8001b2c:	2401200c 	.word	0x2401200c

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	24012010 	.word	0x24012010
 8001b54:	240fc818 	.word	0x240fc818

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	240fc818 	.word	0x240fc818

08001b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff ffee 	bl	8001b58 <HAL_GetTick>
 8001b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d005      	beq.n	8001b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_Delay+0x44>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b96:	bf00      	nop
 8001b98:	f7ff ffde 	bl	8001b58 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d8f7      	bhi.n	8001b98 <HAL_Delay+0x28>
  {
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	24012010 	.word	0x24012010

08001bb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3360      	adds	r3, #96	; 0x60
 8001c32:	461a      	mov	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c54:	bf00      	nop
 8001c56:	371c      	adds	r7, #28
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	431a      	orrs	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	611a      	str	r2, [r3, #16]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3330      	adds	r3, #48	; 0x30
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	4413      	add	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	211f      	movs	r1, #31
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 011f 	and.w	r1, r3, #31
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3314      	adds	r3, #20
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	4413      	add	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	0d1b      	lsrs	r3, r3, #20
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	2107      	movs	r1, #7
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	401a      	ands	r2, r3
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	0d1b      	lsrs	r3, r3, #20
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0318 	and.w	r3, r3, #24
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d9c:	40d9      	lsrs	r1, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	400b      	ands	r3, r1
 8001da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	000fffff 	.word	0x000fffff

08001dc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6093      	str	r3, [r2, #8]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	5fffffc0 	.word	0x5fffffc0

08001de4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	6fffffc0 	.word	0x6fffffc0

08001e34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <LL_ADC_IsEnabled+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_ADC_IsEnabled+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d101      	bne.n	8001e9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d101      	bne.n	8001ec0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e138      	b.n	800215c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d109      	bne.n	8001f0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff f975 	bl	80011e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff67 	bl	8001de4 <LL_ADC_IsDeepPowerDownEnabled>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d004      	beq.n	8001f26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff4d 	bl	8001dc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff82 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d114      	bne.n	8001f60 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff66 	bl	8001e0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f40:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_ADC_Init+0x294>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	4a88      	ldr	r2, [pc, #544]	; (8002168 <HAL_ADC_Init+0x298>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	099b      	lsrs	r3, r3, #6
 8001f4e:	3301      	adds	r3, #1
 8001f50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f52:	e002      	b.n	8001f5a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f9      	bne.n	8001f54 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff65 	bl	8001e34 <LL_ADC_IsInternalRegulatorEnabled>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10d      	bne.n	8001f8c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0210 	orr.w	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff76 	bl	8001e82 <LL_ADC_REG_IsConversionOngoing>
 8001f96:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f040 80d2 	bne.w	800214a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f040 80ce 	bne.w	800214a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fb6:	f043 0202 	orr.w	r2, r3, #2
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff4a 	bl	8001e5c <LL_ADC_IsEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d110      	bne.n	8001ff0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fce:	4867      	ldr	r0, [pc, #412]	; (800216c <HAL_ADC_Init+0x29c>)
 8001fd0:	f7ff ff44 	bl	8001e5c <LL_ADC_IsEnabled>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4866      	ldr	r0, [pc, #408]	; (8002170 <HAL_ADC_Init+0x2a0>)
 8001fd8:	f7ff ff40 	bl	8001e5c <LL_ADC_IsEnabled>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4862      	ldr	r0, [pc, #392]	; (8002174 <HAL_ADC_Init+0x2a4>)
 8001fec:	f7ff fde4 	bl	8001bb8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	7d5b      	ldrb	r3, [r3, #21]
 8001ff4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ffa:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002000:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7f1b      	ldrb	r3, [r3, #28]
 8002006:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7f1b      	ldrb	r3, [r3, #28]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d106      	bne.n	8002022 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	3b01      	subs	r3, #1
 800201a:	045b      	lsls	r3, r3, #17
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_ADC_Init+0x2a8>)
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	69b9      	ldr	r1, [r7, #24]
 800204e:	430b      	orrs	r3, r1
 8002050:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff13 	bl	8001e82 <LL_ADC_REG_IsConversionOngoing>
 800205c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff20 	bl	8001ea8 <LL_ADC_INJ_IsConversionOngoing>
 8002068:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d14a      	bne.n	8002106 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d147      	bne.n	8002106 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7d1b      	ldrb	r3, [r3, #20]
 800207a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4b3c      	ldr	r3, [pc, #240]	; (800217c <HAL_ADC_Init+0x2ac>)
 800208c:	4013      	ands	r3, r2
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	69b9      	ldr	r1, [r7, #24]
 8002094:	430b      	orrs	r3, r1
 8002096:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d11b      	bne.n	80020da <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_ADC_Init+0x2b0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020b6:	3a01      	subs	r2, #1
 80020b8:	0411      	lsls	r1, r2, #16
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80020c4:	4311      	orrs	r1, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ca:	430a      	orrs	r2, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	611a      	str	r2, [r3, #16]
 80020d8:	e007      	b.n	80020ea <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fb25 	bl	8002750 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d10c      	bne.n	8002128 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f023 010f 	bic.w	r1, r3, #15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
 8002126:	e007      	b.n	8002138 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 020f 	bic.w	r2, r2, #15
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213c:	f023 0303 	bic.w	r3, r3, #3
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	; 0x54
 8002148:	e007      	b.n	800215a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0210 	orr.w	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800215a:	7ffb      	ldrb	r3, [r7, #31]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3724      	adds	r7, #36	; 0x24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}
 8002164:	24012004 	.word	0x24012004
 8002168:	053e2d63 	.word	0x053e2d63
 800216c:	40022000 	.word	0x40022000
 8002170:	40022100 	.word	0x40022100
 8002174:	40022300 	.word	0x40022300
 8002178:	fff0c003 	.word	0xfff0c003
 800217c:	ffffbffc 	.word	0xffffbffc
 8002180:	fc00f81e 	.word	0xfc00f81e

08002184 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b0a1      	sub	sp, #132	; 0x84
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a9a      	ldr	r2, [pc, #616]	; (8002408 <HAL_ADC_ConfigChannel+0x284>)
 800219e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x2a>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e2bc      	b.n	8002728 <HAL_ADC_ConfigChannel+0x5a4>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe61 	bl	8001e82 <LL_ADC_REG_IsConversionOngoing>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 82a1 	bne.w	800270a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d108      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x62>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	2201      	movs	r2, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	e016      	b.n	8002214 <HAL_ADC_ConfigChannel+0x90>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80021fe:	2320      	movs	r3, #32
 8002200:	e003      	b.n	800220a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2201      	movs	r2, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	69d1      	ldr	r1, [r2, #28]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	430b      	orrs	r3, r1
 8002220:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f7ff fd4a 	bl	8001cc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fe22 	bl	8001e82 <LL_ADC_REG_IsConversionOngoing>
 800223e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fe2f 	bl	8001ea8 <LL_ADC_INJ_IsConversionOngoing>
 800224a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800224c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800224e:	2b00      	cmp	r3, #0
 8002250:	f040 80a0 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 809c 	bne.w	8002394 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	461a      	mov	r2, r3
 800226a:	f7ff fd59 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x110>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	e00a      	b.n	80022aa <HAL_ADC_ConfigChannel+0x126>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d027      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6919      	ldr	r1, [r3, #16]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022c2:	f7ff fcad 	bl	8001c20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6919      	ldr	r1, [r3, #16]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7e5b      	ldrb	r3, [r3, #25]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x158>
 80022d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80022da:	e000      	b.n	80022de <HAL_ADC_ConfigChannel+0x15a>
 80022dc:	2300      	movs	r3, #0
 80022de:	461a      	mov	r2, r3
 80022e0:	f7ff fcd7 	bl	8001c92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6919      	ldr	r1, [r3, #16]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7e1b      	ldrb	r3, [r3, #24]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d102      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x176>
 80022f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f8:	e000      	b.n	80022fc <HAL_ADC_ConfigChannel+0x178>
 80022fa:	2300      	movs	r3, #0
 80022fc:	461a      	mov	r2, r3
 80022fe:	f7ff fcaf 	bl	8001c60 <LL_ADC_SetDataRightShift>
 8002302:	e047      	b.n	8002394 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002326:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800232e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	069b      	lsls	r3, r3, #26
 8002338:	429a      	cmp	r2, r3
 800233a:	d107      	bne.n	800234c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800234a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	429a      	cmp	r2, r3
 800235e:	d107      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800236e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002376:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	069b      	lsls	r3, r3, #26
 8002380:	429a      	cmp	r2, r3
 8002382:	d107      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002392:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fd5f 	bl	8001e5c <LL_ADC_IsEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81bb 	bne.w	800271c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fce0 	bl	8001d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_ADC_ConfigChannel+0x284>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	f040 8130 	bne.w	8002624 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x268>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e9b      	lsrs	r3, r3, #26
 80023da:	3301      	adds	r3, #1
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e01b      	b.n	8002424 <HAL_ADC_ConfigChannel+0x2a0>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80023fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80023fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e005      	b.n	8002414 <HAL_ADC_ConfigChannel+0x290>
 8002408:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800240c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	3301      	adds	r3, #1
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	2b09      	cmp	r3, #9
 800241c:	bf94      	ite	ls
 800241e:	2301      	movls	r3, #1
 8002420:	2300      	movhi	r3, #0
 8002422:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002424:	2b00      	cmp	r3, #0
 8002426:	d079      	beq.n	800251c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002430:	2b00      	cmp	r3, #0
 8002432:	d107      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x2c0>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0e9b      	lsrs	r3, r3, #26
 800243a:	3301      	adds	r3, #1
 800243c:	069b      	lsls	r3, r3, #26
 800243e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002442:	e015      	b.n	8002470 <HAL_ADC_ConfigChannel+0x2ec>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002454:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8002460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	069b      	lsls	r3, r3, #26
 800246c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x30c>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	3301      	adds	r3, #1
 8002484:	f003 031f 	and.w	r3, r3, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f303 	lsl.w	r3, r1, r3
 800248e:	e017      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x33c>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80024a8:	2320      	movs	r3, #32
 80024aa:	e003      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80024ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	ea42 0103 	orr.w	r1, r2, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x362>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	051b      	lsls	r3, r3, #20
 80024e4:	e018      	b.n	8002518 <HAL_ADC_ConfigChannel+0x394>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e003      	b.n	800250a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002518:	430b      	orrs	r3, r1
 800251a:	e07e      	b.n	800261a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x3b4>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	069b      	lsls	r3, r3, #26
 8002532:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002536:	e015      	b.n	8002564 <HAL_ADC_ConfigChannel+0x3e0>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	069b      	lsls	r3, r3, #26
 8002560:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256c:	2b00      	cmp	r3, #0
 800256e:	d109      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x400>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	f003 031f 	and.w	r3, r3, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	e017      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x430>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	61bb      	str	r3, [r7, #24]
  return result;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 800259c:	2320      	movs	r3, #32
 800259e:	e003      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	ea42 0103 	orr.w	r1, r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10d      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x45c>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4613      	mov	r3, r2
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	3b1e      	subs	r3, #30
 80025d8:	051b      	lsls	r3, r3, #20
 80025da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025de:	e01b      	b.n	8002618 <HAL_ADC_ConfigChannel+0x494>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	60fb      	str	r3, [r7, #12]
  return result;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	f003 021f 	and.w	r2, r3, #31
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	3b1e      	subs	r3, #30
 8002612:	051b      	lsls	r3, r3, #20
 8002614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002618:	430b      	orrs	r3, r1
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	4619      	mov	r1, r3
 8002620:	f7ff fb7e 	bl	8001d20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	da77      	bge.n	800271c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800262c:	4840      	ldr	r0, [pc, #256]	; (8002730 <HAL_ADC_ConfigChannel+0x5ac>)
 800262e:	f7ff fae9 	bl	8001c04 <LL_ADC_GetCommonPathInternalCh>
 8002632:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002634:	483f      	ldr	r0, [pc, #252]	; (8002734 <HAL_ADC_ConfigChannel+0x5b0>)
 8002636:	f7ff fc11 	bl	8001e5c <LL_ADC_IsEnabled>
 800263a:	4604      	mov	r4, r0
 800263c:	483e      	ldr	r0, [pc, #248]	; (8002738 <HAL_ADC_ConfigChannel+0x5b4>)
 800263e:	f7ff fc0d 	bl	8001e5c <LL_ADC_IsEnabled>
 8002642:	4603      	mov	r3, r0
 8002644:	4323      	orrs	r3, r4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d155      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3b      	ldr	r2, [pc, #236]	; (800273c <HAL_ADC_ConfigChannel+0x5b8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d122      	bne.n	800269a <HAL_ADC_ConfigChannel+0x516>
 8002654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002656:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d11d      	bne.n	800269a <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <HAL_ADC_ConfigChannel+0x5b4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d159      	bne.n	800271c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800266e:	4619      	mov	r1, r3
 8002670:	482f      	ldr	r0, [pc, #188]	; (8002730 <HAL_ADC_ConfigChannel+0x5ac>)
 8002672:	f7ff fab4 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_ADC_ConfigChannel+0x5bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_ADC_ConfigChannel+0x5c0>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	099b      	lsrs	r3, r3, #6
 8002684:	3301      	adds	r3, #1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800268a:	e002      	b.n	8002692 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3b01      	subs	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1f9      	bne.n	800268c <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002698:	e040      	b.n	800271c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <HAL_ADC_ConfigChannel+0x5c4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d111      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x544>
 80026a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_ADC_ConfigChannel+0x5b4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d131      	bne.n	800271c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80026b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026be:	4619      	mov	r1, r3
 80026c0:	481b      	ldr	r0, [pc, #108]	; (8002730 <HAL_ADC_ConfigChannel+0x5ac>)
 80026c2:	f7ff fa8c 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c6:	e029      	b.n	800271c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_ADC_ConfigChannel+0x5c8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d124      	bne.n	800271c <HAL_ADC_ConfigChannel+0x598>
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11f      	bne.n	800271c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_ADC_ConfigChannel+0x5b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d11a      	bne.n	800271c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80026e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ec:	4619      	mov	r1, r3
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <HAL_ADC_ConfigChannel+0x5ac>)
 80026f0:	f7ff fa75 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
 80026f4:	e012      	b.n	800271c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f043 0220 	orr.w	r2, r3, #32
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002708:	e008      	b.n	800271c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002724:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002728:	4618      	mov	r0, r3
 800272a:	3784      	adds	r7, #132	; 0x84
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	40022300 	.word	0x40022300
 8002734:	40022000 	.word	0x40022000
 8002738:	40022100 	.word	0x40022100
 800273c:	cb840000 	.word	0xcb840000
 8002740:	24012004 	.word	0x24012004
 8002744:	053e2d63 	.word	0x053e2d63
 8002748:	bac04000 	.word	0xbac04000
 800274c:	cfb80000 	.word	0xcfb80000

08002750 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002758:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <ADC_ConfigureBoostMode+0x188>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002764:	f002 fc5a 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8002768:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002772:	d010      	beq.n	8002796 <ADC_ConfigureBoostMode+0x46>
 8002774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002778:	d871      	bhi.n	800285e <ADC_ConfigureBoostMode+0x10e>
 800277a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277e:	d002      	beq.n	8002786 <ADC_ConfigureBoostMode+0x36>
 8002780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002784:	d16b      	bne.n	800285e <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002792:	60fb      	str	r3, [r7, #12]
        break;
 8002794:	e066      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	60fb      	str	r3, [r7, #12]
        break;
 800279c:	e062      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800279e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027a2:	f003 fba3 	bl	8005eec <HAL_RCCEx_GetPeriphCLKFreq>
 80027a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027b0:	d051      	beq.n	8002856 <ADC_ConfigureBoostMode+0x106>
 80027b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80027b6:	d854      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027bc:	d047      	beq.n	800284e <ADC_ConfigureBoostMode+0xfe>
 80027be:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80027c2:	d84e      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027c8:	d03d      	beq.n	8002846 <ADC_ConfigureBoostMode+0xf6>
 80027ca:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80027ce:	d848      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d4:	d033      	beq.n	800283e <ADC_ConfigureBoostMode+0xee>
 80027d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027da:	d842      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80027e0:	d029      	beq.n	8002836 <ADC_ConfigureBoostMode+0xe6>
 80027e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80027e6:	d83c      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027ec:	d01a      	beq.n	8002824 <ADC_ConfigureBoostMode+0xd4>
 80027ee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80027f2:	d836      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 80027f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027f8:	d014      	beq.n	8002824 <ADC_ConfigureBoostMode+0xd4>
 80027fa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80027fe:	d830      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 8002800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002804:	d00e      	beq.n	8002824 <ADC_ConfigureBoostMode+0xd4>
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280a:	d82a      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 800280c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002810:	d008      	beq.n	8002824 <ADC_ConfigureBoostMode+0xd4>
 8002812:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002816:	d824      	bhi.n	8002862 <ADC_ConfigureBoostMode+0x112>
 8002818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800281c:	d002      	beq.n	8002824 <ADC_ConfigureBoostMode+0xd4>
 800281e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002822:	d11e      	bne.n	8002862 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	0c9b      	lsrs	r3, r3, #18
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
        break;
 8002834:	e016      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
        break;
 800283c:	e012      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	095b      	lsrs	r3, r3, #5
 8002842:	60fb      	str	r3, [r7, #12]
        break;
 8002844:	e00e      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	60fb      	str	r3, [r7, #12]
        break;
 800284c:	e00a      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	09db      	lsrs	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]
        break;
 8002854:	e006      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	60fb      	str	r3, [r7, #12]
        break;
 800285c:	e002      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
        break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 8002862:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <ADC_ConfigureBoostMode+0x18c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d808      	bhi.n	8002884 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002880:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002882:	e025      	b.n	80028d0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <ADC_ConfigureBoostMode+0x190>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d80a      	bhi.n	80028a2 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289e:	609a      	str	r2, [r3, #8]
}
 80028a0:	e016      	b.n	80028d0 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <ADC_ConfigureBoostMode+0x194>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d80a      	bhi.n	80028c0 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028bc:	609a      	str	r2, [r3, #8]
}
 80028be:	e007      	b.n	80028d0 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80028ce:	609a      	str	r2, [r3, #8]
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40022300 	.word	0x40022300
 80028dc:	005f5e10 	.word	0x005f5e10
 80028e0:	00bebc20 	.word	0x00bebc20
 80028e4:	017d7840 	.word	0x017d7840

080028e8 <LL_ADC_IsEnabled>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <LL_ADC_IsEnabled+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_ADC_IsEnabled+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_ADC_REG_IsConversionOngoing>:
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d101      	bne.n	8002926 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b09f      	sub	sp, #124	; 0x7c
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800294a:	2b01      	cmp	r3, #1
 800294c:	d101      	bne.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800294e:	2302      	movs	r3, #2
 8002950:	e080      	b.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800295e:	2300      	movs	r3, #0
 8002960:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3d      	ldr	r2, [pc, #244]	; (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d102      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800296c:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	e001      	b.n	8002976 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e05f      	b.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ffb9 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 800299c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ffb3 	bl	800290e <LL_ADC_REG_IsConversionOngoing>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d141      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d13e      	bne.n	8002a32 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029b4:	4b2b      	ldr	r3, [pc, #172]	; (8002a64 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80029b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d020      	beq.n	8002a02 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029d2:	4822      	ldr	r0, [pc, #136]	; (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029d4:	f7ff ff88 	bl	80028e8 <LL_ADC_IsEnabled>
 80029d8:	4604      	mov	r4, r0
 80029da:	4821      	ldr	r0, [pc, #132]	; (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029dc:	f7ff ff84 	bl	80028e8 <LL_ADC_IsEnabled>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4323      	orrs	r3, r4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d12e      	bne.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80029e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	6811      	ldr	r1, [r2, #0]
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	431a      	orrs	r2, r3
 80029fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a00:	e021      	b.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a0e:	4813      	ldr	r0, [pc, #76]	; (8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a10:	f7ff ff6a 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a14:	4604      	mov	r4, r0
 8002a16:	4812      	ldr	r0, [pc, #72]	; (8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a18:	f7ff ff66 	bl	80028e8 <LL_ADC_IsEnabled>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d110      	bne.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a2e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a30:	e009      	b.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f043 0220 	orr.w	r2, r3, #32
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002a44:	e000      	b.n	8002a48 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a46:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	377c      	adds	r7, #124	; 0x7c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd90      	pop	{r4, r7, pc}
 8002a5c:	40022000 	.word	0x40022000
 8002a60:	40022100 	.word	0x40022100
 8002a64:	40022300 	.word	0x40022300
 8002a68:	fffff0e0 	.word	0xfffff0e0

08002a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f003 0307 	and.w	r3, r3, #7
 8002a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <__NVIC_SetPriorityGrouping+0x40>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <__NVIC_SetPriorityGrouping+0x40>)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	e000ed00 	.word	0xe000ed00
 8002ab0:	05fa0000 	.word	0x05fa0000

08002ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <__NVIC_GetPriorityGrouping+0x18>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	f003 0307 	and.w	r3, r3, #7
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	db0b      	blt.n	8002afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	4907      	ldr	r1, [pc, #28]	; (8002b08 <__NVIC_EnableIRQ+0x38>)
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	2001      	movs	r0, #1
 8002af2:	fa00 f202 	lsl.w	r2, r0, r2
 8002af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000e100 	.word	0xe000e100

08002b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	6039      	str	r1, [r7, #0]
 8002b16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	db0a      	blt.n	8002b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <__NVIC_SetPriority+0x4c>)
 8002b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2a:	0112      	lsls	r2, r2, #4
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	440b      	add	r3, r1
 8002b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b34:	e00a      	b.n	8002b4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4908      	ldr	r1, [pc, #32]	; (8002b5c <__NVIC_SetPriority+0x50>)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3b04      	subs	r3, #4
 8002b44:	0112      	lsls	r2, r2, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	440b      	add	r3, r1
 8002b4a:	761a      	strb	r2, [r3, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f1c3 0307 	rsb	r3, r3, #7
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	bf28      	it	cs
 8002b7e:	2304      	movcs	r3, #4
 8002b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	3304      	adds	r3, #4
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d902      	bls.n	8002b90 <NVIC_EncodePriority+0x30>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3b03      	subs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <NVIC_EncodePriority+0x32>
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	f04f 32ff 	mov.w	r2, #4294967295
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb2:	43d9      	mvns	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb8:	4313      	orrs	r3, r2
         );
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff8e 	bl	8002b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff29 	bl	8002a6c <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c30:	f7ff ff40 	bl	8002ab4 <__NVIC_GetPriorityGrouping>
 8002c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	6978      	ldr	r0, [r7, #20]
 8002c3c:	f7ff ff90 	bl	8002b60 <NVIC_EncodePriority>
 8002c40:	4602      	mov	r2, r0
 8002c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ff5f 	bl	8002b0c <__NVIC_SetPriority>
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b082      	sub	sp, #8
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff33 	bl	8002ad0 <__NVIC_EnableIRQ>
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ffa4 	bl	8002bc8 <SysTick_Config>
 8002c80:	4603      	mov	r3, r0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_GPIO_Init+0x234>)
 8002c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c9e:	e194      	b.n	8002fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8186 	beq.w	8002fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d005      	beq.n	8002cd0 <HAL_GPIO_Init+0x44>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d130      	bne.n	8002d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d06:	2201      	movs	r2, #1
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0201 	and.w	r2, r3, #1
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d017      	beq.n	8002d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d123      	bne.n	8002dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80e0 	beq.w	8002fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e06:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e0a:	4a2e      	ldr	r2, [pc, #184]	; (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <HAL_GPIO_Init+0x23c>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a20      	ldr	r2, [pc, #128]	; (8002ecc <HAL_GPIO_Init+0x240>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d052      	beq.n	8002ef4 <HAL_GPIO_Init+0x268>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_GPIO_Init+0x244>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_GPIO_Init+0x22e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_GPIO_Init+0x248>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_GPIO_Init+0x22a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_GPIO_Init+0x24c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d025      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_GPIO_Init+0x250>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01f      	beq.n	8002eae <HAL_GPIO_Init+0x222>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_GPIO_Init+0x254>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_Init+0x21e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <HAL_GPIO_Init+0x258>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <HAL_GPIO_Init+0x25c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x216>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_GPIO_Init+0x260>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x212>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_GPIO_Init+0x264>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x20e>
 8002e96:	2309      	movs	r3, #9
 8002e98:	e02d      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002e9a:	230a      	movs	r3, #10
 8002e9c:	e02b      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	e029      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	e027      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e025      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eaa:	2305      	movs	r3, #5
 8002eac:	e023      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e021      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e01f      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e01d      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e01b      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ebe:	bf00      	nop
 8002ec0:	58000080 	.word	0x58000080
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	58000400 	.word	0x58000400
 8002ecc:	58020000 	.word	0x58020000
 8002ed0:	58020400 	.word	0x58020400
 8002ed4:	58020800 	.word	0x58020800
 8002ed8:	58020c00 	.word	0x58020c00
 8002edc:	58021000 	.word	0x58021000
 8002ee0:	58021400 	.word	0x58021400
 8002ee4:	58021800 	.word	0x58021800
 8002ee8:	58021c00 	.word	0x58021c00
 8002eec:	58022000 	.word	0x58022000
 8002ef0:	58022400 	.word	0x58022400
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f002 0203 	and.w	r2, r2, #3
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	4093      	lsls	r3, r2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f06:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <HAL_GPIO_Init+0x35c>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f ae63 	bne.w	8002ca0 <HAL_GPIO_Init+0x14>
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	3724      	adds	r7, #36	; 0x24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	58000400 	.word	0x58000400

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003030:	887a      	ldrh	r2, [r7, #2]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	041a      	lsls	r2, r3, #16
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	43d9      	mvns	r1, r3
 800303c:	887b      	ldrh	r3, [r7, #2]
 800303e:	400b      	ands	r3, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	4603      	mov	r3, r0
 800305a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003064:	88fb      	ldrh	r3, [r7, #6]
 8003066:	4013      	ands	r3, r2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f804 	bl	8003086 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe f900 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	; 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d107      	bne.n	8003116 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e006      	b.n	8003124 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003122:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d104      	bne.n	8003136 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003134:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_I2C_Init+0x11c>)
 8003142:	430b      	orrs	r3, r1
 8003144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1a      	ldr	r2, [r3, #32]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	02008000 	.word	0x02008000

080031bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	817b      	strh	r3, [r7, #10]
 80031cc:	4613      	mov	r3, r2
 80031ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b20      	cmp	r3, #32
 80031da:	f040 80da 	bne.w	8003392 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x30>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e0d3      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031f4:	f7fe fcb0 	bl	8001b58 <HAL_GetTick>
 80031f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2319      	movs	r3, #25
 8003200:	2201      	movs	r2, #1
 8003202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9e6 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0be      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2221      	movs	r2, #33	; 0x21
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2210      	movs	r2, #16
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	893a      	ldrh	r2, [r7, #8]
 8003236:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003242:	b29b      	uxth	r3, r3
 8003244:	2bff      	cmp	r3, #255	; 0xff
 8003246:	d90e      	bls.n	8003266 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	b2da      	uxtb	r2, r3
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	4b51      	ldr	r3, [pc, #324]	; (800339c <HAL_I2C_Master_Transmit+0x1e0>)
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fbdc 	bl	8003a1c <I2C_TransferConfig>
 8003264:	e06c      	b.n	8003340 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	b2da      	uxtb	r2, r3
 8003276:	8979      	ldrh	r1, [r7, #10]
 8003278:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_I2C_Master_Transmit+0x1e0>)
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 fbcb 	bl	8003a1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003286:	e05b      	b.n	8003340 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9e3 	bl	8003658 <I2C_WaitOnTXISFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e07b      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d034      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x184>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d130      	bne.n	8003340 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f975 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e04d      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2bff      	cmp	r3, #255	; 0xff
 8003300:	d90e      	bls.n	8003320 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330c:	b2da      	uxtb	r2, r3
 800330e:	8979      	ldrh	r1, [r7, #10]
 8003310:	2300      	movs	r3, #0
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fb7f 	bl	8003a1c <I2C_TransferConfig>
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332e:	b2da      	uxtb	r2, r3
 8003330:	8979      	ldrh	r1, [r7, #10]
 8003332:	2300      	movs	r3, #0
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fb6e 	bl	8003a1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d19e      	bne.n	8003288 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9c2 	bl	80036d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e01a      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003372:	400b      	ands	r3, r1
 8003374:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	80002000 	.word	0x80002000
 80033a0:	fe00e800 	.word	0xfe00e800

080033a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af02      	add	r7, sp, #8
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	461a      	mov	r2, r3
 80033b0:	460b      	mov	r3, r1
 80033b2:	817b      	strh	r3, [r7, #10]
 80033b4:	4613      	mov	r3, r2
 80033b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	f040 80db 	bne.w	800357c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_Master_Receive+0x30>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0d4      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe fbbc 	bl	8001b58 <HAL_GetTick>
 80033e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	2319      	movs	r3, #25
 80033e8:	2201      	movs	r2, #1
 80033ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 f8f2 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0bf      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2222      	movs	r2, #34	; 0x22
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2210      	movs	r2, #16
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	893a      	ldrh	r2, [r7, #8]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342a:	b29b      	uxth	r3, r3
 800342c:	2bff      	cmp	r3, #255	; 0xff
 800342e:	d90e      	bls.n	800344e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	22ff      	movs	r2, #255	; 0xff
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	b2da      	uxtb	r2, r3
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	4b52      	ldr	r3, [pc, #328]	; (8003588 <HAL_I2C_Master_Receive+0x1e4>)
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fae8 	bl	8003a1c <I2C_TransferConfig>
 800344c:	e06d      	b.n	800352a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8979      	ldrh	r1, [r7, #10]
 8003460:	4b49      	ldr	r3, [pc, #292]	; (8003588 <HAL_I2C_Master_Receive+0x1e4>)
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 fad7 	bl	8003a1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800346e:	e05c      	b.n	800352a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f96b 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e07c      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d034      	beq.n	800352a <HAL_I2C_Master_Receive+0x186>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d130      	bne.n	800352a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2200      	movs	r2, #0
 80034d0:	2180      	movs	r1, #128	; 0x80
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f880 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e04d      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2bff      	cmp	r3, #255	; 0xff
 80034ea:	d90e      	bls.n	800350a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	8979      	ldrh	r1, [r7, #10]
 80034fa:	2300      	movs	r3, #0
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 fa8a 	bl	8003a1c <I2C_TransferConfig>
 8003508:	e00f      	b.n	800352a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fa79 	bl	8003a1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d19d      	bne.n	8003470 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	6a39      	ldr	r1, [r7, #32]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f8cd 	bl	80036d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e01a      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2220      	movs	r2, #32
 800354e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_I2C_Master_Receive+0x1e8>)
 800355c:	400b      	ands	r3, r1
 800355e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003578:	2300      	movs	r3, #0
 800357a:	e000      	b.n	800357e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800357c:	2302      	movs	r3, #2
  }
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	80002400 	.word	0x80002400
 800358c:	fe00e800 	.word	0xfe00e800

08003590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d103      	bne.n	80035ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	619a      	str	r2, [r3, #24]
  }
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	e022      	b.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d01e      	beq.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7fe fab1 	bl	8001b58 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d113      	bne.n	8003630 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e00f      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	429a      	cmp	r2, r3
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d0cd      	beq.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003664:	e02c      	b.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f8ea 	bl	8003844 <I2C_IsErrorOccurred>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e02a      	b.n	80036d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d01e      	beq.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe fa69 	bl	8001b58 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d113      	bne.n	80036c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	f043 0220 	orr.w	r2, r3, #32
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e007      	b.n	80036d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d1cb      	bne.n	8003666 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e4:	e028      	b.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8aa 	bl	8003844 <I2C_IsErrorOccurred>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e026      	b.n	8003748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fa:	f7fe fa2d 	bl	8001b58 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d302      	bcc.n	8003710 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d113      	bne.n	8003738 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b20      	cmp	r3, #32
 8003744:	d1cf      	bne.n	80036e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375c:	e064      	b.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f86e 	bl	8003844 <I2C_IsErrorOccurred>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e062      	b.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b20      	cmp	r3, #32
 800377e:	d138      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d105      	bne.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	e04e      	b.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b10      	cmp	r3, #16
 80037a6:	d107      	bne.n	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2204      	movs	r2, #4
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
 80037b6:	e002      	b.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2220      	movs	r2, #32
 80037c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80037d2:	400b      	ands	r3, r1
 80037d4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fe f9b1 	bl	8001b58 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10f      	bne.n	8003828 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e007      	b.n	8003838 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d193      	bne.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	fe00e800 	.word	0xfe00e800

08003844 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d075      	beq.n	800395c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2210      	movs	r2, #16
 8003876:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003878:	e056      	b.n	8003928 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d052      	beq.n	8003928 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003882:	f7fe f969 	bl	8001b58 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	429a      	cmp	r2, r3
 8003890:	d302      	bcc.n	8003898 <I2C_IsErrorOccurred+0x54>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d147      	bne.n	8003928 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ba:	d12e      	bne.n	800391a <I2C_IsErrorOccurred+0xd6>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038c2:	d02a      	beq.n	800391a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d027      	beq.n	800391a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038da:	f7fe f93d 	bl	8001b58 <HAL_GetTick>
 80038de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e0:	e01b      	b.n	800391a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038e2:	f7fe f939 	bl	8001b58 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b19      	cmp	r3, #25
 80038ee:	d914      	bls.n	800391a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	2b20      	cmp	r3, #32
 8003926:	d1dc      	bne.n	80038e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b20      	cmp	r3, #32
 8003934:	d003      	beq.n	800393e <I2C_IsErrorOccurred+0xfa>
 8003936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800393a:	2b00      	cmp	r3, #0
 800393c:	d09d      	beq.n	800387a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800393e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2220      	movs	r2, #32
 800394c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00b      	beq.n	8003986 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f7ff fddc 	bl	8003590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b0d      	ldr	r3, [pc, #52]	; (8003a18 <I2C_IsErrorOccurred+0x1d4>)
 80039e4:	400b      	ands	r3, r1
 80039e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3728      	adds	r7, #40	; 0x28
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	fe00e800 	.word	0xfe00e800

08003a1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a34:	7a7b      	ldrb	r3, [r7, #9]
 8003a36:	041b      	lsls	r3, r3, #16
 8003a38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a3c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a4a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	0d5b      	lsrs	r3, r3, #21
 8003a56:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a5a:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <I2C_TransferConfig+0x60>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	ea02 0103 	and.w	r1, r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	03ff63ff 	.word	0x03ff63ff

08003a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d138      	bne.n	8003b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e032      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2224      	movs	r2, #36	; 0x24
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d139      	bne.n	8003ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e033      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	; 0x24
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	021b      	lsls	r3, r3, #8
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0bf      	b.n	8003d42 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fbda 	bl	8001390 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bf2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6999      	ldr	r1, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c08:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b4a      	ldr	r3, [pc, #296]	; (8003d4c <HAL_LTDC_Init+0x19c>)
 8003c24:	400b      	ands	r3, r1
 8003c26:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68d9      	ldr	r1, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <HAL_LTDC_Init+0x19c>)
 8003c52:	400b      	ands	r3, r1
 8003c54:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	041b      	lsls	r3, r3, #16
 8003c5c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68d9      	ldr	r1, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6919      	ldr	r1, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <HAL_LTDC_Init+0x19c>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6919      	ldr	r1, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6959      	ldr	r1, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <HAL_LTDC_Init+0x19c>)
 8003cae:	400b      	ands	r3, r1
 8003cb0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6959      	ldr	r1, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ce0:	041b      	lsls	r3, r3, #16
 8003ce2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0206 	orr.w	r2, r2, #6
 8003d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	f000f800 	.word	0xf000f800

08003d50 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d50:	b5b0      	push	{r4, r5, r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_LTDC_ConfigLayer+0x1a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e02c      	b.n	8003dc4 <HAL_LTDC_ConfigLayer+0x74>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2134      	movs	r1, #52	; 0x34
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d9c:	682b      	ldr	r3, [r5, #0]
 8003d9e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f811 	bl	8003dcc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bdb0      	pop	{r4, r5, r7, pc}

08003dcc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	4413      	add	r3, r2
 8003dea:	041b      	lsls	r3, r3, #16
 8003dec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	01db      	lsls	r3, r3, #7
 8003df8:	4413      	add	r3, r2
 8003dfa:	3384      	adds	r3, #132	; 0x84
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	4611      	mov	r1, r2
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	01d2      	lsls	r2, r2, #7
 8003e08:	440a      	add	r2, r1
 8003e0a:	3284      	adds	r2, #132	; 0x84
 8003e0c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e10:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e22:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e24:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	01db      	lsls	r3, r3, #7
 8003e30:	440b      	add	r3, r1
 8003e32:	3384      	adds	r3, #132	; 0x84
 8003e34:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e3a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e4a:	4413      	add	r3, r2
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	01db      	lsls	r3, r3, #7
 8003e5a:	4413      	add	r3, r2
 8003e5c:	3384      	adds	r3, #132	; 0x84
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	4611      	mov	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	01d2      	lsls	r2, r2, #7
 8003e6a:	440a      	add	r2, r1
 8003e6c:	3284      	adds	r2, #132	; 0x84
 8003e6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e72:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e82:	4413      	add	r3, r2
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	440b      	add	r3, r1
 8003e92:	3384      	adds	r3, #132	; 0x84
 8003e94:	4619      	mov	r1, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	01db      	lsls	r3, r3, #7
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3384      	adds	r3, #132	; 0x84
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	01d2      	lsls	r2, r2, #7
 8003eb6:	440a      	add	r2, r1
 8003eb8:	3284      	adds	r2, #132	; 0x84
 8003eba:	f023 0307 	bic.w	r3, r3, #7
 8003ebe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	01db      	lsls	r3, r3, #7
 8003eca:	4413      	add	r3, r2
 8003ecc:	3384      	adds	r3, #132	; 0x84
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	061b      	lsls	r3, r3, #24
 8003ef0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	4413      	add	r3, r2
 8003efe:	3384      	adds	r3, #132	; 0x84
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	01db      	lsls	r3, r3, #7
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3384      	adds	r3, #132	; 0x84
 8003f10:	461a      	mov	r2, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	01db      	lsls	r3, r3, #7
 8003f30:	440b      	add	r3, r1
 8003f32:	3384      	adds	r3, #132	; 0x84
 8003f34:	4619      	mov	r1, r3
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	01db      	lsls	r3, r3, #7
 8003f46:	4413      	add	r3, r2
 8003f48:	3384      	adds	r3, #132	; 0x84
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	4611      	mov	r1, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	01d2      	lsls	r2, r2, #7
 8003f56:	440a      	add	r2, r1
 8003f58:	3284      	adds	r2, #132	; 0x84
 8003f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	01db      	lsls	r3, r3, #7
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3384      	adds	r3, #132	; 0x84
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	01db      	lsls	r3, r3, #7
 8003f80:	4413      	add	r3, r2
 8003f82:	3384      	adds	r3, #132	; 0x84
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	440b      	add	r3, r1
 8003f92:	3384      	adds	r3, #132	; 0x84
 8003f94:	4619      	mov	r1, r3
 8003f96:	4b58      	ldr	r3, [pc, #352]	; (80040f8 <LTDC_SetConfig+0x32c>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	6809      	ldr	r1, [r1, #0]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	01c9      	lsls	r1, r1, #7
 8003fae:	4401      	add	r1, r0
 8003fb0:	3184      	adds	r1, #132	; 0x84
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	01db      	lsls	r3, r3, #7
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3384      	adds	r3, #132	; 0x84
 8003fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	01db      	lsls	r3, r3, #7
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3384      	adds	r3, #132	; 0x84
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3384      	adds	r3, #132	; 0x84
 8003fe8:	461a      	mov	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	e01b      	b.n	8004036 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d102      	bne.n	800400c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8004006:	2303      	movs	r3, #3
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	e014      	b.n	8004036 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d00b      	beq.n	800402c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004018:	2b02      	cmp	r3, #2
 800401a:	d007      	beq.n	800402c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004020:	2b03      	cmp	r3, #3
 8004022:	d003      	beq.n	800402c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004028:	2b07      	cmp	r3, #7
 800402a:	d102      	bne.n	8004032 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800402c:	2302      	movs	r3, #2
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e001      	b.n	8004036 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8004032:	2301      	movs	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	01db      	lsls	r3, r3, #7
 8004040:	4413      	add	r3, r2
 8004042:	3384      	adds	r3, #132	; 0x84
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	4611      	mov	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	01d2      	lsls	r2, r2, #7
 8004050:	440a      	add	r2, r1
 8004052:	3284      	adds	r2, #132	; 0x84
 8004054:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004058:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	69fa      	ldr	r2, [r7, #28]
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	041a      	lsls	r2, r3, #16
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1acb      	subs	r3, r1, r3
 8004070:	69f9      	ldr	r1, [r7, #28]
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	3307      	adds	r3, #7
 8004078:	68f9      	ldr	r1, [r7, #12]
 800407a:	6809      	ldr	r1, [r1, #0]
 800407c:	4608      	mov	r0, r1
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	01c9      	lsls	r1, r1, #7
 8004082:	4401      	add	r1, r0
 8004084:	3184      	adds	r1, #132	; 0x84
 8004086:	4313      	orrs	r3, r2
 8004088:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	3384      	adds	r3, #132	; 0x84
 8004098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4619      	mov	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	01db      	lsls	r3, r3, #7
 80040a4:	440b      	add	r3, r1
 80040a6:	3384      	adds	r3, #132	; 0x84
 80040a8:	4619      	mov	r1, r3
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <LTDC_SetConfig+0x330>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	01db      	lsls	r3, r3, #7
 80040ba:	4413      	add	r3, r2
 80040bc:	3384      	adds	r3, #132	; 0x84
 80040be:	461a      	mov	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	4413      	add	r3, r2
 80040d2:	3384      	adds	r3, #132	; 0x84
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	6812      	ldr	r2, [r2, #0]
 80040da:	4611      	mov	r1, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	01d2      	lsls	r2, r2, #7
 80040e0:	440a      	add	r2, r1
 80040e2:	3284      	adds	r2, #132	; 0x84
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6013      	str	r3, [r2, #0]
}
 80040ea:	bf00      	nop
 80040ec:	3724      	adds	r7, #36	; 0x24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	fffff8f8 	.word	0xfffff8f8
 80040fc:	fffff800 	.word	0xfffff800

08004100 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004108:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	2b06      	cmp	r3, #6
 8004112:	d00a      	beq.n	800412a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004114:	4b26      	ldr	r3, [pc, #152]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e040      	b.n	80041a8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e03e      	b.n	80041a8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004132:	491f      	ldr	r1, [pc, #124]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800413a:	f7fd fd0d 	bl	8001b58 <HAL_GetTick>
 800413e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004140:	e009      	b.n	8004156 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004142:	f7fd fd09 	bl	8001b58 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004150:	d901      	bls.n	8004156 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e028      	b.n	80041a8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004156:	4b16      	ldr	r3, [pc, #88]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800415e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004162:	d1ee      	bne.n	8004142 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b1e      	cmp	r3, #30
 8004168:	d008      	beq.n	800417c <HAL_PWREx_ConfigSupply+0x7c>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b2e      	cmp	r3, #46	; 0x2e
 800416e:	d005      	beq.n	800417c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b1d      	cmp	r3, #29
 8004174:	d002      	beq.n	800417c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b2d      	cmp	r3, #45	; 0x2d
 800417a:	d114      	bne.n	80041a6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800417c:	f7fd fcec 	bl	8001b58 <HAL_GetTick>
 8004180:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004182:	e009      	b.n	8004198 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004184:	f7fd fce8 	bl	8001b58 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004192:	d901      	bls.n	8004198 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e007      	b.n	80041a8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_PWREx_ConfigSupply+0xb0>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a4:	d1ee      	bne.n	8004184 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	58024800 	.word	0x58024800

080041b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	; 0x30
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e3f4      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80b3 	beq.w	800433a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041d4:	4b95      	ldr	r3, [pc, #596]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041de:	4b93      	ldr	r3, [pc, #588]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_OscConfig+0x46>
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b18      	cmp	r3, #24
 80041ee:	d112      	bne.n	8004216 <HAL_RCC_OscConfig+0x62>
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d10d      	bne.n	8004216 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fa:	4b8c      	ldr	r3, [pc, #560]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8098 	beq.w	8004338 <HAL_RCC_OscConfig+0x184>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8093 	bne.w	8004338 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e3cc      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800421e:	d106      	bne.n	800422e <HAL_RCC_OscConfig+0x7a>
 8004220:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a81      	ldr	r2, [pc, #516]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e058      	b.n	80042e0 <HAL_RCC_OscConfig+0x12c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d112      	bne.n	800425c <HAL_RCC_OscConfig+0xa8>
 8004236:	4b7d      	ldr	r3, [pc, #500]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7c      	ldr	r2, [pc, #496]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800423c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	4b7a      	ldr	r3, [pc, #488]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a79      	ldr	r2, [pc, #484]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004248:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b77      	ldr	r3, [pc, #476]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a76      	ldr	r2, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e041      	b.n	80042e0 <HAL_RCC_OscConfig+0x12c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0xd8>
 8004266:	4b71      	ldr	r3, [pc, #452]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a70      	ldr	r2, [pc, #448]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800426c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b6e      	ldr	r3, [pc, #440]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a6d      	ldr	r2, [pc, #436]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004278:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b6b      	ldr	r3, [pc, #428]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a6a      	ldr	r2, [pc, #424]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e029      	b.n	80042e0 <HAL_RCC_OscConfig+0x12c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004294:	d112      	bne.n	80042bc <HAL_RCC_OscConfig+0x108>
 8004296:	4b65      	ldr	r3, [pc, #404]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a64      	ldr	r2, [pc, #400]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800429c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b62      	ldr	r3, [pc, #392]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a61      	ldr	r2, [pc, #388]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b5f      	ldr	r3, [pc, #380]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5e      	ldr	r2, [pc, #376]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e011      	b.n	80042e0 <HAL_RCC_OscConfig+0x12c>
 80042bc:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5a      	ldr	r2, [pc, #360]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b58      	ldr	r3, [pc, #352]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a57      	ldr	r2, [pc, #348]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b55      	ldr	r3, [pc, #340]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a54      	ldr	r2, [pc, #336]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80042da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fd fc36 	bl	8001b58 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fd fc32 	bl	8001b58 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e356      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004302:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x13c>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd fc22 	bl	8001b58 <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7fd fc1e 	bl	8001b58 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e342      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800432a:	4b40      	ldr	r3, [pc, #256]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x164>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 808d 	beq.w	8004462 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004348:	4b38      	ldr	r3, [pc, #224]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004350:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004352:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d007      	beq.n	800436e <HAL_RCC_OscConfig+0x1ba>
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b18      	cmp	r3, #24
 8004362:	d137      	bne.n	80043d4 <HAL_RCC_OscConfig+0x220>
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d132      	bne.n	80043d4 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436e:	4b2f      	ldr	r3, [pc, #188]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <HAL_RCC_OscConfig+0x1d2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e314      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004386:	4b29      	ldr	r3, [pc, #164]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0219 	bic.w	r2, r3, #25
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4926      	ldr	r1, [pc, #152]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004394:	4313      	orrs	r3, r2
 8004396:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004398:	f7fd fbde 	bl	8001b58 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a0:	f7fd fbda 	bl	8001b58 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e2fe      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	4917      	ldr	r1, [pc, #92]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043d2:	e046      	b.n	8004462 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d029      	beq.n	8004430 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 0219 	bic.w	r2, r3, #25
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4910      	ldr	r1, [pc, #64]	; (800442c <HAL_RCC_OscConfig+0x278>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ee:	f7fd fbb3 	bl	8001b58 <HAL_GetTick>
 80043f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f6:	f7fd fbaf 	bl	8001b58 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e2d3      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <HAL_RCC_OscConfig+0x278>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	4902      	ldr	r1, [pc, #8]	; (800442c <HAL_RCC_OscConfig+0x278>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
 8004428:	e01b      	b.n	8004462 <HAL_RCC_OscConfig+0x2ae>
 800442a:	bf00      	nop
 800442c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004430:	4b97      	ldr	r3, [pc, #604]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a96      	ldr	r2, [pc, #600]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004436:	f023 0301 	bic.w	r3, r3, #1
 800443a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fd fb8c 	bl	8001b58 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004444:	f7fd fb88 	bl	8001b58 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e2ac      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004456:	4b8e      	ldr	r3, [pc, #568]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0310 	and.w	r3, r3, #16
 800446a:	2b00      	cmp	r3, #0
 800446c:	d06a      	beq.n	8004544 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446e:	4b88      	ldr	r3, [pc, #544]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004476:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004478:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d007      	beq.n	8004494 <HAL_RCC_OscConfig+0x2e0>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	2b18      	cmp	r3, #24
 8004488:	d11b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x30e>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d116      	bne.n	80044c2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004494:	4b7e      	ldr	r3, [pc, #504]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_OscConfig+0x2f8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2b80      	cmp	r3, #128	; 0x80
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e281      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044ac:	4b78      	ldr	r3, [pc, #480]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	4975      	ldr	r1, [pc, #468]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044c0:	e040      	b.n	8004544 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d023      	beq.n	8004512 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044ca:	4b71      	ldr	r3, [pc, #452]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a70      	ldr	r2, [pc, #448]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fb3f 	bl	8001b58 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80044de:	f7fd fb3b 	bl	8001b58 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e25f      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044f0:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044fc:	4b64      	ldr	r3, [pc, #400]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	061b      	lsls	r3, r3, #24
 800450a:	4961      	ldr	r1, [pc, #388]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800450c:	4313      	orrs	r3, r2
 800450e:	60cb      	str	r3, [r1, #12]
 8004510:	e018      	b.n	8004544 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004512:	4b5f      	ldr	r3, [pc, #380]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5e      	ldr	r2, [pc, #376]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004518:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800451c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fb1b 	bl	8001b58 <HAL_GetTick>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004526:	f7fd fb17 	bl	8001b58 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e23b      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004538:	4b55      	ldr	r3, [pc, #340]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d036      	beq.n	80045be <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d019      	beq.n	800458c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004558:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800455a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455c:	4a4c      	ldr	r2, [pc, #304]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fd faf8 	bl	8001b58 <HAL_GetTick>
 8004568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fd faf4 	bl	8001b58 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e218      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800457e:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x3b8>
 800458a:	e018      	b.n	80045be <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b40      	ldr	r3, [pc, #256]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	4a3f      	ldr	r2, [pc, #252]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004598:	f7fd fade 	bl	8001b58 <HAL_GetTick>
 800459c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a0:	f7fd fada 	bl	8001b58 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1fe      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80045b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d036      	beq.n	8004638 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a2e      	ldr	r2, [pc, #184]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80045d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045de:	f7fd fabb 	bl	8001b58 <HAL_GetTick>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045e6:	f7fd fab7 	bl	8001b58 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e1db      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x432>
 8004604:	e018      	b.n	8004638 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a21      	ldr	r2, [pc, #132]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800460c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004610:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004612:	f7fd faa1 	bl	8001b58 <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800461a:	f7fd fa9d 	bl	8001b58 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e1c1      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1f0      	bne.n	800461a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80af 	beq.w	80047a4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004646:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004652:	f7fd fa81 	bl	8001b58 <HAL_GetTick>
 8004656:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fd fa7d 	bl	8001b58 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e1a1      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_OscConfig+0x4e0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10b      	bne.n	8004698 <HAL_RCC_OscConfig+0x4e4>
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004684:	4a02      	ldr	r2, [pc, #8]	; (8004690 <HAL_RCC_OscConfig+0x4dc>)
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6713      	str	r3, [r2, #112]	; 0x70
 800468c:	e05b      	b.n	8004746 <HAL_RCC_OscConfig+0x592>
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
 8004694:	58024800 	.word	0x58024800
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d112      	bne.n	80046c6 <HAL_RCC_OscConfig+0x512>
 80046a0:	4b9d      	ldr	r3, [pc, #628]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a9c      	ldr	r2, [pc, #624]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b9a      	ldr	r3, [pc, #616]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a99      	ldr	r2, [pc, #612]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	4b97      	ldr	r3, [pc, #604]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	4a96      	ldr	r2, [pc, #600]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046be:	f023 0304 	bic.w	r3, r3, #4
 80046c2:	6713      	str	r3, [r2, #112]	; 0x70
 80046c4:	e03f      	b.n	8004746 <HAL_RCC_OscConfig+0x592>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d112      	bne.n	80046f4 <HAL_RCC_OscConfig+0x540>
 80046ce:	4b92      	ldr	r3, [pc, #584]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a91      	ldr	r2, [pc, #580]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
 80046da:	4b8f      	ldr	r3, [pc, #572]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	4a8e      	ldr	r2, [pc, #568]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046e4:	6713      	str	r3, [r2, #112]	; 0x70
 80046e6:	4b8c      	ldr	r3, [pc, #560]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a8b      	ldr	r2, [pc, #556]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	e028      	b.n	8004746 <HAL_RCC_OscConfig+0x592>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b85      	cmp	r3, #133	; 0x85
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_OscConfig+0x56e>
 80046fc:	4b86      	ldr	r3, [pc, #536]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	4a85      	ldr	r2, [pc, #532]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004702:	f043 0304 	orr.w	r3, r3, #4
 8004706:	6713      	str	r3, [r2, #112]	; 0x70
 8004708:	4b83      	ldr	r3, [pc, #524]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	4a82      	ldr	r2, [pc, #520]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	6713      	str	r3, [r2, #112]	; 0x70
 8004714:	4b80      	ldr	r3, [pc, #512]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	4a7f      	ldr	r2, [pc, #508]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	e011      	b.n	8004746 <HAL_RCC_OscConfig+0x592>
 8004722:	4b7d      	ldr	r3, [pc, #500]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	4b7a      	ldr	r3, [pc, #488]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a79      	ldr	r2, [pc, #484]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	4b77      	ldr	r3, [pc, #476]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473e:	4a76      	ldr	r2, [pc, #472]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d015      	beq.n	800477a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd fa03 	bl	8001b58 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd f9ff 	bl	8001b58 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e121      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800476c:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCC_OscConfig+0x5a2>
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477a:	f7fd f9ed 	bl	8001b58 <HAL_GetTick>
 800477e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd f9e9 	bl	8001b58 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e10b      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004798:	4b5f      	ldr	r3, [pc, #380]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ee      	bne.n	8004782 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8100 	beq.w	80049ae <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047ae:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b6:	2b18      	cmp	r3, #24
 80047b8:	f000 80bb 	beq.w	8004932 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	f040 8095 	bne.w	80048f0 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c6:	4b54      	ldr	r3, [pc, #336]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a53      	ldr	r2, [pc, #332]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80047cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d2:	f7fd f9c1 	bl	8001b58 <HAL_GetTick>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047da:	f7fd f9bd 	bl	8001b58 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0e1      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ec:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f8:	4b47      	ldr	r3, [pc, #284]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80047fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fc:	4b47      	ldr	r3, [pc, #284]	; (800491c <HAL_RCC_OscConfig+0x768>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004808:	0112      	lsls	r2, r2, #4
 800480a:	430a      	orrs	r2, r1
 800480c:	4942      	ldr	r1, [pc, #264]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800480e:	4313      	orrs	r3, r2
 8004810:	628b      	str	r3, [r1, #40]	; 0x28
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004816:	3b01      	subs	r3, #1
 8004818:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	3b01      	subs	r3, #1
 8004822:	025b      	lsls	r3, r3, #9
 8004824:	b29b      	uxth	r3, r3
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	3b01      	subs	r3, #1
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483a:	3b01      	subs	r3, #1
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004842:	4935      	ldr	r1, [pc, #212]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004844:	4313      	orrs	r3, r2
 8004846:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004848:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004854:	4b30      	ldr	r3, [pc, #192]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004858:	4b31      	ldr	r3, [pc, #196]	; (8004920 <HAL_RCC_OscConfig+0x76c>)
 800485a:	4013      	ands	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004860:	00d2      	lsls	r2, r2, #3
 8004862:	492d      	ldr	r1, [pc, #180]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004864:	4313      	orrs	r3, r2
 8004866:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004868:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	f023 020c 	bic.w	r2, r3, #12
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	4928      	ldr	r1, [pc, #160]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004876:	4313      	orrs	r3, r2
 8004878:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	f023 0202 	bic.w	r2, r3, #2
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4924      	ldr	r1, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004888:	4313      	orrs	r3, r2
 800488a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800488c:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 8004892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 800489e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048a4:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a1b      	ldr	r2, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80048b0:	4b19      	ldr	r3, [pc, #100]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	4a18      	ldr	r2, [pc, #96]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048bc:	4b16      	ldr	r3, [pc, #88]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fd f946 	bl	8001b58 <HAL_GetTick>
 80048cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fd f942 	bl	8001b58 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e066      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0x71c>
 80048ee:	e05e      	b.n	80049ae <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_RCC_OscConfig+0x764>)
 80048f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fc:	f7fd f92c 	bl	8001b58 <HAL_GetTick>
 8004900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004902:	e00f      	b.n	8004924 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd f928 	bl	8001b58 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d908      	bls.n	8004924 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04c      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
 800491c:	fffffc0c 	.word	0xfffffc0c
 8004920:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCC_OscConfig+0x804>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e9      	bne.n	8004904 <HAL_RCC_OscConfig+0x750>
 8004930:	e03d      	b.n	80049ae <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x804>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004936:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004938:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <HAL_RCC_OscConfig+0x804>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	2b01      	cmp	r3, #1
 8004944:	d031      	beq.n	80049aa <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0203 	and.w	r2, r3, #3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d12a      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d122      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004970:	429a      	cmp	r2, r3
 8004972:	d11a      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	0a5b      	lsrs	r3, r3, #9
 8004978:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d111      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0c1b      	lsrs	r3, r3, #16
 800498a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d108      	bne.n	80049aa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	0e1b      	lsrs	r3, r3, #24
 800499c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3730      	adds	r7, #48	; 0x30
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	58024400 	.word	0x58024400

080049bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e19c      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d0:	4b8a      	ldr	r3, [pc, #552]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d910      	bls.n	8004a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049de:	4b87      	ldr	r3, [pc, #540]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 020f 	bic.w	r2, r3, #15
 80049e6:	4985      	ldr	r1, [pc, #532]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ee:	4b83      	ldr	r3, [pc, #524]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d001      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e184      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d010      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691a      	ldr	r2, [r3, #16]
 8004a10:	4b7b      	ldr	r3, [pc, #492]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d908      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a1c:	4b78      	ldr	r3, [pc, #480]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	4975      	ldr	r1, [pc, #468]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d010      	beq.n	8004a5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	4b70      	ldr	r3, [pc, #448]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d908      	bls.n	8004a5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a4a:	4b6d      	ldr	r3, [pc, #436]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	496a      	ldr	r1, [pc, #424]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d908      	bls.n	8004a8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a78:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	495e      	ldr	r1, [pc, #376]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d908      	bls.n	8004ab8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004aa6:	4b56      	ldr	r3, [pc, #344]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	4953      	ldr	r1, [pc, #332]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d010      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	4b4d      	ldr	r3, [pc, #308]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d908      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f023 020f 	bic.w	r2, r3, #15
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4947      	ldr	r1, [pc, #284]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d055      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004af2:	4b43      	ldr	r3, [pc, #268]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4940      	ldr	r1, [pc, #256]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b0c:	4b3c      	ldr	r3, [pc, #240]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d121      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0f6      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d115      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0ea      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0de      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e0d6      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f023 0207 	bic.w	r2, r3, #7
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4925      	ldr	r1, [pc, #148]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fff3 	bl	8001b58 <HAL_GetTick>
 8004b72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b76:	f7fc ffef 	bl	8001b58 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e0be      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d1eb      	bne.n	8004b76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d010      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d208      	bcs.n	8004bcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f023 020f 	bic.w	r2, r3, #15
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	490e      	ldr	r1, [pc, #56]	; (8004c00 <HAL_RCC_ClockConfig+0x244>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 030f 	and.w	r3, r3, #15
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d214      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 020f 	bic.w	r2, r3, #15
 8004be2:	4906      	ldr	r1, [pc, #24]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_RCC_ClockConfig+0x240>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e086      	b.n	8004d0a <HAL_RCC_ClockConfig+0x34e>
 8004bfc:	52002000 	.word	0x52002000
 8004c00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	4b3f      	ldr	r3, [pc, #252]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d208      	bcs.n	8004c32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c20:	4b3c      	ldr	r3, [pc, #240]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4939      	ldr	r1, [pc, #228]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d208      	bcs.n	8004c60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c4e:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	492e      	ldr	r1, [pc, #184]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d010      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d208      	bcs.n	8004c8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	4922      	ldr	r1, [pc, #136]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d208      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004caa:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4917      	ldr	r1, [pc, #92]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8004cbc:	f000 f834 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	4912      	ldr	r1, [pc, #72]	; (8004d18 <HAL_RCC_ClockConfig+0x35c>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd8:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <HAL_RCC_ClockConfig+0x358>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <HAL_RCC_ClockConfig+0x35c>)
 8004ce4:	5cd3      	ldrb	r3, [r2, r3]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf0:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <HAL_RCC_ClockConfig+0x360>)
 8004cf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cf4:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <HAL_RCC_ClockConfig+0x364>)
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_RCC_ClockConfig+0x368>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fc fee0 	bl	8001ac4 <HAL_InitTick>
 8004d04:	4603      	mov	r3, r0
 8004d06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
 8004d18:	08008598 	.word	0x08008598
 8004d1c:	24012008 	.word	0x24012008
 8004d20:	24012004 	.word	0x24012004
 8004d24:	2401200c 	.word	0x2401200c

08004d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b089      	sub	sp, #36	; 0x24
 8004d2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d2e:	4bb3      	ldr	r3, [pc, #716]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d36:	2b18      	cmp	r3, #24
 8004d38:	f200 8155 	bhi.w	8004fe6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004da9 	.word	0x08004da9
 8004d48:	08004fe7 	.word	0x08004fe7
 8004d4c:	08004fe7 	.word	0x08004fe7
 8004d50:	08004fe7 	.word	0x08004fe7
 8004d54:	08004fe7 	.word	0x08004fe7
 8004d58:	08004fe7 	.word	0x08004fe7
 8004d5c:	08004fe7 	.word	0x08004fe7
 8004d60:	08004fe7 	.word	0x08004fe7
 8004d64:	08004dcf 	.word	0x08004dcf
 8004d68:	08004fe7 	.word	0x08004fe7
 8004d6c:	08004fe7 	.word	0x08004fe7
 8004d70:	08004fe7 	.word	0x08004fe7
 8004d74:	08004fe7 	.word	0x08004fe7
 8004d78:	08004fe7 	.word	0x08004fe7
 8004d7c:	08004fe7 	.word	0x08004fe7
 8004d80:	08004fe7 	.word	0x08004fe7
 8004d84:	08004dd5 	.word	0x08004dd5
 8004d88:	08004fe7 	.word	0x08004fe7
 8004d8c:	08004fe7 	.word	0x08004fe7
 8004d90:	08004fe7 	.word	0x08004fe7
 8004d94:	08004fe7 	.word	0x08004fe7
 8004d98:	08004fe7 	.word	0x08004fe7
 8004d9c:	08004fe7 	.word	0x08004fe7
 8004da0:	08004fe7 	.word	0x08004fe7
 8004da4:	08004ddb 	.word	0x08004ddb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004da8:	4b94      	ldr	r3, [pc, #592]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004db4:	4b91      	ldr	r3, [pc, #580]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	4a90      	ldr	r2, [pc, #576]	; (8005000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004dc6:	e111      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004dc8:	4b8d      	ldr	r3, [pc, #564]	; (8005000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dca:	61bb      	str	r3, [r7, #24]
    break;
 8004dcc:	e10e      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004dce:	4b8d      	ldr	r3, [pc, #564]	; (8005004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004dd0:	61bb      	str	r3, [r7, #24]
    break;
 8004dd2:	e10b      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004dd4:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004dd6:	61bb      	str	r3, [r7, #24]
    break;
 8004dd8:	e108      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dda:	4b88      	ldr	r3, [pc, #544]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004de4:	4b85      	ldr	r3, [pc, #532]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004df0:	4b82      	ldr	r3, [pc, #520]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dfa:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80e1 	beq.w	8004fe0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f000 8083 	beq.w	8004f2c <HAL_RCC_GetSysClockFreq+0x204>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f200 80a1 	bhi.w	8004f70 <HAL_RCC_GetSysClockFreq+0x248>
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_RCC_GetSysClockFreq+0x114>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d056      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e3a:	e099      	b.n	8004f70 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e3c:	4b6f      	ldr	r3, [pc, #444]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e48:	4b6c      	ldr	r3, [pc, #432]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	4a6b      	ldr	r2, [pc, #428]	; (8005000 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800500c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004ea2:	e087      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005010 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b51      	ldr	r3, [pc, #324]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800500c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee6:	e065      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f0e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800500c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	e043      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005018 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f52:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800500c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f6e:	e021      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005014 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f96:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800500c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fb2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd8:	ee17 3a90 	vmov	r3, s15
 8004fdc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fde:	e005      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
    break;
 8004fe4:	e002      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004fe6:	4b07      	ldr	r3, [pc, #28]	; (8005004 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fe8:	61bb      	str	r3, [r7, #24]
    break;
 8004fea:	bf00      	nop
  }

  return sysclockfreq;
 8004fec:	69bb      	ldr	r3, [r7, #24]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3724      	adds	r7, #36	; 0x24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
 8005000:	03d09000 	.word	0x03d09000
 8005004:	003d0900 	.word	0x003d0900
 8005008:	007a1200 	.word	0x007a1200
 800500c:	46000000 	.word	0x46000000
 8005010:	4c742400 	.word	0x4c742400
 8005014:	4a742400 	.word	0x4a742400
 8005018:	4af42400 	.word	0x4af42400

0800501c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8005022:	f7ff fe81 	bl	8004d28 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_RCC_GetHCLKFreq+0x50>)
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	0a1b      	lsrs	r3, r3, #8
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490f      	ldr	r1, [pc, #60]	; (8005070 <HAL_RCC_GetHCLKFreq+0x54>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	fa22 f303 	lsr.w	r3, r2, r3
 800503e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <HAL_RCC_GetHCLKFreq+0x50>)
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <HAL_RCC_GetHCLKFreq+0x54>)
 800504a:	5cd3      	ldrb	r3, [r2, r3]
 800504c:	f003 031f 	and.w	r3, r3, #31
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <HAL_RCC_GetHCLKFreq+0x58>)
 8005058:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800505a:	4a07      	ldr	r2, [pc, #28]	; (8005078 <HAL_RCC_GetHCLKFreq+0x5c>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <HAL_RCC_GetHCLKFreq+0x58>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	58024400 	.word	0x58024400
 8005070:	08008598 	.word	0x08008598
 8005074:	24012008 	.word	0x24012008
 8005078:	24012004 	.word	0x24012004

0800507c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8005080:	f7ff ffcc 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005084:	4602      	mov	r2, r0
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4904      	ldr	r1, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005092:	5ccb      	ldrb	r3, [r1, r3]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	58024400 	.word	0x58024400
 80050a4:	08008598 	.word	0x08008598

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80050ac:	f7ff ffb6 	bl	800501c <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4904      	ldr	r1, [pc, #16]	; (80050d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	58024400 	.word	0x58024400
 80050d0:	08008598 	.word	0x08008598

080050d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050dc:	2300      	movs	r3, #0
 80050de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050e0:	2300      	movs	r3, #0
 80050e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d03f      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050f8:	d02a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80050fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050fe:	d824      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005104:	d018      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d81e      	bhi.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005114:	d007      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005116:	e018      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005118:	4b9f      	ldr	r3, [pc, #636]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	4a9e      	ldr	r2, [pc, #632]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005124:	e015      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	3304      	adds	r3, #4
 800512a:	2102      	movs	r1, #2
 800512c:	4618      	mov	r0, r3
 800512e:	f001 ff1b 	bl	8006f68 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005136:	e00c      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3324      	adds	r3, #36	; 0x24
 800513c:	2102      	movs	r1, #2
 800513e:	4618      	mov	r0, r3
 8005140:	f001 ffc4 	bl	80070cc <RCCEx_PLL3_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005148:	e003      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
      break;
 800514e:	e000      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005158:	4b8f      	ldr	r3, [pc, #572]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800515a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005164:	498c      	ldr	r1, [pc, #560]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	650b      	str	r3, [r1, #80]	; 0x50
 800516a:	e001      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d03d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	2b04      	cmp	r3, #4
 8005182:	d826      	bhi.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051a1 	.word	0x080051a1
 8005190:	080051af 	.word	0x080051af
 8005194:	080051c1 	.word	0x080051c1
 8005198:	080051d9 	.word	0x080051d9
 800519c:	080051d9 	.word	0x080051d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051ac:	e015      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fed7 	bl	8006f68 <RCCEx_PLL2_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051be:	e00c      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3324      	adds	r3, #36	; 0x24
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 ff80 	bl	80070cc <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051d0:	e003      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
      break;
 80051d6:	e000      	b.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80051d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051e0:	4b6d      	ldr	r3, [pc, #436]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	f023 0207 	bic.w	r2, r3, #7
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	496a      	ldr	r1, [pc, #424]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	650b      	str	r3, [r1, #80]	; 0x50
 80051f2:	e001      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005200:	2b00      	cmp	r3, #0
 8005202:	d04a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005208:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800520c:	d031      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800520e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005212:	d82b      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005218:	d02d      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800521a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521e:	d825      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005220:	2bc0      	cmp	r3, #192	; 0xc0
 8005222:	d02a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005224:	2bc0      	cmp	r3, #192	; 0xc0
 8005226:	d821      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d016      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800522c:	2b80      	cmp	r3, #128	; 0x80
 800522e:	d81d      	bhi.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d007      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8005238:	e018      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800523a:	4b57      	ldr	r3, [pc, #348]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	4a56      	ldr	r2, [pc, #344]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005244:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005246:	e019      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f001 fe8a 	bl	8006f68 <RCCEx_PLL2_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8005258:	e010      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3324      	adds	r3, #36	; 0x24
 800525e:	2100      	movs	r1, #0
 8005260:	4618      	mov	r0, r3
 8005262:	f001 ff33 	bl	80070cc <RCCEx_PLL3_Config>
 8005266:	4603      	mov	r3, r0
 8005268:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800526a:	e007      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	75fb      	strb	r3, [r7, #23]
      break;
 8005270:	e004      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800527a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d109      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8005282:	4b45      	ldr	r3, [pc, #276]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005286:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	4942      	ldr	r1, [pc, #264]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005290:	4313      	orrs	r3, r2
 8005292:	650b      	str	r3, [r1, #80]	; 0x50
 8005294:	e001      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d04f      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052ae:	d036      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80052b0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052b4:	d830      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d032      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c0:	d82a      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052c6:	d02e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80052c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052cc:	d824      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d018      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80052d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d8:	d81e      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80052de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e2:	d007      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80052e4:	e018      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e6:	4b2c      	ldr	r3, [pc, #176]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80052ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80052f2:	e019      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	3304      	adds	r3, #4
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f001 fe34 	bl	8006f68 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005304:	e010      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3324      	adds	r3, #36	; 0x24
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f001 fedd 	bl	80070cc <RCCEx_PLL3_Config>
 8005312:	4603      	mov	r3, r0
 8005314:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8005316:	e007      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
      break;
 800531c:	e004      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800532e:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	4917      	ldr	r1, [pc, #92]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	650b      	str	r3, [r1, #80]	; 0x50
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d034      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005356:	2b30      	cmp	r3, #48	; 0x30
 8005358:	d01c      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800535a:	2b30      	cmp	r3, #48	; 0x30
 800535c:	d817      	bhi.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d00c      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005362:	2b20      	cmp	r3, #32
 8005364:	d813      	bhi.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d018      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800536a:	2b10      	cmp	r3, #16
 800536c:	d10f      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	4a09      	ldr	r2, [pc, #36]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800537a:	e010      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f001 fdf0 	bl	8006f68 <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800538c:	e007      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
      break;
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8005394:	bf00      	nop
 8005396:	e002      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005398:	58024400 	.word	0x58024400
      break;
 800539c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80053a4:	4b9b      	ldr	r3, [pc, #620]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	4998      	ldr	r1, [pc, #608]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80053b6:	e001      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b8:	7dfb      	ldrb	r3, [r7, #23]
 80053ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d047      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d0:	d030      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80053d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053d6:	d82a      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053dc:	d02c      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80053de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053e2:	d824      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e8:	d018      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d81e      	bhi.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x328>
 80053f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f8:	d007      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x336>
 80053fa:	e018      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fc:	4b85      	ldr	r3, [pc, #532]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a84      	ldr	r2, [pc, #528]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005406:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005408:	e017      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fda9 	bl	8006f68 <RCCEx_PLL2_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800541a:	e00e      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fe52 	bl	80070cc <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800542c:	e005      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75fb      	strb	r3, [r7, #23]
      break;
 8005432:	e002      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005434:	bf00      	nop
 8005436:	e000      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8005438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d109      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005440:	4b74      	ldr	r3, [pc, #464]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005444:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	4971      	ldr	r1, [pc, #452]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800544e:	4313      	orrs	r3, r2
 8005450:	650b      	str	r3, [r1, #80]	; 0x50
 8005452:	e001      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d049      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546c:	d02e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800546e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005472:	d828      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005478:	d02a      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800547a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800547e:	d822      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005484:	d026      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800548a:	d81c      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800548c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005490:	d010      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005496:	d816      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01d      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800549c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a0:	d111      	bne.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fd5d 	bl	8006f68 <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054b2:	e012      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fe06 	bl	80070cc <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80054c4:	e009      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054cc:	bf00      	nop
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80054d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054da:	7dfb      	ldrb	r3, [r7, #23]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ec:	4949      	ldr	r1, [pc, #292]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	650b      	str	r3, [r1, #80]	; 0x50
 80054f2:	e001      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d053      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800550a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800550e:	d034      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005510:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005514:	d82e      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800551a:	d030      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800551c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005520:	d828      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d02c      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552c:	d822      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800552e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005532:	d028      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005534:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005538:	d81c      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800553a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553e:	d010      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d816      	bhi.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01f      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800554a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554e:	d111      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3304      	adds	r3, #4
 8005554:	2101      	movs	r1, #1
 8005556:	4618      	mov	r0, r3
 8005558:	f001 fd06 	bl	8006f68 <RCCEx_PLL2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005560:	e014      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3324      	adds	r3, #36	; 0x24
 8005566:	2101      	movs	r1, #1
 8005568:	4618      	mov	r0, r3
 800556a:	f001 fdaf 	bl	80070cc <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005572:	e00b      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
      break;
 8005578:	e008      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800557a:	bf00      	nop
 800557c:	e006      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800557e:	bf00      	nop
 8005580:	e004      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005582:	bf00      	nop
 8005584:	e002      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8005586:	bf00      	nop
 8005588:	e000      	b.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800558a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800558c:	7dfb      	ldrb	r3, [r7, #23]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005592:	4b20      	ldr	r3, [pc, #128]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055a0:	491c      	ldr	r1, [pc, #112]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	658b      	str	r3, [r1, #88]	; 0x58
 80055a6:	e001      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d031      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c0:	d00e      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80055c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c6:	d814      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d015      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80055cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055d0:	d10f      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80055d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055de:	e00c      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	2101      	movs	r1, #1
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 fcbe 	bl	8006f68 <RCCEx_PLL2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
      break;
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80055f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10b      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005600:	4b04      	ldr	r3, [pc, #16]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800560c:	4901      	ldr	r1, [pc, #4]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800560e:	4313      	orrs	r3, r2
 8005610:	650b      	str	r3, [r1, #80]	; 0x50
 8005612:	e003      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8005614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d032      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562c:	2b03      	cmp	r3, #3
 800562e:	d81b      	bhi.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005630:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005636:	bf00      	nop
 8005638:	0800566f 	.word	0x0800566f
 800563c:	08005649 	.word	0x08005649
 8005640:	08005657 	.word	0x08005657
 8005644:	0800566f 	.word	0x0800566f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4bb2      	ldr	r3, [pc, #712]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4ab1      	ldr	r2, [pc, #708]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005654:	e00c      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	2102      	movs	r1, #2
 800565c:	4618      	mov	r0, r3
 800565e:	f001 fc83 	bl	8006f68 <RCCEx_PLL2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005666:	e003      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	75fb      	strb	r3, [r7, #23]
      break;
 800566c:	e000      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800566e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005676:	4ba7      	ldr	r3, [pc, #668]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800567a:	f023 0203 	bic.w	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005682:	49a4      	ldr	r1, [pc, #656]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005684:	4313      	orrs	r3, r2
 8005686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005688:	e001      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800568a:	7dfb      	ldrb	r3, [r7, #23]
 800568c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8086 	beq.w	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800569c:	4b9e      	ldr	r3, [pc, #632]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a9d      	ldr	r2, [pc, #628]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80056a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056a8:	f7fc fa56 	bl	8001b58 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056ae:	e009      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b0:	f7fc fa52 	bl	8001b58 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	d902      	bls.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	75fb      	strb	r3, [r7, #23]
        break;
 80056c2:	e005      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056c4:	4b94      	ldr	r3, [pc, #592]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ef      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d166      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80056d6:	4b8f      	ldr	r3, [pc, #572]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056e0:	4053      	eors	r3, r2
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d013      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ea:	4b8a      	ldr	r3, [pc, #552]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056f4:	4b87      	ldr	r3, [pc, #540]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a86      	ldr	r2, [pc, #536]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80056fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005700:	4b84      	ldr	r3, [pc, #528]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	4a83      	ldr	r2, [pc, #524]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800570a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800570c:	4a81      	ldr	r2, [pc, #516]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571c:	d115      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fc fa1b 	bl	8001b58 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005724:	e00b      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005726:	f7fc fa17 	bl	8001b58 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f241 3288 	movw	r2, #5000	; 0x1388
 8005734:	4293      	cmp	r3, r2
 8005736:	d902      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	75fb      	strb	r3, [r7, #23]
            break;
 800573c:	e005      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800573e:	4b75      	ldr	r3, [pc, #468]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ed      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d126      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800575e:	d10d      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8005760:	4b6c      	ldr	r3, [pc, #432]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800576e:	0919      	lsrs	r1, r3, #4
 8005770:	4b6a      	ldr	r3, [pc, #424]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005772:	400b      	ands	r3, r1
 8005774:	4967      	ldr	r1, [pc, #412]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005776:	4313      	orrs	r3, r2
 8005778:	610b      	str	r3, [r1, #16]
 800577a:	e005      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800577c:	4b65      	ldr	r3, [pc, #404]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	4a64      	ldr	r2, [pc, #400]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005782:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005786:	6113      	str	r3, [r2, #16]
 8005788:	4b62      	ldr	r3, [pc, #392]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800578a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005796:	495f      	ldr	r1, [pc, #380]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005798:	4313      	orrs	r3, r2
 800579a:	670b      	str	r3, [r1, #112]	; 0x70
 800579c:	e004      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
 80057a0:	75bb      	strb	r3, [r7, #22]
 80057a2:	e001      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d07f      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ba:	2b28      	cmp	r3, #40	; 0x28
 80057bc:	d866      	bhi.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	08005893 	.word	0x08005893
 80057c8:	0800588d 	.word	0x0800588d
 80057cc:	0800588d 	.word	0x0800588d
 80057d0:	0800588d 	.word	0x0800588d
 80057d4:	0800588d 	.word	0x0800588d
 80057d8:	0800588d 	.word	0x0800588d
 80057dc:	0800588d 	.word	0x0800588d
 80057e0:	0800588d 	.word	0x0800588d
 80057e4:	08005869 	.word	0x08005869
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	0800588d 	.word	0x0800588d
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	0800588d 	.word	0x0800588d
 80057f8:	0800588d 	.word	0x0800588d
 80057fc:	0800588d 	.word	0x0800588d
 8005800:	0800588d 	.word	0x0800588d
 8005804:	0800587b 	.word	0x0800587b
 8005808:	0800588d 	.word	0x0800588d
 800580c:	0800588d 	.word	0x0800588d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	0800588d 	.word	0x0800588d
 8005818:	0800588d 	.word	0x0800588d
 800581c:	0800588d 	.word	0x0800588d
 8005820:	0800588d 	.word	0x0800588d
 8005824:	08005893 	.word	0x08005893
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	0800588d 	.word	0x0800588d
 8005834:	0800588d 	.word	0x0800588d
 8005838:	0800588d 	.word	0x0800588d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	08005893 	.word	0x08005893
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	0800588d 	.word	0x0800588d
 800585c:	0800588d 	.word	0x0800588d
 8005860:	0800588d 	.word	0x0800588d
 8005864:	08005893 	.word	0x08005893
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	3304      	adds	r3, #4
 800586c:	2101      	movs	r1, #1
 800586e:	4618      	mov	r0, r3
 8005870:	f001 fb7a 	bl	8006f68 <RCCEx_PLL2_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005878:	e00c      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	3324      	adds	r3, #36	; 0x24
 800587e:	2101      	movs	r1, #1
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fc23 	bl	80070cc <RCCEx_PLL3_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
      break;
 8005890:	e000      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8005892:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005894:	7dfb      	ldrb	r3, [r7, #23]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800589a:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800589c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a8:	491a      	ldr	r1, [pc, #104]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	654b      	str	r3, [r1, #84]	; 0x54
 80058ae:	e001      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d03f      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c4:	2b05      	cmp	r3, #5
 80058c6:	d821      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	08005921 	.word	0x08005921
 80058d4:	080058e9 	.word	0x080058e9
 80058d8:	080058fb 	.word	0x080058fb
 80058dc:	08005921 	.word	0x08005921
 80058e0:	08005921 	.word	0x08005921
 80058e4:	08005921 	.word	0x08005921
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	2101      	movs	r1, #1
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 fb3a 	bl	8006f68 <RCCEx_PLL2_Config>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80058f8:	e013      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3324      	adds	r3, #36	; 0x24
 80058fe:	2101      	movs	r1, #1
 8005900:	4618      	mov	r0, r3
 8005902:	f001 fbe3 	bl	80070cc <RCCEx_PLL3_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800590a:	e00a      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	75fb      	strb	r3, [r7, #23]
      break;
 8005910:	e007      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8005912:	bf00      	nop
 8005914:	58024400 	.word	0x58024400
 8005918:	58024800 	.word	0x58024800
 800591c:	00ffffcf 	.word	0x00ffffcf
      break;
 8005920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005922:	7dfb      	ldrb	r3, [r7, #23]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005928:	4b9f      	ldr	r3, [pc, #636]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800592a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800592c:	f023 0207 	bic.w	r2, r3, #7
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005934:	499c      	ldr	r1, [pc, #624]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	654b      	str	r3, [r1, #84]	; 0x54
 800593a:	e001      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d039      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005952:	2b05      	cmp	r3, #5
 8005954:	d820      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800599f 	.word	0x0800599f
 8005960:	08005975 	.word	0x08005975
 8005964:	08005987 	.word	0x08005987
 8005968:	0800599f 	.word	0x0800599f
 800596c:	0800599f 	.word	0x0800599f
 8005970:	0800599f 	.word	0x0800599f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3304      	adds	r3, #4
 8005978:	2101      	movs	r1, #1
 800597a:	4618      	mov	r0, r3
 800597c:	f001 faf4 	bl	8006f68 <RCCEx_PLL2_Config>
 8005980:	4603      	mov	r3, r0
 8005982:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005984:	e00c      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3324      	adds	r3, #36	; 0x24
 800598a:	2101      	movs	r1, #1
 800598c:	4618      	mov	r0, r3
 800598e:	f001 fb9d 	bl	80070cc <RCCEx_PLL3_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005996:	e003      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
      break;
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800599e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059a6:	4b80      	ldr	r3, [pc, #512]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059aa:	f023 0207 	bic.w	r2, r3, #7
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059b4:	497c      	ldr	r1, [pc, #496]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	658b      	str	r3, [r1, #88]	; 0x58
 80059ba:	e001      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d04b      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d6:	d02e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80059d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059dc:	d828      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e2:	d02a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80059e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e8:	d822      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059ee:	d026      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80059f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059f4:	d81c      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80059f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fa:	d010      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80059fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a00:	d816      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01d      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a0a:	d111      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 faa8 	bl	8006f68 <RCCEx_PLL2_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a1c:	e012      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fb51 	bl	80070cc <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005a2e:	e009      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	e006      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a36:	bf00      	nop
 8005a38:	e004      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e002      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8005a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a4a:	4b57      	ldr	r3, [pc, #348]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a58:	4953      	ldr	r1, [pc, #332]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	654b      	str	r3, [r1, #84]	; 0x54
 8005a5e:	e001      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d04b      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005a76:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a7a:	d02e      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005a7c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005a80:	d828      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	d02a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8c:	d822      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a92:	d026      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a98:	d81c      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9e:	d010      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8005aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa4:	d816      	bhi.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d01d      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aae:	d111      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 fa56 	bl	8006f68 <RCCEx_PLL2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ac0:	e012      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 faff 	bl	80070cc <RCCEx_PLL3_Config>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005ad2:	e009      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ad8:	e006      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ada:	bf00      	nop
 8005adc:	e004      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e002      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005afc:	492a      	ldr	r1, [pc, #168]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	658b      	str	r3, [r1, #88]	; 0x58
 8005b02:	e001      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d04d      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b1e:	d02e      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8005b20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005b24:	d828      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b2a:	d02a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b30:	d822      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b32:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b36:	d026      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005b38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005b3c:	d81c      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b42:	d010      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8005b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b48:	d816      	bhi.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01d      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b52:	d111      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 fa04 	bl	8006f68 <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b64:	e012      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3324      	adds	r3, #36	; 0x24
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 faad 	bl	80070cc <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005b76:	e009      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7c:	e006      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b7e:	bf00      	nop
 8005b80:	e004      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b82:	bf00      	nop
 8005b84:	e002      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10c      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ba0:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8005ba6:	e003      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
 8005bae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0308 	and.w	r3, r3, #8
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc6:	d10a      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	3324      	adds	r3, #36	; 0x24
 8005bcc:	2102      	movs	r1, #2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fa7c 	bl	80070cc <RCCEx_PLL3_Config>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005bde:	4b8c      	ldr	r3, [pc, #560]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bec:	4988      	ldr	r1, [pc, #544]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c08:	d10a      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3324      	adds	r3, #36	; 0x24
 8005c0e:	2102      	movs	r1, #2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f001 fa5b 	bl	80070cc <RCCEx_PLL3_Config>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c20:	4b7b      	ldr	r3, [pc, #492]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c2e:	4978      	ldr	r1, [pc, #480]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d034      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c4a:	d01d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c50:	d817      	bhi.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8005c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5a:	d009      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8005c5c:	e011      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	3304      	adds	r3, #4
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f97f 	bl	8006f68 <RCCEx_PLL2_Config>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c6e:	e00c      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3324      	adds	r3, #36	; 0x24
 8005c74:	2102      	movs	r1, #2
 8005c76:	4618      	mov	r0, r3
 8005c78:	f001 fa28 	bl	80070cc <RCCEx_PLL3_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005c80:	e003      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
      break;
 8005c86:	e000      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8005c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c90:	4b5f      	ldr	r3, [pc, #380]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c9e:	495c      	ldr	r1, [pc, #368]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	658b      	str	r3, [r1, #88]	; 0x58
 8005ca4:	e001      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	7dfb      	ldrb	r3, [r7, #23]
 8005ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d033      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc0:	d01c      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005cc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc6:	d816      	bhi.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8005cce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cd2:	d007      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005cd4:	e00f      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	4a4d      	ldr	r2, [pc, #308]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ce2:	e00c      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3324      	adds	r3, #36	; 0x24
 8005ce8:	2101      	movs	r1, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 f9ee 	bl	80070cc <RCCEx_PLL3_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfa:	e000      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005cfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d04:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d12:	493f      	ldr	r1, [pc, #252]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	654b      	str	r3, [r1, #84]	; 0x54
 8005d18:	e001      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d029      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8005d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d36:	d007      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005d38:	e00f      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3a:	4b35      	ldr	r3, [pc, #212]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4a34      	ldr	r2, [pc, #208]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d46:	e00b      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 f90a 	bl	8006f68 <RCCEx_PLL2_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005d58:	e002      	b.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d72:	4927      	ldr	r1, [pc, #156]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005d78:	e001      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
 8005d7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	3324      	adds	r3, #36	; 0x24
 8005d8e:	2102      	movs	r1, #2
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f99b 	bl	80070cc <RCCEx_PLL3_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d035      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db6:	d017      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dbc:	d811      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc2:	d013      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8005dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc8:	d80b      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d010      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005de0:	e007      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
      break;
 8005de6:	e004      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005de8:	bf00      	nop
 8005dea:	e002      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005dec:	bf00      	nop
 8005dee:	e000      	b.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8005df0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10d      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e06:	4902      	ldr	r1, [pc, #8]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	654b      	str	r3, [r1, #84]	; 0x54
 8005e0c:	e004      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e24:	4b30      	ldr	r3, [pc, #192]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e30:	492d      	ldr	r1, [pc, #180]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d008      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e42:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4e:	4926      	ldr	r1, [pc, #152]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8005e60:	4b21      	ldr	r3, [pc, #132]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	491e      	ldr	r1, [pc, #120]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e88:	6113      	str	r3, [r2, #16]
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e8c:	691a      	ldr	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e94:	4914      	ldr	r1, [pc, #80]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da08      	bge.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ea2:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	490e      	ldr	r1, [pc, #56]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ece:	4906      	ldr	r1, [pc, #24]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3718      	adds	r7, #24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58024400 	.word	0x58024400

08005eec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b090      	sub	sp, #64	; 0x40
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005efa:	f040 8089 	bne.w	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005efe:	4b91      	ldr	r3, [pc, #580]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d87d      	bhi.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8005f0e:	a201      	add	r2, pc, #4	; (adr r2, 8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f29 	.word	0x08005f29
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f71 	.word	0x08005f71
 8005f20:	08006005 	.word	0x08006005
 8005f24:	08005f95 	.word	0x08005f95
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f28:	4b86      	ldr	r3, [pc, #536]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f34:	d107      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fec2 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f44:	e3f4      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f4a:	e3f1      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f4c:	4b7d      	ldr	r3, [pc, #500]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f58:	d107      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f5a:	f107 0318 	add.w	r3, r7, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fc08 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f68:	e3e2      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f6e:	e3df      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005f70:	4b74      	ldr	r3, [pc, #464]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f7c:	d107      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	4618      	mov	r0, r3
 8005f84:	f000 fd4a 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005f8c:	e3d0      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f92:	e3cd      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f94:	4b6b      	ldr	r3, [pc, #428]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f9e:	4b69      	ldr	r3, [pc, #420]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fb0:	4b64      	ldr	r3, [pc, #400]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	08db      	lsrs	r3, r3, #3
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	4a63      	ldr	r2, [pc, #396]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc2:	e01e      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005fc4:	4b5f      	ldr	r3, [pc, #380]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fd8:	d102      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005fda:	4b5c      	ldr	r3, [pc, #368]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fde:	e010      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005fe0:	4b58      	ldr	r3, [pc, #352]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fec:	d106      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff4:	d102      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005ff6:	4b56      	ldr	r3, [pc, #344]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ffa:	e002      	b.n	8006002 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006000:	e396      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006002:	e395      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006004:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006008:	e392      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800600e:	e38f      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006016:	f040 809f 	bne.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800601a:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800601c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800601e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006022:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602a:	d04d      	beq.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006032:	f200 8084 	bhi.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2bc0      	cmp	r3, #192	; 0xc0
 800603a:	d07d      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2bc0      	cmp	r3, #192	; 0xc0
 8006040:	d87d      	bhi.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2b80      	cmp	r3, #128	; 0x80
 8006046:	d02d      	beq.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b80      	cmp	r3, #128	; 0x80
 800604c:	d877      	bhi.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	2b00      	cmp	r3, #0
 8006052:	d003      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2b40      	cmp	r3, #64	; 0x40
 8006058:	d012      	beq.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800605a:	e070      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800605c:	4b39      	ldr	r3, [pc, #228]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006068:	d107      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	4618      	mov	r0, r3
 8006070:	f000 fe28 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006078:	e35a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800607e:	e357      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006080:	4b30      	ldr	r3, [pc, #192]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800608c:	d107      	bne.n	800609e <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb6e 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800609c:	e348      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060a2:	e345      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060a4:	4b27      	ldr	r3, [pc, #156]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b0:	d107      	bne.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060b2:	f107 030c 	add.w	r3, r7, #12
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 fcb0 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060c0:	e336      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c6:	e333      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80060c8:	4b1e      	ldr	r3, [pc, #120]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060d2:	4b1c      	ldr	r3, [pc, #112]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060e4:	4b17      	ldr	r3, [pc, #92]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a16      	ldr	r2, [pc, #88]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060f6:	e01e      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006104:	d106      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8006106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610c:	d102      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006112:	e010      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006114:	4b0b      	ldr	r3, [pc, #44]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006120:	d106      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006128:	d102      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800612a:	4b09      	ldr	r3, [pc, #36]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800612c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800612e:	e002      	b.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006134:	e2fc      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006136:	e2fb      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800613a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800613c:	e2f8      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006142:	e2f5      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006144:	58024400 	.word	0x58024400
 8006148:	03d09000 	.word	0x03d09000
 800614c:	003d0900 	.word	0x003d0900
 8006150:	007a1200 	.word	0x007a1200
 8006154:	00bb8000 	.word	0x00bb8000

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800615e:	f040 809c 	bne.w	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8006162:	4b9d      	ldr	r3, [pc, #628]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006166:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800616a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006172:	d054      	beq.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617a:	f200 808b 	bhi.w	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006184:	f000 8083 	beq.w	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800618e:	f200 8081 	bhi.w	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006198:	d02f      	beq.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a0:	d878      	bhi.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ae:	d012      	beq.n	80061d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80061b0:	e070      	b.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061b2:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061be:	d107      	bne.n	80061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fd7d 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061ce:	e2af      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061d4:	e2ac      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061d6:	4b80      	ldr	r3, [pc, #512]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e2:	d107      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e4:	f107 0318 	add.w	r3, r7, #24
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fac3 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061f2:	e29d      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80061f8:	e29a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061fa:	4b77      	ldr	r3, [pc, #476]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006202:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006206:	d107      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006208:	f107 030c 	add.w	r3, r7, #12
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fc05 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006216:	e28b      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800621c:	e288      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800621e:	4b6e      	ldr	r3, [pc, #440]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006222:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006226:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006228:	4b6b      	ldr	r3, [pc, #428]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0304 	and.w	r3, r3, #4
 8006230:	2b04      	cmp	r3, #4
 8006232:	d10c      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
 8006234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006236:	2b00      	cmp	r3, #0
 8006238:	d109      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x362>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800623a:	4b67      	ldr	r3, [pc, #412]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	4a65      	ldr	r2, [pc, #404]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800624c:	e01e      	b.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800624e:	4b62      	ldr	r3, [pc, #392]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625a:	d106      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006262:	d102      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006264:	4b5e      	ldr	r3, [pc, #376]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006268:	e010      	b.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800626a:	4b5b      	ldr	r3, [pc, #364]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006276:	d106      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627e:	d102      	bne.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006280:	4b58      	ldr	r3, [pc, #352]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006284:	e002      	b.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 800628a:	e251      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 800628c:	e250      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800628e:	4b56      	ldr	r3, [pc, #344]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006292:	e24d      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 8006294:	2300      	movs	r3, #0
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006298:	e24a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a0:	f040 80a7 	bne.w	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80062a4:	4b4c      	ldr	r3, [pc, #304]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80062a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80062ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80062ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b4:	d055      	beq.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062bc:	f200 8096 	bhi.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062c6:	f000 8084 	beq.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80062d0:	f200 808c 	bhi.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062da:	d030      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80062dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e2:	f200 8083 	bhi.w	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f2:	d012      	beq.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80062f4:	e07a      	b.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0x500>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062f6:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006302:	d107      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fcdb 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800630e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006310:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006312:	e20d      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006318:	e20a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800631a:	4b2f      	ldr	r3, [pc, #188]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006326:	d107      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006328:	f107 0318 	add.w	r3, r7, #24
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fa21 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006336:	e1fb      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800633c:	e1f8      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800633e:	4b26      	ldr	r3, [pc, #152]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634a:	d107      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fb63 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800635a:	e1e9      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006360:	e1e6      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006362:	4b1d      	ldr	r3, [pc, #116]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006366:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800636a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800636c:	4b1a      	ldr	r3, [pc, #104]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b04      	cmp	r3, #4
 8006376:	d10c      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800637e:	4b16      	ldr	r3, [pc, #88]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	08db      	lsrs	r3, r3, #3
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	4a14      	ldr	r2, [pc, #80]	; (80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x4f0>)
 800638a:	fa22 f303 	lsr.w	r3, r2, r3
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006390:	e01e      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639e:	d106      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 80063a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063a6:	d102      	bne.n	80063ae <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ac:	e010      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ba:	d106      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80063bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c2:	d102      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063c4:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f8>)
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80063ce:	e1af      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80063d0:	e1ae      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80063d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063d6:	e1ab      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80063d8:	58024400 	.word	0x58024400
 80063dc:	03d09000 	.word	0x03d09000
 80063e0:	003d0900 	.word	0x003d0900
 80063e4:	007a1200 	.word	0x007a1200
 80063e8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80063ec:	2300      	movs	r3, #0
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063f0:	e19e      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063f8:	d173      	bne.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80063fa:	4b9d      	ldr	r3, [pc, #628]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80063fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006402:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640a:	d02f      	beq.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 800640c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006412:	d863      	bhi.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006420:	d012      	beq.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
 8006422:	e05b      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006424:	4b92      	ldr	r3, [pc, #584]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006430:	d107      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f99c 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006440:	e176      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006446:	e173      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006448:	4b89      	ldr	r3, [pc, #548]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006454:	d107      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006456:	f107 030c 	add.w	r3, r7, #12
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fade 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006464:	e164      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800646a:	e161      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800646c:	4b80      	ldr	r3, [pc, #512]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800646e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006470:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006474:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006476:	4b7e      	ldr	r3, [pc, #504]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d10c      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8006482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006488:	4b79      	ldr	r3, [pc, #484]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	08db      	lsrs	r3, r3, #3
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	4a78      	ldr	r2, [pc, #480]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649a:	e01e      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800649c:	4b74      	ldr	r3, [pc, #464]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d106      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b0:	d102      	bne.n	80064b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064b2:	4b71      	ldr	r3, [pc, #452]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80064b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064b6:	e010      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064b8:	4b6d      	ldr	r3, [pc, #436]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c4:	d106      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80064c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064cc:	d102      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80064ce:	4b6b      	ldr	r3, [pc, #428]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80064d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d2:	e002      	b.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80064d8:	e12a      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 80064da:	e129      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 80064dc:	2300      	movs	r3, #0
 80064de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064e0:	e126      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e8:	d133      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80064ea:	4b61      	ldr	r3, [pc, #388]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d012      	beq.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006502:	e023      	b.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006504:	4b5a      	ldr	r3, [pc, #360]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800650c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006510:	d107      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fbd4 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006520:	e106      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006526:	e103      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006528:	4b51      	ldr	r3, [pc, #324]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006534:	d107      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f000 f91a 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006544:	e0f4      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006546:	2300      	movs	r3, #0
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800654a:	e0f1      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }

      default :
        {
          frequency = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006550:	e0ee      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006558:	f040 809b 	bne.w	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800655c:	4b44      	ldr	r3, [pc, #272]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800656c:	f000 808b 	beq.w	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006576:	f200 8089 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800657a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006580:	d06c      	beq.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006588:	f200 8080 	bhi.w	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006592:	d056      	beq.n	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659a:	d877      	bhi.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 800659c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065a2:	d03b      	beq.n	800661c <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065aa:	d86f      	bhi.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b2:	d021      	beq.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
 80065b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ba:	d867      	bhi.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d004      	beq.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065c8:	d004      	beq.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 80065ca:	e05f      	b.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80065cc:	f000 f8bc 	bl	8006748 <HAL_RCCEx_GetD3PCLK1Freq>
 80065d0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80065d2:	e0ad      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065d4:	4b26      	ldr	r3, [pc, #152]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065e0:	d107      	bne.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e2:	f107 0318 	add.w	r3, r7, #24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f8c4 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065f0:	e09e      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065f6:	e09b      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065f8:	4b1d      	ldr	r3, [pc, #116]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006604:	d107      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fa06 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006614:	e08c      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661a:	e089      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800661c:	4b14      	ldr	r3, [pc, #80]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0304 	and.w	r3, r3, #4
 8006624:	2b04      	cmp	r3, #4
 8006626:	d109      	bne.n	800663c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	08db      	lsrs	r3, r3, #3
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006634:	fa22 f303 	lsr.w	r3, r2, r3
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800663a:	e079      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006640:	e076      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d102      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
         {
          frequency = CSI_VALUE;
 8006650:	4b09      	ldr	r3, [pc, #36]	; (8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006654:	e06c      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
           frequency = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800665a:	e069      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x784>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006668:	d10a      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          frequency = HSE_VALUE;
 800666a:	4b04      	ldr	r3, [pc, #16]	; (800667c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800666e:	e05f      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006670:	58024400 	.word	0x58024400
 8006674:	03d09000 	.word	0x03d09000
 8006678:	003d0900 	.word	0x003d0900
 800667c:	007a1200 	.word	0x007a1200
          frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006684:	e054      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668a:	e051      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006690:	e04e      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006698:	d148      	bne.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 800669c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066aa:	d02a      	beq.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066b2:	d838      	bhi.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c0:	d00d      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80066c2:	e030      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066c4:	4b1e      	ldr	r3, [pc, #120]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d0:	d102      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
         {
          frequency = HSE_VALUE;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x858>)
 80066d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066d6:	e02b      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066dc:	e028      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ea:	d107      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fae7 	bl	8006cc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066fa:	e019      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006700:	e016      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x854>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670e:	d107      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006710:	f107 0318 	add.w	r3, r7, #24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 f82d 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800671e:	e007      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
          frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006724:	e004      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      default :
        {
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672a:	e001      	b.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
        }
      }
    }
  else
    {
      frequency = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006732:	4618      	mov	r0, r3
 8006734:	3740      	adds	r7, #64	; 0x40
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	00bb8000 	.word	0x00bb8000
 8006740:	58024400 	.word	0x58024400
 8006744:	007a1200 	.word	0x007a1200

08006748 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800674c:	f7fe fc66 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8006750:	4602      	mov	r2, r0
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	091b      	lsrs	r3, r3, #4
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	4904      	ldr	r1, [pc, #16]	; (8006770 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800675e:	5ccb      	ldrb	r3, [r1, r3]
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	58024400 	.word	0x58024400
 8006770:	08008598 	.word	0x08008598

08006774 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800677c:	4ba1      	ldr	r3, [pc, #644]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006786:	4b9f      	ldr	r3, [pc, #636]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	0b1b      	lsrs	r3, r3, #12
 800678c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006790:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006792:	4b9c      	ldr	r3, [pc, #624]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800679e:	4b99      	ldr	r3, [pc, #612]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	08db      	lsrs	r3, r3, #3
 80067a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 8111 	beq.w	80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	f000 8083 	beq.w	80068d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	f200 80a1 	bhi.w	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d056      	beq.n	800688c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80067de:	e099      	b.n	8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067e0:	4b88      	ldr	r3, [pc, #544]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d02d      	beq.n	8006848 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067ec:	4b85      	ldr	r3, [pc, #532]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	08db      	lsrs	r3, r3, #3
 80067f2:	f003 0303 	and.w	r3, r3, #3
 80067f6:	4a84      	ldr	r2, [pc, #528]	; (8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
 80067fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006816:	4b7b      	ldr	r3, [pc, #492]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681e:	ee07 3a90 	vmov	s15, r3
 8006822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006826:	ed97 6a03 	vldr	s12, [r7, #12]
 800682a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800682e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800683a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006846:	e087      	b.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800685a:	4b6a      	ldr	r3, [pc, #424]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800686a:	ed97 6a03 	vldr	s12, [r7, #12]
 800686e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800687a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800688a:	e065      	b.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800689a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689e:	4b59      	ldr	r3, [pc, #356]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ce:	e043      	b.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80068de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068e2:	4b48      	ldr	r3, [pc, #288]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ea:	ee07 3a90 	vmov	s15, r3
 80068ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80068f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800690a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800690e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006912:	e021      	b.n	8006958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	ee07 3a90 	vmov	s15, r3
 800691a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006936:	ed97 6a03 	vldr	s12, [r7, #12]
 800693a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800693e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800694a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800694e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	0a5b      	lsrs	r3, r3, #9
 800695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800696e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006972:	edd7 6a07 	vldr	s13, [r7, #28]
 8006976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800697e:	ee17 2a90 	vmov	r2, s15
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006986:	4b1f      	ldr	r3, [pc, #124]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	0c1b      	lsrs	r3, r3, #16
 800698c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006990:	ee07 3a90 	vmov	s15, r3
 8006994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800699c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069ac:	ee17 2a90 	vmov	r2, s15
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80069b4:	4b13      	ldr	r3, [pc, #76]	; (8006a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	0e1b      	lsrs	r3, r3, #24
 80069ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80069ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069da:	ee17 2a90 	vmov	r2, s15
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80069e2:	e008      	b.n	80069f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
}
 80069f6:	bf00      	nop
 80069f8:	3724      	adds	r7, #36	; 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	58024400 	.word	0x58024400
 8006a08:	03d09000 	.word	0x03d09000
 8006a0c:	46000000 	.word	0x46000000
 8006a10:	4c742400 	.word	0x4c742400
 8006a14:	4a742400 	.word	0x4a742400
 8006a18:	4af42400 	.word	0x4af42400

08006a1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b089      	sub	sp, #36	; 0x24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a24:	4ba1      	ldr	r3, [pc, #644]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006a2e:	4b9f      	ldr	r3, [pc, #636]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	0d1b      	lsrs	r3, r3, #20
 8006a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006a3a:	4b9c      	ldr	r3, [pc, #624]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006a46:	4b99      	ldr	r3, [pc, #612]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	fb02 f303 	mul.w	r3, r2, r3
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8111 	beq.w	8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f000 8083 	beq.w	8006b78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	f200 80a1 	bhi.w	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d056      	beq.n	8006b34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a86:	e099      	b.n	8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	4b88      	ldr	r3, [pc, #544]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a94:	4b85      	ldr	r3, [pc, #532]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a84      	ldr	r2, [pc, #528]	; (8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abe:	4b7b      	ldr	r3, [pc, #492]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006aee:	e087      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b02:	4b6a      	ldr	r3, [pc, #424]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b32:	e065      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b46:	4b59      	ldr	r3, [pc, #356]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4e:	ee07 3a90 	vmov	s15, r3
 8006b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b76:	e043      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b8a:	4b48      	ldr	r3, [pc, #288]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b92:	ee07 3a90 	vmov	s15, r3
 8006b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bba:	e021      	b.n	8006c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	ee07 3a90 	vmov	s15, r3
 8006bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bce:	4b37      	ldr	r3, [pc, #220]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8006be2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c00:	4b2a      	ldr	r3, [pc, #168]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	0a5b      	lsrs	r3, r3, #9
 8006c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c26:	ee17 2a90 	vmov	r2, s15
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	0c1b      	lsrs	r3, r3, #16
 8006c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c38:	ee07 3a90 	vmov	s15, r3
 8006c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c54:	ee17 2a90 	vmov	r2, s15
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006c5c:	4b13      	ldr	r3, [pc, #76]	; (8006cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c8a:	e008      	b.n	8006c9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	609a      	str	r2, [r3, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	3724      	adds	r7, #36	; 0x24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	03d09000 	.word	0x03d09000
 8006cb4:	46000000 	.word	0x46000000
 8006cb8:	4c742400 	.word	0x4c742400
 8006cbc:	4a742400 	.word	0x4a742400
 8006cc0:	4af42400 	.word	0x4af42400

08006cc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ccc:	4ba0      	ldr	r3, [pc, #640]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006cd6:	4b9e      	ldr	r3, [pc, #632]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	091b      	lsrs	r3, r3, #4
 8006cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ce0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ce2:	4b9b      	ldr	r3, [pc, #620]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cec:	4b98      	ldr	r3, [pc, #608]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf0:	08db      	lsrs	r3, r3, #3
 8006cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	fb02 f303 	mul.w	r3, r2, r3
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 8111 	beq.w	8006f32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	f000 8083 	beq.w	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	f200 80a1 	bhi.w	8006e62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d056      	beq.n	8006dda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006d2c:	e099      	b.n	8006e62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d2e:	4b88      	ldr	r3, [pc, #544]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0320 	and.w	r3, r3, #32
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d02d      	beq.n	8006d96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d3a:	4b85      	ldr	r3, [pc, #532]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	08db      	lsrs	r3, r3, #3
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	4a83      	ldr	r2, [pc, #524]	; (8006f54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	ee07 3a90 	vmov	s15, r3
 8006d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	4b7a      	ldr	r3, [pc, #488]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d94:	e087      	b.n	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006f5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b69      	ldr	r3, [pc, #420]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dbc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dd8:	e065      	b.n	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006f60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b58      	ldr	r3, [pc, #352]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e1c:	e043      	b.n	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b47      	ldr	r3, [pc, #284]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e60:	e021      	b.n	8006ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	ee07 3a90 	vmov	s15, r3
 8006e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006f5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e74:	4b36      	ldr	r3, [pc, #216]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7c:	ee07 3a90 	vmov	s15, r3
 8006e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006f58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ea4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006ea6:	4b2a      	ldr	r3, [pc, #168]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	0a5b      	lsrs	r3, r3, #9
 8006eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 2a90 	vmov	r2, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006ed4:	4b1e      	ldr	r3, [pc, #120]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efa:	ee17 2a90 	vmov	r2, s15
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	0e1b      	lsrs	r3, r3, #24
 8006f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f28:	ee17 2a90 	vmov	r2, s15
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006f30:	e008      	b.n	8006f44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
}
 8006f44:	bf00      	nop
 8006f46:	3724      	adds	r7, #36	; 0x24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr
 8006f50:	58024400 	.word	0x58024400
 8006f54:	03d09000 	.word	0x03d09000
 8006f58:	46000000 	.word	0x46000000
 8006f5c:	4c742400 	.word	0x4c742400
 8006f60:	4a742400 	.word	0x4a742400
 8006f64:	4af42400 	.word	0x4af42400

08006f68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f76:	4b53      	ldr	r3, [pc, #332]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	2b03      	cmp	r3, #3
 8006f80:	d101      	bne.n	8006f86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e099      	b.n	80070ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f86:	4b4f      	ldr	r3, [pc, #316]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4e      	ldr	r2, [pc, #312]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f92:	f7fa fde1 	bl	8001b58 <HAL_GetTick>
 8006f96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f98:	e008      	b.n	8006fac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f9a:	f7fa fddd 	bl	8001b58 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d901      	bls.n	8006fac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e086      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fac:	4b45      	ldr	r3, [pc, #276]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1f0      	bne.n	8006f9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006fb8:	4b42      	ldr	r3, [pc, #264]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	031b      	lsls	r3, r3, #12
 8006fc6:	493f      	ldr	r1, [pc, #252]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	628b      	str	r3, [r1, #40]	; 0x28
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	025b      	lsls	r3, r3, #9
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	041b      	lsls	r3, r3, #16
 8006fea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	061b      	lsls	r3, r3, #24
 8006ff8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ffc:	4931      	ldr	r1, [pc, #196]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007002:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	492d      	ldr	r1, [pc, #180]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007010:	4313      	orrs	r3, r2
 8007012:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007014:	4b2b      	ldr	r3, [pc, #172]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f023 0220 	bic.w	r2, r3, #32
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	4928      	ldr	r1, [pc, #160]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007026:	4b27      	ldr	r3, [pc, #156]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	4a26      	ldr	r2, [pc, #152]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800702c:	f023 0310 	bic.w	r3, r3, #16
 8007030:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007032:	4b24      	ldr	r3, [pc, #144]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007036:	4b24      	ldr	r3, [pc, #144]	; (80070c8 <RCCEx_PLL2_Config+0x160>)
 8007038:	4013      	ands	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	69d2      	ldr	r2, [r2, #28]
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	4920      	ldr	r1, [pc, #128]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007046:	4b1f      	ldr	r3, [pc, #124]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d106      	bne.n	8007066 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007058:	4b1a      	ldr	r3, [pc, #104]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a19      	ldr	r2, [pc, #100]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800705e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007064:	e00f      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d106      	bne.n	800707a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800706c:	4b15      	ldr	r3, [pc, #84]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007078:	e005      	b.n	8007086 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800707a:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007084:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a0e      	ldr	r2, [pc, #56]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fd61 	bl	8001b58 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fa fd5d 	bl	8001b58 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e006      	b.n	80070ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	58024400 	.word	0x58024400
 80070c8:	ffff0007 	.word	0xffff0007

080070cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070da:	4b53      	ldr	r3, [pc, #332]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d101      	bne.n	80070ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e099      	b.n	800721e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80070ea:	4b4f      	ldr	r3, [pc, #316]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a4e      	ldr	r2, [pc, #312]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80070f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f6:	f7fa fd2f 	bl	8001b58 <HAL_GetTick>
 80070fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070fc:	e008      	b.n	8007110 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80070fe:	f7fa fd2b 	bl	8001b58 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e086      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007110:	4b45      	ldr	r3, [pc, #276]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f0      	bne.n	80070fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800711c:	4b42      	ldr	r3, [pc, #264]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800711e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007120:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	051b      	lsls	r3, r3, #20
 800712a:	493f      	ldr	r1, [pc, #252]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800712c:	4313      	orrs	r3, r2
 800712e:	628b      	str	r3, [r1, #40]	; 0x28
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	3b01      	subs	r3, #1
 8007136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	3b01      	subs	r3, #1
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	b29b      	uxth	r3, r3
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	3b01      	subs	r3, #1
 800714c:	041b      	lsls	r3, r3, #16
 800714e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	3b01      	subs	r3, #1
 800715a:	061b      	lsls	r3, r3, #24
 800715c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007160:	4931      	ldr	r1, [pc, #196]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007162:	4313      	orrs	r3, r2
 8007164:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007166:	4b30      	ldr	r3, [pc, #192]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	492d      	ldr	r1, [pc, #180]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007174:	4313      	orrs	r3, r2
 8007176:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007178:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	4928      	ldr	r1, [pc, #160]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800718a:	4b27      	ldr	r3, [pc, #156]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	4a26      	ldr	r2, [pc, #152]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007194:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007196:	4b24      	ldr	r3, [pc, #144]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <RCCEx_PLL3_Config+0x160>)
 800719c:	4013      	ands	r3, r2
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	69d2      	ldr	r2, [r2, #28]
 80071a2:	00d2      	lsls	r2, r2, #3
 80071a4:	4920      	ldr	r1, [pc, #128]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071aa:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ae:	4a1e      	ldr	r2, [pc, #120]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80071bc:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	4a19      	ldr	r2, [pc, #100]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071c8:	e00f      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d106      	bne.n	80071de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80071d0:	4b15      	ldr	r3, [pc, #84]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80071dc:	e005      	b.n	80071ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	4a11      	ldr	r2, [pc, #68]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80071ea:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7fa fcaf 	bl	8001b58 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7fa fcab 	bl	8001b58 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e006      	b.n	800721e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007210:	4b05      	ldr	r3, [pc, #20]	; (8007228 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0f0      	beq.n	80071fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	58024400 	.word	0x58024400
 800722c:	ffff0007 	.word	0xffff0007

08007230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e042      	b.n	80072c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007248:	2b00      	cmp	r3, #0
 800724a:	d106      	bne.n	800725a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fa f9eb 	bl	8001630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2224      	movs	r2, #36	; 0x24
 800725e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f82c 	bl	80072d0 <UART_SetConfig>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e022      	b.n	80072c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fe8c 	bl	8007fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800729e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689a      	ldr	r2, [r3, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0201 	orr.w	r2, r2, #1
 80072be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 ff13 	bl	80080ec <UART_CheckIdleState>
 80072c6:	4603      	mov	r3, r0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d4:	b092      	sub	sp, #72	; 0x48
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	431a      	orrs	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4bbe      	ldr	r3, [pc, #760]	; (80075f8 <UART_SetConfig+0x328>)
 8007300:	4013      	ands	r3, r2
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007308:	430b      	orrs	r3, r1
 800730a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4ab3      	ldr	r2, [pc, #716]	; (80075fc <UART_SetConfig+0x32c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d004      	beq.n	800733c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007338:	4313      	orrs	r3, r2
 800733a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689a      	ldr	r2, [r3, #8]
 8007342:	4baf      	ldr	r3, [pc, #700]	; (8007600 <UART_SetConfig+0x330>)
 8007344:	4013      	ands	r3, r2
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800734c:	430b      	orrs	r3, r1
 800734e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	f023 010f 	bic.w	r1, r3, #15
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4aa6      	ldr	r2, [pc, #664]	; (8007604 <UART_SetConfig+0x334>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d177      	bne.n	8007460 <UART_SetConfig+0x190>
 8007370:	4ba5      	ldr	r3, [pc, #660]	; (8007608 <UART_SetConfig+0x338>)
 8007372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007378:	2b28      	cmp	r3, #40	; 0x28
 800737a:	d86d      	bhi.n	8007458 <UART_SetConfig+0x188>
 800737c:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0xb4>)
 800737e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007382:	bf00      	nop
 8007384:	08007429 	.word	0x08007429
 8007388:	08007459 	.word	0x08007459
 800738c:	08007459 	.word	0x08007459
 8007390:	08007459 	.word	0x08007459
 8007394:	08007459 	.word	0x08007459
 8007398:	08007459 	.word	0x08007459
 800739c:	08007459 	.word	0x08007459
 80073a0:	08007459 	.word	0x08007459
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007459 	.word	0x08007459
 80073ac:	08007459 	.word	0x08007459
 80073b0:	08007459 	.word	0x08007459
 80073b4:	08007459 	.word	0x08007459
 80073b8:	08007459 	.word	0x08007459
 80073bc:	08007459 	.word	0x08007459
 80073c0:	08007459 	.word	0x08007459
 80073c4:	08007439 	.word	0x08007439
 80073c8:	08007459 	.word	0x08007459
 80073cc:	08007459 	.word	0x08007459
 80073d0:	08007459 	.word	0x08007459
 80073d4:	08007459 	.word	0x08007459
 80073d8:	08007459 	.word	0x08007459
 80073dc:	08007459 	.word	0x08007459
 80073e0:	08007459 	.word	0x08007459
 80073e4:	08007441 	.word	0x08007441
 80073e8:	08007459 	.word	0x08007459
 80073ec:	08007459 	.word	0x08007459
 80073f0:	08007459 	.word	0x08007459
 80073f4:	08007459 	.word	0x08007459
 80073f8:	08007459 	.word	0x08007459
 80073fc:	08007459 	.word	0x08007459
 8007400:	08007459 	.word	0x08007459
 8007404:	08007449 	.word	0x08007449
 8007408:	08007459 	.word	0x08007459
 800740c:	08007459 	.word	0x08007459
 8007410:	08007459 	.word	0x08007459
 8007414:	08007459 	.word	0x08007459
 8007418:	08007459 	.word	0x08007459
 800741c:	08007459 	.word	0x08007459
 8007420:	08007459 	.word	0x08007459
 8007424:	08007451 	.word	0x08007451
 8007428:	2301      	movs	r3, #1
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800742e:	e326      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007430:	2304      	movs	r3, #4
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007436:	e322      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007438:	2308      	movs	r3, #8
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800743e:	e31e      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007440:	2310      	movs	r3, #16
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007446:	e31a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007448:	2320      	movs	r3, #32
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800744e:	e316      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007456:	e312      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007458:	2380      	movs	r3, #128	; 0x80
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800745e:	e30e      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a69      	ldr	r2, [pc, #420]	; (800760c <UART_SetConfig+0x33c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d130      	bne.n	80074cc <UART_SetConfig+0x1fc>
 800746a:	4b67      	ldr	r3, [pc, #412]	; (8007608 <UART_SetConfig+0x338>)
 800746c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b05      	cmp	r3, #5
 8007474:	d826      	bhi.n	80074c4 <UART_SetConfig+0x1f4>
 8007476:	a201      	add	r2, pc, #4	; (adr r2, 800747c <UART_SetConfig+0x1ac>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007495 	.word	0x08007495
 8007480:	0800749d 	.word	0x0800749d
 8007484:	080074a5 	.word	0x080074a5
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749a:	e2f0      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074a2:	e2ec      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074aa:	e2e8      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074b2:	e2e4      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074b4:	2320      	movs	r3, #32
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ba:	e2e0      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c2:	e2dc      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ca:	e2d8      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a4f      	ldr	r2, [pc, #316]	; (8007610 <UART_SetConfig+0x340>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d130      	bne.n	8007538 <UART_SetConfig+0x268>
 80074d6:	4b4c      	ldr	r3, [pc, #304]	; (8007608 <UART_SetConfig+0x338>)
 80074d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d826      	bhi.n	8007530 <UART_SetConfig+0x260>
 80074e2:	a201      	add	r2, pc, #4	; (adr r2, 80074e8 <UART_SetConfig+0x218>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007501 	.word	0x08007501
 80074ec:	08007509 	.word	0x08007509
 80074f0:	08007511 	.word	0x08007511
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007529 	.word	0x08007529
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e2ba      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007508:	2304      	movs	r3, #4
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e2b6      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007510:	2308      	movs	r3, #8
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007516:	e2b2      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007518:	2310      	movs	r3, #16
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800751e:	e2ae      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007520:	2320      	movs	r3, #32
 8007522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007526:	e2aa      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007528:	2340      	movs	r3, #64	; 0x40
 800752a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800752e:	e2a6      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007530:	2380      	movs	r3, #128	; 0x80
 8007532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007536:	e2a2      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a35      	ldr	r2, [pc, #212]	; (8007614 <UART_SetConfig+0x344>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d130      	bne.n	80075a4 <UART_SetConfig+0x2d4>
 8007542:	4b31      	ldr	r3, [pc, #196]	; (8007608 <UART_SetConfig+0x338>)
 8007544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	2b05      	cmp	r3, #5
 800754c:	d826      	bhi.n	800759c <UART_SetConfig+0x2cc>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x284>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	0800756d 	.word	0x0800756d
 8007558:	08007575 	.word	0x08007575
 800755c:	0800757d 	.word	0x0800757d
 8007560:	08007585 	.word	0x08007585
 8007564:	0800758d 	.word	0x0800758d
 8007568:	08007595 	.word	0x08007595
 800756c:	2300      	movs	r3, #0
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e284      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e280      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007582:	e27c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800758a:	e278      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800758c:	2320      	movs	r3, #32
 800758e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007592:	e274      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007594:	2340      	movs	r3, #64	; 0x40
 8007596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800759a:	e270      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800759c:	2380      	movs	r3, #128	; 0x80
 800759e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075a2:	e26c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1b      	ldr	r2, [pc, #108]	; (8007618 <UART_SetConfig+0x348>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d142      	bne.n	8007634 <UART_SetConfig+0x364>
 80075ae:	4b16      	ldr	r3, [pc, #88]	; (8007608 <UART_SetConfig+0x338>)
 80075b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b05      	cmp	r3, #5
 80075b8:	d838      	bhi.n	800762c <UART_SetConfig+0x35c>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x2f0>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075d9 	.word	0x080075d9
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075e9 	.word	0x080075e9
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	0800761d 	.word	0x0800761d
 80075d4:	08007625 	.word	0x08007625
 80075d8:	2300      	movs	r3, #0
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075de:	e24e      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80075e0:	2304      	movs	r3, #4
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e6:	e24a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80075e8:	2308      	movs	r3, #8
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ee:	e246      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80075f0:	2310      	movs	r3, #16
 80075f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075f6:	e242      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80075f8:	cfff69f3 	.word	0xcfff69f3
 80075fc:	58000c00 	.word	0x58000c00
 8007600:	11fff4ff 	.word	0x11fff4ff
 8007604:	40011000 	.word	0x40011000
 8007608:	58024400 	.word	0x58024400
 800760c:	40004400 	.word	0x40004400
 8007610:	40004800 	.word	0x40004800
 8007614:	40004c00 	.word	0x40004c00
 8007618:	40005000 	.word	0x40005000
 800761c:	2320      	movs	r3, #32
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007622:	e22c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007624:	2340      	movs	r3, #64	; 0x40
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762a:	e228      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007632:	e224      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4ab1      	ldr	r2, [pc, #708]	; (8007900 <UART_SetConfig+0x630>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d176      	bne.n	800772c <UART_SetConfig+0x45c>
 800763e:	4bb1      	ldr	r3, [pc, #708]	; (8007904 <UART_SetConfig+0x634>)
 8007640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007646:	2b28      	cmp	r3, #40	; 0x28
 8007648:	d86c      	bhi.n	8007724 <UART_SetConfig+0x454>
 800764a:	a201      	add	r2, pc, #4	; (adr r2, 8007650 <UART_SetConfig+0x380>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	080076f5 	.word	0x080076f5
 8007654:	08007725 	.word	0x08007725
 8007658:	08007725 	.word	0x08007725
 800765c:	08007725 	.word	0x08007725
 8007660:	08007725 	.word	0x08007725
 8007664:	08007725 	.word	0x08007725
 8007668:	08007725 	.word	0x08007725
 800766c:	08007725 	.word	0x08007725
 8007670:	080076fd 	.word	0x080076fd
 8007674:	08007725 	.word	0x08007725
 8007678:	08007725 	.word	0x08007725
 800767c:	08007725 	.word	0x08007725
 8007680:	08007725 	.word	0x08007725
 8007684:	08007725 	.word	0x08007725
 8007688:	08007725 	.word	0x08007725
 800768c:	08007725 	.word	0x08007725
 8007690:	08007705 	.word	0x08007705
 8007694:	08007725 	.word	0x08007725
 8007698:	08007725 	.word	0x08007725
 800769c:	08007725 	.word	0x08007725
 80076a0:	08007725 	.word	0x08007725
 80076a4:	08007725 	.word	0x08007725
 80076a8:	08007725 	.word	0x08007725
 80076ac:	08007725 	.word	0x08007725
 80076b0:	0800770d 	.word	0x0800770d
 80076b4:	08007725 	.word	0x08007725
 80076b8:	08007725 	.word	0x08007725
 80076bc:	08007725 	.word	0x08007725
 80076c0:	08007725 	.word	0x08007725
 80076c4:	08007725 	.word	0x08007725
 80076c8:	08007725 	.word	0x08007725
 80076cc:	08007725 	.word	0x08007725
 80076d0:	08007715 	.word	0x08007715
 80076d4:	08007725 	.word	0x08007725
 80076d8:	08007725 	.word	0x08007725
 80076dc:	08007725 	.word	0x08007725
 80076e0:	08007725 	.word	0x08007725
 80076e4:	08007725 	.word	0x08007725
 80076e8:	08007725 	.word	0x08007725
 80076ec:	08007725 	.word	0x08007725
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80076fa:	e1c0      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007702:	e1bc      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800770a:	e1b8      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007712:	e1b4      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007714:	2320      	movs	r3, #32
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800771a:	e1b0      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800771c:	2340      	movs	r3, #64	; 0x40
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007722:	e1ac      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007724:	2380      	movs	r3, #128	; 0x80
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800772a:	e1a8      	b.n	8007a7e <UART_SetConfig+0x7ae>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a75      	ldr	r2, [pc, #468]	; (8007908 <UART_SetConfig+0x638>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d130      	bne.n	8007798 <UART_SetConfig+0x4c8>
 8007736:	4b73      	ldr	r3, [pc, #460]	; (8007904 <UART_SetConfig+0x634>)
 8007738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b05      	cmp	r3, #5
 8007740:	d826      	bhi.n	8007790 <UART_SetConfig+0x4c0>
 8007742:	a201      	add	r2, pc, #4	; (adr r2, 8007748 <UART_SetConfig+0x478>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007761 	.word	0x08007761
 800774c:	08007769 	.word	0x08007769
 8007750:	08007771 	.word	0x08007771
 8007754:	08007779 	.word	0x08007779
 8007758:	08007781 	.word	0x08007781
 800775c:	08007789 	.word	0x08007789
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007766:	e18a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776e:	e186      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007776:	e182      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800777e:	e17e      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007780:	2320      	movs	r3, #32
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007786:	e17a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007788:	2340      	movs	r3, #64	; 0x40
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800778e:	e176      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007790:	2380      	movs	r3, #128	; 0x80
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007796:	e172      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a5b      	ldr	r2, [pc, #364]	; (800790c <UART_SetConfig+0x63c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d130      	bne.n	8007804 <UART_SetConfig+0x534>
 80077a2:	4b58      	ldr	r3, [pc, #352]	; (8007904 <UART_SetConfig+0x634>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b05      	cmp	r3, #5
 80077ac:	d826      	bhi.n	80077fc <UART_SetConfig+0x52c>
 80077ae:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0x4e4>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077cd 	.word	0x080077cd
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	080077ed 	.word	0x080077ed
 80077c8:	080077f5 	.word	0x080077f5
 80077cc:	2300      	movs	r3, #0
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d2:	e154      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077da:	e150      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077e2:	e14c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ea:	e148      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077ec:	2320      	movs	r3, #32
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e144      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077f4:	2340      	movs	r3, #64	; 0x40
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077fa:	e140      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80077fc:	2380      	movs	r3, #128	; 0x80
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007802:	e13c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a41      	ldr	r2, [pc, #260]	; (8007910 <UART_SetConfig+0x640>)
 800780a:	4293      	cmp	r3, r2
 800780c:	f040 8082 	bne.w	8007914 <UART_SetConfig+0x644>
 8007810:	4b3c      	ldr	r3, [pc, #240]	; (8007904 <UART_SetConfig+0x634>)
 8007812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007814:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007818:	2b28      	cmp	r3, #40	; 0x28
 800781a:	d86d      	bhi.n	80078f8 <UART_SetConfig+0x628>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0x554>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	080078c9 	.word	0x080078c9
 8007828:	080078f9 	.word	0x080078f9
 800782c:	080078f9 	.word	0x080078f9
 8007830:	080078f9 	.word	0x080078f9
 8007834:	080078f9 	.word	0x080078f9
 8007838:	080078f9 	.word	0x080078f9
 800783c:	080078f9 	.word	0x080078f9
 8007840:	080078f9 	.word	0x080078f9
 8007844:	080078d1 	.word	0x080078d1
 8007848:	080078f9 	.word	0x080078f9
 800784c:	080078f9 	.word	0x080078f9
 8007850:	080078f9 	.word	0x080078f9
 8007854:	080078f9 	.word	0x080078f9
 8007858:	080078f9 	.word	0x080078f9
 800785c:	080078f9 	.word	0x080078f9
 8007860:	080078f9 	.word	0x080078f9
 8007864:	080078d9 	.word	0x080078d9
 8007868:	080078f9 	.word	0x080078f9
 800786c:	080078f9 	.word	0x080078f9
 8007870:	080078f9 	.word	0x080078f9
 8007874:	080078f9 	.word	0x080078f9
 8007878:	080078f9 	.word	0x080078f9
 800787c:	080078f9 	.word	0x080078f9
 8007880:	080078f9 	.word	0x080078f9
 8007884:	080078e1 	.word	0x080078e1
 8007888:	080078f9 	.word	0x080078f9
 800788c:	080078f9 	.word	0x080078f9
 8007890:	080078f9 	.word	0x080078f9
 8007894:	080078f9 	.word	0x080078f9
 8007898:	080078f9 	.word	0x080078f9
 800789c:	080078f9 	.word	0x080078f9
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078f9 	.word	0x080078f9
 80078ac:	080078f9 	.word	0x080078f9
 80078b0:	080078f9 	.word	0x080078f9
 80078b4:	080078f9 	.word	0x080078f9
 80078b8:	080078f9 	.word	0x080078f9
 80078bc:	080078f9 	.word	0x080078f9
 80078c0:	080078f9 	.word	0x080078f9
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ce:	e0d6      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078d6:	e0d2      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078de:	e0ce      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078e6:	e0ca      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078e8:	2320      	movs	r3, #32
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ee:	e0c6      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078f6:	e0c2      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80078f8:	2380      	movs	r3, #128	; 0x80
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078fe:	e0be      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007900:	40011400 	.word	0x40011400
 8007904:	58024400 	.word	0x58024400
 8007908:	40007800 	.word	0x40007800
 800790c:	40007c00 	.word	0x40007c00
 8007910:	40011800 	.word	0x40011800
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4aad      	ldr	r2, [pc, #692]	; (8007bd0 <UART_SetConfig+0x900>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d176      	bne.n	8007a0c <UART_SetConfig+0x73c>
 800791e:	4bad      	ldr	r3, [pc, #692]	; (8007bd4 <UART_SetConfig+0x904>)
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007926:	2b28      	cmp	r3, #40	; 0x28
 8007928:	d86c      	bhi.n	8007a04 <UART_SetConfig+0x734>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <UART_SetConfig+0x660>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	080079d5 	.word	0x080079d5
 8007934:	08007a05 	.word	0x08007a05
 8007938:	08007a05 	.word	0x08007a05
 800793c:	08007a05 	.word	0x08007a05
 8007940:	08007a05 	.word	0x08007a05
 8007944:	08007a05 	.word	0x08007a05
 8007948:	08007a05 	.word	0x08007a05
 800794c:	08007a05 	.word	0x08007a05
 8007950:	080079dd 	.word	0x080079dd
 8007954:	08007a05 	.word	0x08007a05
 8007958:	08007a05 	.word	0x08007a05
 800795c:	08007a05 	.word	0x08007a05
 8007960:	08007a05 	.word	0x08007a05
 8007964:	08007a05 	.word	0x08007a05
 8007968:	08007a05 	.word	0x08007a05
 800796c:	08007a05 	.word	0x08007a05
 8007970:	080079e5 	.word	0x080079e5
 8007974:	08007a05 	.word	0x08007a05
 8007978:	08007a05 	.word	0x08007a05
 800797c:	08007a05 	.word	0x08007a05
 8007980:	08007a05 	.word	0x08007a05
 8007984:	08007a05 	.word	0x08007a05
 8007988:	08007a05 	.word	0x08007a05
 800798c:	08007a05 	.word	0x08007a05
 8007990:	080079ed 	.word	0x080079ed
 8007994:	08007a05 	.word	0x08007a05
 8007998:	08007a05 	.word	0x08007a05
 800799c:	08007a05 	.word	0x08007a05
 80079a0:	08007a05 	.word	0x08007a05
 80079a4:	08007a05 	.word	0x08007a05
 80079a8:	08007a05 	.word	0x08007a05
 80079ac:	08007a05 	.word	0x08007a05
 80079b0:	080079f5 	.word	0x080079f5
 80079b4:	08007a05 	.word	0x08007a05
 80079b8:	08007a05 	.word	0x08007a05
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a05 	.word	0x08007a05
 80079c4:	08007a05 	.word	0x08007a05
 80079c8:	08007a05 	.word	0x08007a05
 80079cc:	08007a05 	.word	0x08007a05
 80079d0:	080079fd 	.word	0x080079fd
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079da:	e050      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80079dc:	2304      	movs	r3, #4
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079e2:	e04c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80079e4:	2308      	movs	r3, #8
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079ea:	e048      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079f2:	e044      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80079f4:	2320      	movs	r3, #32
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80079fa:	e040      	b.n	8007a7e <UART_SetConfig+0x7ae>
 80079fc:	2340      	movs	r3, #64	; 0x40
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a02:	e03c      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a04:	2380      	movs	r3, #128	; 0x80
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a0a:	e038      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a71      	ldr	r2, [pc, #452]	; (8007bd8 <UART_SetConfig+0x908>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d130      	bne.n	8007a78 <UART_SetConfig+0x7a8>
 8007a16:	4b6f      	ldr	r3, [pc, #444]	; (8007bd4 <UART_SetConfig+0x904>)
 8007a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d826      	bhi.n	8007a70 <UART_SetConfig+0x7a0>
 8007a22:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <UART_SetConfig+0x758>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a41 	.word	0x08007a41
 8007a2c:	08007a49 	.word	0x08007a49
 8007a30:	08007a51 	.word	0x08007a51
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	2302      	movs	r3, #2
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a46:	e01a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a4e:	e016      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a50:	2308      	movs	r3, #8
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a56:	e012      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a5e:	e00e      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a60:	2320      	movs	r3, #32
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a66:	e00a      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a68:	2340      	movs	r3, #64	; 0x40
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a6e:	e006      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a70:	2380      	movs	r3, #128	; 0x80
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007a76:	e002      	b.n	8007a7e <UART_SetConfig+0x7ae>
 8007a78:	2380      	movs	r3, #128	; 0x80
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a55      	ldr	r2, [pc, #340]	; (8007bd8 <UART_SetConfig+0x908>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	f040 80f8 	bne.w	8007c7a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a8a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	dc46      	bgt.n	8007b20 <UART_SetConfig+0x850>
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	db75      	blt.n	8007b82 <UART_SetConfig+0x8b2>
 8007a96:	3b02      	subs	r3, #2
 8007a98:	2b1e      	cmp	r3, #30
 8007a9a:	d872      	bhi.n	8007b82 <UART_SetConfig+0x8b2>
 8007a9c:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0x7d4>)
 8007a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa2:	bf00      	nop
 8007aa4:	08007b27 	.word	0x08007b27
 8007aa8:	08007b83 	.word	0x08007b83
 8007aac:	08007b2f 	.word	0x08007b2f
 8007ab0:	08007b83 	.word	0x08007b83
 8007ab4:	08007b83 	.word	0x08007b83
 8007ab8:	08007b83 	.word	0x08007b83
 8007abc:	08007b3f 	.word	0x08007b3f
 8007ac0:	08007b83 	.word	0x08007b83
 8007ac4:	08007b83 	.word	0x08007b83
 8007ac8:	08007b83 	.word	0x08007b83
 8007acc:	08007b83 	.word	0x08007b83
 8007ad0:	08007b83 	.word	0x08007b83
 8007ad4:	08007b83 	.word	0x08007b83
 8007ad8:	08007b83 	.word	0x08007b83
 8007adc:	08007b4f 	.word	0x08007b4f
 8007ae0:	08007b83 	.word	0x08007b83
 8007ae4:	08007b83 	.word	0x08007b83
 8007ae8:	08007b83 	.word	0x08007b83
 8007aec:	08007b83 	.word	0x08007b83
 8007af0:	08007b83 	.word	0x08007b83
 8007af4:	08007b83 	.word	0x08007b83
 8007af8:	08007b83 	.word	0x08007b83
 8007afc:	08007b83 	.word	0x08007b83
 8007b00:	08007b83 	.word	0x08007b83
 8007b04:	08007b83 	.word	0x08007b83
 8007b08:	08007b83 	.word	0x08007b83
 8007b0c:	08007b83 	.word	0x08007b83
 8007b10:	08007b83 	.word	0x08007b83
 8007b14:	08007b83 	.word	0x08007b83
 8007b18:	08007b83 	.word	0x08007b83
 8007b1c:	08007b75 	.word	0x08007b75
 8007b20:	2b40      	cmp	r3, #64	; 0x40
 8007b22:	d02a      	beq.n	8007b7a <UART_SetConfig+0x8aa>
 8007b24:	e02d      	b.n	8007b82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007b26:	f7fe fe0f 	bl	8006748 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b2c:	e02f      	b.n	8007b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fe1e 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b3c:	e027      	b.n	8007b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b3e:	f107 0318 	add.w	r3, r7, #24
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe ff6a 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b4c:	e01f      	b.n	8007b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <UART_SetConfig+0x904>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d009      	beq.n	8007b6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <UART_SetConfig+0x904>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <UART_SetConfig+0x90c>)
 8007b66:	fa22 f303 	lsr.w	r3, r2, r3
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b6c:	e00f      	b.n	8007b8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b6e:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <UART_SetConfig+0x90c>)
 8007b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b72:	e00c      	b.n	8007b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <UART_SetConfig+0x910>)
 8007b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b78:	e009      	b.n	8007b8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b80:	e005      	b.n	8007b8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007b8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 81ee 	beq.w	8007f72 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	4a12      	ldr	r2, [pc, #72]	; (8007be4 <UART_SetConfig+0x914>)
 8007b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d305      	bcc.n	8007bc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d910      	bls.n	8007be8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007bcc:	e1d1      	b.n	8007f72 <UART_SetConfig+0xca2>
 8007bce:	bf00      	nop
 8007bd0:	40011c00 	.word	0x40011c00
 8007bd4:	58024400 	.word	0x58024400
 8007bd8:	58000c00 	.word	0x58000c00
 8007bdc:	03d09000 	.word	0x03d09000
 8007be0:	003d0900 	.word	0x003d0900
 8007be4:	080085a8 	.word	0x080085a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bea:	2200      	movs	r2, #0
 8007bec:	60bb      	str	r3, [r7, #8]
 8007bee:	60fa      	str	r2, [r7, #12]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	4ac0      	ldr	r2, [pc, #768]	; (8007ef8 <UART_SetConfig+0xc28>)
 8007bf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	603b      	str	r3, [r7, #0]
 8007c00:	607a      	str	r2, [r7, #4]
 8007c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c0a:	f7f8 fb6f 	bl	80002ec <__aeabi_uldivmod>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	4610      	mov	r0, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	020b      	lsls	r3, r1, #8
 8007c20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c24:	0202      	lsls	r2, r0, #8
 8007c26:	6979      	ldr	r1, [r7, #20]
 8007c28:	6849      	ldr	r1, [r1, #4]
 8007c2a:	0849      	lsrs	r1, r1, #1
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4605      	mov	r5, r0
 8007c32:	eb12 0804 	adds.w	r8, r2, r4
 8007c36:	eb43 0905 	adc.w	r9, r3, r5
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	469a      	mov	sl, r3
 8007c42:	4693      	mov	fp, r2
 8007c44:	4652      	mov	r2, sl
 8007c46:	465b      	mov	r3, fp
 8007c48:	4640      	mov	r0, r8
 8007c4a:	4649      	mov	r1, r9
 8007c4c:	f7f8 fb4e 	bl	80002ec <__aeabi_uldivmod>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	4613      	mov	r3, r2
 8007c56:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c5e:	d308      	bcc.n	8007c72 <UART_SetConfig+0x9a2>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c66:	d204      	bcs.n	8007c72 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c6e:	60da      	str	r2, [r3, #12]
 8007c70:	e17f      	b.n	8007f72 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c78:	e17b      	b.n	8007f72 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c82:	f040 80bd 	bne.w	8007e00 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007c86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	dc48      	bgt.n	8007d20 <UART_SetConfig+0xa50>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	db7b      	blt.n	8007d8a <UART_SetConfig+0xaba>
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	d879      	bhi.n	8007d8a <UART_SetConfig+0xaba>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <UART_SetConfig+0x9cc>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007d27 	.word	0x08007d27
 8007ca0:	08007d2f 	.word	0x08007d2f
 8007ca4:	08007d8b 	.word	0x08007d8b
 8007ca8:	08007d8b 	.word	0x08007d8b
 8007cac:	08007d37 	.word	0x08007d37
 8007cb0:	08007d8b 	.word	0x08007d8b
 8007cb4:	08007d8b 	.word	0x08007d8b
 8007cb8:	08007d8b 	.word	0x08007d8b
 8007cbc:	08007d47 	.word	0x08007d47
 8007cc0:	08007d8b 	.word	0x08007d8b
 8007cc4:	08007d8b 	.word	0x08007d8b
 8007cc8:	08007d8b 	.word	0x08007d8b
 8007ccc:	08007d8b 	.word	0x08007d8b
 8007cd0:	08007d8b 	.word	0x08007d8b
 8007cd4:	08007d8b 	.word	0x08007d8b
 8007cd8:	08007d8b 	.word	0x08007d8b
 8007cdc:	08007d57 	.word	0x08007d57
 8007ce0:	08007d8b 	.word	0x08007d8b
 8007ce4:	08007d8b 	.word	0x08007d8b
 8007ce8:	08007d8b 	.word	0x08007d8b
 8007cec:	08007d8b 	.word	0x08007d8b
 8007cf0:	08007d8b 	.word	0x08007d8b
 8007cf4:	08007d8b 	.word	0x08007d8b
 8007cf8:	08007d8b 	.word	0x08007d8b
 8007cfc:	08007d8b 	.word	0x08007d8b
 8007d00:	08007d8b 	.word	0x08007d8b
 8007d04:	08007d8b 	.word	0x08007d8b
 8007d08:	08007d8b 	.word	0x08007d8b
 8007d0c:	08007d8b 	.word	0x08007d8b
 8007d10:	08007d8b 	.word	0x08007d8b
 8007d14:	08007d8b 	.word	0x08007d8b
 8007d18:	08007d8b 	.word	0x08007d8b
 8007d1c:	08007d7d 	.word	0x08007d7d
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	d02e      	beq.n	8007d82 <UART_SetConfig+0xab2>
 8007d24:	e031      	b.n	8007d8a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d26:	f7fd f9a9 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d2c:	e033      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d2e:	f7fd f9bb 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8007d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007d34:	e02f      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fd1a 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d44:	e027      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d46:	f107 0318 	add.w	r3, r7, #24
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fe66 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d54:	e01f      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d56:	4b69      	ldr	r3, [pc, #420]	; (8007efc <UART_SetConfig+0xc2c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d62:	4b66      	ldr	r3, [pc, #408]	; (8007efc <UART_SetConfig+0xc2c>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	08db      	lsrs	r3, r3, #3
 8007d68:	f003 0303 	and.w	r3, r3, #3
 8007d6c:	4a64      	ldr	r2, [pc, #400]	; (8007f00 <UART_SetConfig+0xc30>)
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d74:	e00f      	b.n	8007d96 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007d76:	4b62      	ldr	r3, [pc, #392]	; (8007f00 <UART_SetConfig+0xc30>)
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d7a:	e00c      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d7c:	4b61      	ldr	r3, [pc, #388]	; (8007f04 <UART_SetConfig+0xc34>)
 8007d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d80:	e009      	b.n	8007d96 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d88:	e005      	b.n	8007d96 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 80ea 	beq.w	8007f72 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	4a55      	ldr	r2, [pc, #340]	; (8007ef8 <UART_SetConfig+0xc28>)
 8007da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db0:	005a      	lsls	r2, r3, #1
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	441a      	add	r2, r3
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d916      	bls.n	8007df8 <UART_SetConfig+0xb28>
 8007dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd0:	d212      	bcs.n	8007df8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f023 030f 	bic.w	r3, r3, #15
 8007dda:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dea:	4313      	orrs	r3, r2
 8007dec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	e0bc      	b.n	8007f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007dfe:	e0b8      	b.n	8007f72 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e00:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	dc4b      	bgt.n	8007ea0 <UART_SetConfig+0xbd0>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f2c0 8087 	blt.w	8007f1c <UART_SetConfig+0xc4c>
 8007e0e:	2b20      	cmp	r3, #32
 8007e10:	f200 8084 	bhi.w	8007f1c <UART_SetConfig+0xc4c>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0xb4c>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007ea7 	.word	0x08007ea7
 8007e20:	08007eaf 	.word	0x08007eaf
 8007e24:	08007f1d 	.word	0x08007f1d
 8007e28:	08007f1d 	.word	0x08007f1d
 8007e2c:	08007eb7 	.word	0x08007eb7
 8007e30:	08007f1d 	.word	0x08007f1d
 8007e34:	08007f1d 	.word	0x08007f1d
 8007e38:	08007f1d 	.word	0x08007f1d
 8007e3c:	08007ec7 	.word	0x08007ec7
 8007e40:	08007f1d 	.word	0x08007f1d
 8007e44:	08007f1d 	.word	0x08007f1d
 8007e48:	08007f1d 	.word	0x08007f1d
 8007e4c:	08007f1d 	.word	0x08007f1d
 8007e50:	08007f1d 	.word	0x08007f1d
 8007e54:	08007f1d 	.word	0x08007f1d
 8007e58:	08007f1d 	.word	0x08007f1d
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007f1d 	.word	0x08007f1d
 8007e64:	08007f1d 	.word	0x08007f1d
 8007e68:	08007f1d 	.word	0x08007f1d
 8007e6c:	08007f1d 	.word	0x08007f1d
 8007e70:	08007f1d 	.word	0x08007f1d
 8007e74:	08007f1d 	.word	0x08007f1d
 8007e78:	08007f1d 	.word	0x08007f1d
 8007e7c:	08007f1d 	.word	0x08007f1d
 8007e80:	08007f1d 	.word	0x08007f1d
 8007e84:	08007f1d 	.word	0x08007f1d
 8007e88:	08007f1d 	.word	0x08007f1d
 8007e8c:	08007f1d 	.word	0x08007f1d
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f1d 	.word	0x08007f1d
 8007e98:	08007f1d 	.word	0x08007f1d
 8007e9c:	08007f0f 	.word	0x08007f0f
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	d037      	beq.n	8007f14 <UART_SetConfig+0xc44>
 8007ea4:	e03a      	b.n	8007f1c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea6:	f7fd f8e9 	bl	800507c <HAL_RCC_GetPCLK1Freq>
 8007eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eac:	e03c      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eae:	f7fd f8fb 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8007eb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007eb4:	e038      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fc5a 	bl	8006774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ec4:	e030      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec6:	f107 0318 	add.w	r3, r7, #24
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fda6 	bl	8006a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ed4:	e028      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ed6:	4b09      	ldr	r3, [pc, #36]	; (8007efc <UART_SetConfig+0xc2c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d012      	beq.n	8007f08 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <UART_SetConfig+0xc2c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	08db      	lsrs	r3, r3, #3
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	4a04      	ldr	r2, [pc, #16]	; (8007f00 <UART_SetConfig+0xc30>)
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ef4:	e018      	b.n	8007f28 <UART_SetConfig+0xc58>
 8007ef6:	bf00      	nop
 8007ef8:	080085a8 	.word	0x080085a8
 8007efc:	58024400 	.word	0x58024400
 8007f00:	03d09000 	.word	0x03d09000
 8007f04:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007f08:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <UART_SetConfig+0xccc>)
 8007f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f0c:	e00c      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <UART_SetConfig+0xcd0>)
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f12:	e009      	b.n	8007f28 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f1a:	e005      	b.n	8007f28 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007f26:	bf00      	nop
    }

    if (pclk != 0U)
 8007f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d021      	beq.n	8007f72 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <UART_SetConfig+0xcd4>)
 8007f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	441a      	add	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f54:	2b0f      	cmp	r3, #15
 8007f56:	d909      	bls.n	8007f6c <UART_SetConfig+0xc9c>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5e:	d205      	bcs.n	8007f6c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	e002      	b.n	8007f72 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007f8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3748      	adds	r7, #72	; 0x48
 8007f96:	46bd      	mov	sp, r7
 8007f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9c:	03d09000 	.word	0x03d09000
 8007fa0:	003d0900 	.word	0x003d0900
 8007fa4:	080085a8 	.word	0x080085a8

08007fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0308 	and.w	r3, r3, #8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a6:	d10a      	bne.n	80080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080fc:	f7f9 fd2c 	bl	8001b58 <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d10e      	bne.n	800812e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f82f 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d001      	beq.n	800812e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e025      	b.n	800817a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b04      	cmp	r3, #4
 800813a:	d10e      	bne.n	800815a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f819 	bl	8008182 <UART_WaitOnFlagUntilTimeout>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e00f      	b.n	800817a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2220      	movs	r2, #32
 8008166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b09c      	sub	sp, #112	; 0x70
 8008186:	af00      	add	r7, sp, #0
 8008188:	60f8      	str	r0, [r7, #12]
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	603b      	str	r3, [r7, #0]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008192:	e0a9      	b.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819a:	f000 80a5 	beq.w	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800819e:	f7f9 fcdb 	bl	8001b58 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d302      	bcc.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80081ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d140      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081c8:	667b      	str	r3, [r7, #100]	; 0x64
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	663b      	str	r3, [r7, #96]	; 0x60
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008206:	64ba      	str	r2, [r7, #72]	; 0x48
 8008208:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800820c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e5      	bne.n	80081e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e069      	b.n	800830a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d051      	beq.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800824e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008252:	d149      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800825c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008266:	e853 3f00 	ldrex	r3, [r3]
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800827c:	637b      	str	r3, [r7, #52]	; 0x34
 800827e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800828a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e6      	bne.n	800825e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	613b      	str	r3, [r7, #16]
   return(result);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082b0:	623a      	str	r2, [r7, #32]
 80082b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	69f9      	ldr	r1, [r7, #28]
 80082b6:	6a3a      	ldr	r2, [r7, #32]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e5      	bne.n	8008290 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e010      	b.n	800830a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	4013      	ands	r3, r2
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	79fb      	ldrb	r3, [r7, #7]
 8008302:	429a      	cmp	r2, r3
 8008304:	f43f af46 	beq.w	8008194 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3770      	adds	r7, #112	; 0x70
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008312:	b480      	push	{r7}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008320:	2b01      	cmp	r3, #1
 8008322:	d101      	bne.n	8008328 <HAL_UARTEx_DisableFifoMode+0x16>
 8008324:	2302      	movs	r3, #2
 8008326:	e027      	b.n	8008378 <HAL_UARTEx_DisableFifoMode+0x66>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008356:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2220      	movs	r2, #32
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008398:	2302      	movs	r3, #2
 800839a:	e02d      	b.n	80083f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2224      	movs	r2, #36	; 0x24
 80083a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0201 	bic.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f84f 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008414:	2302      	movs	r3, #2
 8008416:	e02d      	b.n	8008474 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2224      	movs	r2, #36	; 0x24
 8008424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0201 	bic.w	r2, r2, #1
 800843e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f811 	bl	800847c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800849c:	e031      	b.n	8008502 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800849e:	2310      	movs	r3, #16
 80084a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084a2:	2310      	movs	r3, #16
 80084a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0e5b      	lsrs	r3, r3, #25
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0f5b      	lsrs	r3, r3, #29
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	7b3a      	ldrb	r2, [r7, #12]
 80084ca:	4911      	ldr	r1, [pc, #68]	; (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084cc:	5c8a      	ldrb	r2, [r1, r2]
 80084ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084d2:	7b3a      	ldrb	r2, [r7, #12]
 80084d4:	490f      	ldr	r1, [pc, #60]	; (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	7b7a      	ldrb	r2, [r7, #13]
 80084e8:	4909      	ldr	r1, [pc, #36]	; (8008510 <UARTEx_SetNbDataToProcess+0x94>)
 80084ea:	5c8a      	ldrb	r2, [r1, r2]
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084f0:	7b7a      	ldrb	r2, [r7, #13]
 80084f2:	4908      	ldr	r1, [pc, #32]	; (8008514 <UARTEx_SetNbDataToProcess+0x98>)
 80084f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008502:	bf00      	nop
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	080085c0 	.word	0x080085c0
 8008514:	080085c8 	.word	0x080085c8

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4d0d      	ldr	r5, [pc, #52]	; (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2600      	movs	r6, #0
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4d0b      	ldr	r5, [pc, #44]	; (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	; (800855c <__libc_init_array+0x44>)
 800852c:	f000 f820 	bl	8008570 <_init>
 8008530:	1b64      	subs	r4, r4, r5
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2600      	movs	r6, #0
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	080085d8 	.word	0x080085d8
 8008554:	080085d8 	.word	0x080085d8
 8008558:	080085d8 	.word	0x080085d8
 800855c:	080085dc 	.word	0x080085dc

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
