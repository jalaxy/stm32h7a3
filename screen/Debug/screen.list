
screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aac  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08006d60  08006d60  00016d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007074  08007074  00017074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00012014  24000000  08007078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000ea7a4  24012014  0801908c  00032014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240fc7b8  0801908c  0003c7b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00032014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014f84  00000000  00000000  00032042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000255a  00000000  00000000  00046fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f10  00000000  00000000  00049520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000e20  00000000  00000000  0004a430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002f8b5  00000000  00000000  0004b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013ece  00000000  00000000  0007ab05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135124  00000000  00000000  0008e9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c3af7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000040bc  00000000  00000000  001c3b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24012014 	.word	0x24012014
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08006d44 	.word	0x08006d44

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24012018 	.word	0x24012018
 80002ec:	08006d44 	.word	0x08006d44

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fa:	f001 f90b 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fe:	f000 f857 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000602:	f000 f9f5 	bl	80009f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000606:	f000 f99f 	bl	8000948 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800060a:	f000 f9e9 	bl	80009e0 <MX_USB_OTG_HS_USB_Init>
  MX_LTDC_Init();
 800060e:	f000 f909 	bl	8000824 <MX_LTDC_Init>
  MX_I2C1_Init();
 8000612:	f000 f8c7 	bl	80007a4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <main+0x9c>)
 800061c:	f001 fc70 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	; 0x64
 8000622:	f001 f989 	bl	8001938 <HAL_Delay>
	HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, SET); // LCD reset
 8000626:	2201      	movs	r2, #1
 8000628:	2104      	movs	r1, #4
 800062a:	4819      	ldr	r0, [pc, #100]	; (8000690 <main+0x9c>)
 800062c:	f001 fc68 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, SET); // background light on
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4817      	ldr	r0, [pc, #92]	; (8000694 <main+0xa0>)
 8000636:	f001 fc63 	bl	8001f00 <HAL_GPIO_WritePin>
	pos_t pos = clrscreen();
 800063a:	f000 fbeb 	bl	8000e14 <clrscreen>
 800063e:	6078      	str	r0, [r7, #4]
	pos = _puts(pos, "000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111\n");
 8000640:	4915      	ldr	r1, [pc, #84]	; (8000698 <main+0xa4>)
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fbce 	bl	8000de4 <_puts>
 8000648:	6078      	str	r0, [r7, #4]
	draw_line(POS(100, 200), POS(300, 500), 0x0);
 800064a:	2200      	movs	r2, #0
 800064c:	4913      	ldr	r1, [pc, #76]	; (800069c <main+0xa8>)
 800064e:	4814      	ldr	r0, [pc, #80]	; (80006a0 <main+0xac>)
 8000650:	f000 fc8a 	bl	8000f68 <draw_line>
	draw_ellipse(POS(100, 200), POS(50, 50), 0xf800);
 8000654:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000658:	f04f 1132 	mov.w	r1, #3276850	; 0x320032
 800065c:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0xac>)
 800065e:	f000 fd13 	bl	8001088 <draw_ellipse>
	draw_ellipse(POS(300, 500), POS(50, 50), 0x001f);
 8000662:	221f      	movs	r2, #31
 8000664:	f04f 1132 	mov.w	r1, #3276850	; 0x320032
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0xa8>)
 800066a:	f000 fd0d 	bl	8001088 <draw_ellipse>
	draw_ellipse(POS(400, 300), POS(300, 300), 0x0000);
 800066e:	2200      	movs	r2, #0
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <main+0xb0>)
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main+0xb4>)
 8000674:	f000 fd08 	bl	8001088 <draw_ellipse>
	draw_ellipse(POS(400, 300), POS(400, 400), 0x0000);
 8000678:	2200      	movs	r2, #0
 800067a:	490c      	ldr	r1, [pc, #48]	; (80006ac <main+0xb8>)
 800067c:	480a      	ldr	r0, [pc, #40]	; (80006a8 <main+0xb4>)
 800067e:	f000 fd03 	bl	8001088 <draw_ellipse>
	draw_ellipse(POS(400, 300), POS(400, 300), 0x0000);
 8000682:	2200      	movs	r2, #0
 8000684:	4908      	ldr	r1, [pc, #32]	; (80006a8 <main+0xb4>)
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0xb4>)
 8000688:	f000 fcfe 	bl	8001088 <draw_ellipse>
	while (1) {
 800068c:	e7fe      	b.n	800068c <main+0x98>
 800068e:	bf00      	nop
 8000690:	58020400 	.word	0x58020400
 8000694:	58020000 	.word	0x58020000
 8000698:	08006d60 	.word	0x08006d60
 800069c:	012c01f4 	.word	0x012c01f4
 80006a0:	006400c8 	.word	0x006400c8
 80006a4:	012c012c 	.word	0x012c012c
 80006a8:	0190012c 	.word	0x0190012c
 80006ac:	01900190 	.word	0x01900190

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b09c      	sub	sp, #112	; 0x70
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	224c      	movs	r2, #76	; 0x4c
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fb38 	bl	8006d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2220      	movs	r2, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fb32 	bl	8006d34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006d0:	2004      	movs	r0, #4
 80006d2:	f002 f83d 	bl	8002750 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b30      	ldr	r3, [pc, #192]	; (800079c <SystemClock_Config+0xec>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	4a2f      	ldr	r2, [pc, #188]	; (800079c <SystemClock_Config+0xec>)
 80006e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e4:	6193      	str	r3, [r2, #24]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <SystemClock_Config+0xec>)
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f2:	bf00      	nop
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <SystemClock_Config+0xec>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000700:	d1f8      	bne.n	80006f4 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <SystemClock_Config+0xf0>)
 8000704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000706:	f023 0303 	bic.w	r3, r3, #3
 800070a:	4a25      	ldr	r2, [pc, #148]	; (80007a0 <SystemClock_Config+0xf0>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000712:	2321      	movs	r3, #33	; 0x21
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000724:	2302      	movs	r3, #2
 8000726:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 800072c:	2346      	movs	r3, #70	; 0x46
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000734:	2304      	movs	r3, #4
 8000736:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800073c:	230c      	movs	r3, #12
 800073e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000740:	2300      	movs	r3, #0
 8000742:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f859 	bl	8002804 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000758:	f000 faae 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	233f      	movs	r3, #63	; 0x3f
 800075e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2303      	movs	r3, #3
 8000762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076c:	2340      	movs	r3, #64	; 0x40
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000770:	2340      	movs	r3, #64	; 0x40
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000778:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077a:	2340      	movs	r3, #64	; 0x40
 800077c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2107      	movs	r1, #7
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fc42 	bl	800300c <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800078e:	f000 fa93 	bl	8000cb8 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	; 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024800 	.word	0x58024800
 80007a0:	58024400 	.word	0x58024400

080007a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C1_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 224;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C1_Init+0x74>)
 80007b6:	22e0      	movs	r2, #224	; 0xe0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C1_Init+0x74>)
 80007bc:	2201      	movs	r2, #1
 80007be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_I2C1_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C1_Init+0x74>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_I2C1_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_I2C1_Init+0x74>)
 80007e0:	f001 fbe6 	bl	8001fb0 <HAL_I2C_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ea:	f000 fa65 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ee:	2100      	movs	r1, #0
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_I2C1_Init+0x74>)
 80007f2:	f001 fc6d 	bl	80020d0 <HAL_I2CEx_ConfigAnalogFilter>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007fc:	f000 fa5c 	bl	8000cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000800:	2100      	movs	r1, #0
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_I2C1_Init+0x74>)
 8000804:	f001 fcaf 	bl	8002166 <HAL_I2CEx_ConfigDigitalFilter>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 fa53 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24012030 	.word	0x24012030
 800081c:	40005400 	.word	0x40005400
 8000820:	20b0ccff 	.word	0x20b0ccff

08000824 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08e      	sub	sp, #56	; 0x38
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2234      	movs	r2, #52	; 0x34
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f006 fa7f 	bl	8006d34 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_LTDC_Init+0x114>)
 8000838:	4a40      	ldr	r2, [pc, #256]	; (800093c <MX_LTDC_Init+0x118>)
 800083a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800083c:	4b3e      	ldr	r3, [pc, #248]	; (8000938 <MX_LTDC_Init+0x114>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_LTDC_Init+0x114>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <MX_LTDC_Init+0x114>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800084e:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_LTDC_Init+0x114>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8000854:	4b38      	ldr	r3, [pc, #224]	; (8000938 <MX_LTDC_Init+0x114>)
 8000856:	2214      	movs	r2, #20
 8000858:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_LTDC_Init+0x114>)
 800085c:	2203      	movs	r2, #3
 800085e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <MX_LTDC_Init+0x114>)
 8000862:	22a0      	movs	r2, #160	; 0xa0
 8000864:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 23;
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_LTDC_Init+0x114>)
 8000868:	2217      	movs	r2, #23
 800086a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 1184;
 800086c:	4b32      	ldr	r3, [pc, #200]	; (8000938 <MX_LTDC_Init+0x114>)
 800086e:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 623;
 8000874:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_LTDC_Init+0x114>)
 8000876:	f240 226f 	movw	r2, #623	; 0x26f
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1344;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_LTDC_Init+0x114>)
 800087e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 635;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_LTDC_Init+0x114>)
 8000886:	f240 227b 	movw	r2, #635	; 0x27b
 800088a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <MX_LTDC_Init+0x114>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000894:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_LTDC_Init+0x114>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_LTDC_Init+0x114>)
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008a4:	4824      	ldr	r0, [pc, #144]	; (8000938 <MX_LTDC_Init+0x114>)
 80008a6:	f001 fcab 	bl	8002200 <HAL_LTDC_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80008b0:	f000 fa02 	bl	8000cb8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 100;
 80008b4:	2364      	movs	r3, #100	; 0x64
 80008b6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 900;
 80008b8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80008bc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 600;
 80008c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80008c6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80008c8:	2302      	movs	r3, #2
 80008ca:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80008cc:	23ff      	movs	r3, #255	; 0xff
 80008ce:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 255;
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008da:	2305      	movs	r3, #5
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0x24000200;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_LTDC_Init+0x11c>)
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 80008e2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 600;
 80008e8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_LTDC_Init+0x114>)
 8000908:	f001 fd4a 	bl	80023a0 <HAL_LTDC_ConfigLayer>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000912:	f000 f9d1 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

	pLayerCfg.FBStartAdress = (uint32_t) pixels_565;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_LTDC_Init+0x120>)
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2200      	movs	r2, #0
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_LTDC_Init+0x114>)
 8000922:	f001 fd3d 	bl	80023a0 <HAL_LTDC_ConfigLayer>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_LTDC_Init+0x10c>
		Error_Handler();
 800092c:	f000 f9c4 	bl	8000cb8 <Error_Handler>
	}

  /* USER CODE END LTDC_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3738      	adds	r7, #56	; 0x38
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2401207c 	.word	0x2401207c
 800093c:	50001000 	.word	0x50001000
 8000940:	24000200 	.word	0x24000200
 8000944:	240121b4 	.word	0x240121b4

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800094e:	4a23      	ldr	r2, [pc, #140]	; (80009dc <MX_USART3_UART_Init+0x94>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000990:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 8000992:	f004 f9f5 	bl	8004d80 <HAL_UART_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800099c:	f000 f98c 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a0:	2100      	movs	r1, #0
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009a4:	f005 fa96 	bl	8005ed4 <HAL_UARTEx_SetTxFifoThreshold>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ae:	f000 f983 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4808      	ldr	r0, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f005 facb 	bl	8005f50 <HAL_UARTEx_SetRxFifoThreshold>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009c0:	f000 f97a 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_USART3_UART_Init+0x90>)
 80009c6:	f005 fa4c 	bl	8005e62 <HAL_UARTEx_DisableFifoMode>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009d0:	f000 f972 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	24012124 	.word	0x24012124
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a06:	4ba5      	ldr	r3, [pc, #660]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0c:	4aa3      	ldr	r2, [pc, #652]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a16:	4ba1      	ldr	r3, [pc, #644]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	623b      	str	r3, [r7, #32]
 8000a22:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b9d      	ldr	r3, [pc, #628]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2a:	4a9c      	ldr	r2, [pc, #624]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a34:	4b99      	ldr	r3, [pc, #612]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b96      	ldr	r3, [pc, #600]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a48:	4a94      	ldr	r2, [pc, #592]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a4a:	f043 0320 	orr.w	r3, r3, #32
 8000a4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a52:	4b92      	ldr	r3, [pc, #584]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a58:	f003 0320 	and.w	r3, r3, #32
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a60:	4b8e      	ldr	r3, [pc, #568]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a66:	4a8d      	ldr	r2, [pc, #564]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a70:	4b8a      	ldr	r3, [pc, #552]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	4b87      	ldr	r3, [pc, #540]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a84:	4a85      	ldr	r2, [pc, #532]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a8e:	4b83      	ldr	r3, [pc, #524]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9c:	4b7f      	ldr	r3, [pc, #508]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa2:	4a7e      	ldr	r2, [pc, #504]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aac:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	4b78      	ldr	r3, [pc, #480]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac0:	4a76      	ldr	r2, [pc, #472]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aca:	4b74      	ldr	r3, [pc, #464]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000acc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad8:	4b70      	ldr	r3, [pc, #448]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ade:	4a6f      	ldr	r2, [pc, #444]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ae8:	4b6c      	ldr	r3, [pc, #432]	; (8000c9c <MX_GPIO_Init+0x2ac>)
 8000aea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afc:	4868      	ldr	r0, [pc, #416]	; (8000ca0 <MX_GPIO_Init+0x2b0>)
 8000afe:	f001 f9ff 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_BL_GPIO_Port, LTDC_BL_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2101      	movs	r1, #1
 8000b06:	4867      	ldr	r0, [pc, #412]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000b08:	f001 f9fa 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C1_RST_GPIO_Port, I2C1_RST_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4864      	ldr	r0, [pc, #400]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000b12:	f001 f9f5 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b1c:	4862      	ldr	r0, [pc, #392]	; (8000ca8 <MX_GPIO_Init+0x2b8>)
 8000b1e:	f001 f9ef 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LTDC_RST_GPIO_Port, LTDC_RST_Pin, GPIO_PIN_SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	2104      	movs	r1, #4
 8000b26:	4860      	ldr	r0, [pc, #384]	; (8000ca8 <MX_GPIO_Init+0x2b8>)
 8000b28:	f001 f9ea 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	485e      	ldr	r0, [pc, #376]	; (8000cac <MX_GPIO_Init+0x2bc>)
 8000b32:	f001 f9e5 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4858      	ldr	r0, [pc, #352]	; (8000cb0 <MX_GPIO_Init+0x2c0>)
 8000b4e:	f001 f827 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <MX_GPIO_Init+0x2b0>)
 8000b6c:	f001 f818 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LTDC_BL_Pin I2C1_RST_Pin */
  GPIO_InitStruct.Pin = LTDC_BL_Pin|I2C1_RST_Pin;
 8000b70:	2381      	movs	r3, #129	; 0x81
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000b88:	f001 f80a 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b8c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4840      	ldr	r0, [pc, #256]	; (8000ca8 <MX_GPIO_Init+0x2b8>)
 8000ba6:	f000 fffb 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LTDC_RST_Pin */
  GPIO_InitStruct.Pin = LTDC_RST_Pin;
 8000baa:	2304      	movs	r3, #4
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LTDC_RST_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4839      	ldr	r0, [pc, #228]	; (8000ca8 <MX_GPIO_Init+0x2b8>)
 8000bc2:	f000 ffed 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4836      	ldr	r0, [pc, #216]	; (8000cb4 <MX_GPIO_Init+0x2c4>)
 8000bdc:	f000 ffe0 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C1_INT_Pin */
  GPIO_InitStruct.Pin = I2C1_INT_Pin;
 8000be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2C1_INT_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	482b      	ldr	r0, [pc, #172]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000bf8:	f000 ffd2 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4824      	ldr	r0, [pc, #144]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000c12:	f000 ffc5 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c28:	230a      	movs	r3, #10
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	4619      	mov	r1, r3
 8000c32:	481c      	ldr	r0, [pc, #112]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000c34:	f000 ffb4 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000c38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_GPIO_Init+0x2b4>)
 8000c52:	f000 ffa5 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480f      	ldr	r0, [pc, #60]	; (8000cac <MX_GPIO_Init+0x2bc>)
 8000c6e:	f000 ff97 	bl	8001ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	2017      	movs	r0, #23
 8000c78:	f000 ff5d 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c7c:	2017      	movs	r0, #23
 8000c7e:	f000 ff74 	bl	8001b6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	2028      	movs	r0, #40	; 0x28
 8000c88:	f000 ff55 	bl	8001b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f000 ff6c 	bl	8001b6a <HAL_NVIC_EnableIRQ>

}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58021400 	.word	0x58021400
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58020400 	.word	0x58020400
 8000cac:	58021000 	.word	0x58021000
 8000cb0:	58020800 	.word	0x58020800
 8000cb4:	58021800 	.word	0x58021800

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <_putc>:

unsigned short pixels_565[WINDOW_HEIGHT][WINDOW_WIDTH];
float linespace = 1.5;

pos_t _putc(pos_t pos, char ch)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
	if (ch == '\n')
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d115      	bne.n	8000d02 <_putc+0x3e>
		return POS(MARGIN_X, Y(pos) + linespace * MONO_HEIGHT);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	ee07 3a90 	vmov	s15, r3
 8000cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <_putc+0x114>)
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000cec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf8:	ee17 3a90 	vmov	r3, s15
 8000cfc:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 8000d00:	e066      	b.n	8000dd0 <_putc+0x10c>
    unsigned short x = X(pos), y = Y(pos);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	82fb      	strh	r3, [r7, #22]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	82bb      	strh	r3, [r7, #20]
	if (x + MONO_WIDTH > WINDOW_WIDTH - MARGIN_X)
 8000d0c:	8afb      	ldrh	r3, [r7, #22]
 8000d0e:	f240 320a 	movw	r2, #778	; 0x30a
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d914      	bls.n	8000d40 <_putc+0x7c>
	{
		x = MARGIN_X;
 8000d16:	230a      	movs	r3, #10
 8000d18:	82fb      	strh	r3, [r7, #22]
		y += linespace * MONO_HEIGHT;
 8000d1a:	8abb      	ldrh	r3, [r7, #20]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <_putc+0x114>)
 8000d26:	edd3 7a00 	vldr	s15, [r3]
 8000d2a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
 8000d2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	82bb      	strh	r3, [r7, #20]
	}
	if (y + MONO_HEIGHT > WINDOW_HEIGHT - MARGIN_Y)
 8000d40:	8abb      	ldrh	r3, [r7, #20]
 8000d42:	f240 2236 	movw	r2, #566	; 0x236
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d909      	bls.n	8000d5e <_putc+0x9a>
		y = Y(scrollup(POS(x, y), 1));
 8000d4a:	8afb      	ldrh	r3, [r7, #22]
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	8abb      	ldrh	r3, [r7, #20]
 8000d50:	4413      	add	r3, r2
 8000d52:	2101      	movs	r1, #1
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f88b 	bl	8000e70 <scrollup>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	82bb      	strh	r3, [r7, #20]
    unsigned short(*img)[MONO_WIDTH] = (unsigned short(*)[MONO_WIDTH])monofont[(int)ch];
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	4613      	mov	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	019b      	lsls	r3, r3, #6
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <_putc+0x118>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < MONO_HEIGHT; i++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e025      	b.n	8000dc0 <_putc+0xfc>
        for (int j = 0; j < MONO_WIDTH; j++)
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	e01c      	b.n	8000db4 <_putc+0xf0>
            pixels_565[y + i][x + j] = img[i][j];
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	461a      	mov	r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1899      	adds	r1, r3, r2
 8000d8a:	8aba      	ldrh	r2, [r7, #20]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	441a      	add	r2, r3
 8000d90:	8af8      	ldrh	r0, [r7, #22]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4403      	add	r3, r0
 8000d96:	68f8      	ldr	r0, [r7, #12]
 8000d98:	f831 4010 	ldrh.w	r4, [r1, r0, lsl #1]
 8000d9c:	4910      	ldr	r1, [pc, #64]	; (8000de0 <_putc+0x11c>)
 8000d9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000da2:	fb00 f202 	mul.w	r2, r0, r2
 8000da6:	4413      	add	r3, r2
 8000da8:	4622      	mov	r2, r4
 8000daa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < MONO_WIDTH; j++)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b0b      	cmp	r3, #11
 8000db8:	dddf      	ble.n	8000d7a <_putc+0xb6>
    for (int i = 0; i < MONO_HEIGHT; i++)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b17      	cmp	r3, #23
 8000dc4:	ddd6      	ble.n	8000d74 <_putc+0xb0>
    return POS(x + MONO_WIDTH, y);
 8000dc6:	8afb      	ldrh	r3, [r7, #22]
 8000dc8:	330c      	adds	r3, #12
 8000dca:	041a      	lsls	r2, r3, #16
 8000dcc:	8abb      	ldrh	r3, [r7, #20]
 8000dce:	4413      	add	r3, r2
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd90      	pop	{r4, r7, pc}
 8000dd8:	24012000 	.word	0x24012000
 8000ddc:	24000000 	.word	0x24000000
 8000de0:	240121b4 	.word	0x240121b4

08000de4 <_puts>:

pos_t _puts(pos_t pos, char *s)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
    while (*s)
 8000dee:	e008      	b.n	8000e02 <_puts+0x1e>
        pos = _putc(pos, *s++);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff62 	bl	8000cc4 <_putc>
 8000e00:	6078      	str	r0, [r7, #4]
    while (*s)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f2      	bne.n	8000df0 <_puts+0xc>
    return pos;
 8000e0a:	687b      	ldr	r3, [r7, #4]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <clrscreen>:
	}
    return pos;
}

pos_t clrscreen()
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e018      	b.n	8000e52 <clrscreen+0x3e>
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	e00e      	b.n	8000e44 <clrscreen+0x30>
			pixels_565[i][j] = 0xffff;
 8000e26:	4911      	ldr	r1, [pc, #68]	; (8000e6c <clrscreen+0x58>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000e2e:	fb03 f202 	mul.w	r2, r3, r2
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int j = 0; j < WINDOW_WIDTH; j++)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	3301      	adds	r3, #1
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000e4a:	dbec      	blt.n	8000e26 <clrscreen+0x12>
	for (int i = 0; i < WINDOW_HEIGHT; i++)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000e58:	dbe2      	blt.n	8000e20 <clrscreen+0xc>
	return POS(MARGIN_X, MARGIN_Y);
 8000e5a:	f04f 130a 	mov.w	r3, #655370	; 0xa000a
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	240121b4 	.word	0x240121b4

08000e70 <scrollup>:

pos_t scrollup(pos_t pos, int n)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
    int d = n * linespace * MONO_HEIGHT;
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <scrollup+0xec>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e8e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 3a90 	vmov	r3, s15
 8000e9e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	e023      	b.n	8000eee <scrollup+0x7e>
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
 8000eaa:	e019      	b.n	8000ee0 <scrollup+0x70>
            pixels_565[i][j] = pixels_565[i + d][j];
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	492b      	ldr	r1, [pc, #172]	; (8000f60 <scrollup+0xf0>)
 8000eb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000eb8:	fb03 f202 	mul.w	r2, r3, r2
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8000ec4:	4926      	ldr	r1, [pc, #152]	; (8000f60 <scrollup+0xf0>)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000ecc:	fb03 f202 	mul.w	r2, r3, r2
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	3301      	adds	r3, #1
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000ee6:	dbe1      	blt.n	8000eac <scrollup+0x3c>
    for (int i = 0; i < WINDOW_HEIGHT - d; i++)
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	3301      	adds	r3, #1
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbd5      	blt.n	8000ea6 <scrollup+0x36>
    for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f5c3 7316 	rsb	r3, r3, #600	; 0x258
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	e018      	b.n	8000f36 <scrollup+0xc6>
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	e00e      	b.n	8000f28 <scrollup+0xb8>
            pixels_565[i][j] = 0xffff;
 8000f0a:	4915      	ldr	r1, [pc, #84]	; (8000f60 <scrollup+0xf0>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000f12:	fb03 f202 	mul.w	r2, r3, r2
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4413      	add	r3, r2
 8000f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int j = 0; j < WINDOW_WIDTH; j++)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3301      	adds	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000f2e:	dbec      	blt.n	8000f0a <scrollup+0x9a>
    for (int i = WINDOW_HEIGHT - d; i < WINDOW_HEIGHT; i++)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000f3c:	dbe2      	blt.n	8000f04 <scrollup+0x94>
    return POS(X(pos), Y(pos) - d);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <scrollup+0xf4>)
 8000f42:	4013      	ands	r3, r2
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	b291      	uxth	r1, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	1a8a      	subs	r2, r1, r2
 8000f4c:	4413      	add	r3, r2
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	24012000 	.word	0x24012000
 8000f60:	240121b4 	.word	0x240121b4
 8000f64:	ffff0000 	.word	0xffff0000

08000f68 <draw_line>:


void draw_line(pos_t a, pos_t b, color_t c)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	80fb      	strh	r3, [r7, #6]
	for (float t = .0f; t < 1.f; t += 1e-3)
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	e06a      	b.n	8001054 <draw_line+0xec>
	{
		int x = X(a) * t + X(b) * (1 - t), y = Y(a) * t + Y(b) * (1 - t);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	0c1b      	lsrs	r3, r3, #16
 8000f82:	ee07 3a90 	vmov	s15, r3
 8000f86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	ee07 3a90 	vmov	s15, r3
 8000f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f9e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000fa2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	ee07 3a90 	vmov	s15, r3
 8000fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000fdc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000fe0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fe4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	617b      	str	r3, [r7, #20]
		if (IN_WINDOW(x, y))
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001000:	da1c      	bge.n	800103c <draw_line+0xd4>
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db19      	blt.n	800103c <draw_line+0xd4>
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800100e:	da15      	bge.n	800103c <draw_line+0xd4>
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db12      	blt.n	800103c <draw_line+0xd4>
			draw_dot(POS(x, y), c);
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	0419      	lsls	r1, r3, #16
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	440b      	add	r3, r1
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	4915      	ldr	r1, [pc, #84]	; (8001080 <draw_line+0x118>)
 800102c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001030:	fb00 f202 	mul.w	r2, r0, r2
 8001034:	4413      	add	r3, r2
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (float t = .0f; t < 1.f; t += 1e-3)
 800103c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001044:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001078 <draw_line+0x110>
 8001048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800104c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001050:	edc7 7a07 	vstr	s15, [r7, #28]
 8001054:	edd7 7a07 	vldr	s15, [r7, #28]
 8001058:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d48b      	bmi.n	8000f7e <draw_line+0x16>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3724      	adds	r7, #36	; 0x24
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	f3af 8000 	nop.w
 8001078:	d2f1a9fc 	.word	0xd2f1a9fc
 800107c:	3f50624d 	.word	0x3f50624d
 8001080:	240121b4 	.word	0x240121b4
 8001084:	00000000 	.word	0x00000000

08001088 <draw_ellipse>:

void draw_ellipse(pos_t ct, pos_t r, color_t c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	ed2d 8b04 	vpush	{d8-d9}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
	float dpi = 2 * acos(-1);
 800109a:	4b43      	ldr	r3, [pc, #268]	; (80011a8 <draw_ellipse+0x120>)
 800109c:	61bb      	str	r3, [r7, #24]
	for (float t = .0f; t < dpi; t += 1e-3)
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e06a      	b.n	800117c <draw_ellipse+0xf4>
	{
		int x = X(ct) + X(r) * cos(t), y = Y(ct) + Y(r) * sin(t);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	0c1b      	lsrs	r3, r3, #16
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	0c1b      	lsrs	r3, r3, #16
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 80010be:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010c6:	eeb0 0b47 	vmov.f64	d0, d7
 80010ca:	f004 ffcd 	bl	8006068 <cos>
 80010ce:	eeb0 7b40 	vmov.f64	d7, d0
 80010d2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80010d6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80010da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eeb8 9b67 	vcvt.f64.u32	d9, s15
 80010fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001104:	eeb0 0b47 	vmov.f64	d0, d7
 8001108:	f004 fffa 	bl	8006100 <sin>
 800110c:	eeb0 7b40 	vmov.f64	d7, d0
 8001110:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001114:	ee38 7b07 	vadd.f64	d7, d8, d7
 8001118:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	613b      	str	r3, [r7, #16]
		if (IN_WINDOW(x, y))
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001128:	da1c      	bge.n	8001164 <draw_ellipse+0xdc>
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db19      	blt.n	8001164 <draw_ellipse+0xdc>
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001136:	da15      	bge.n	8001164 <draw_ellipse+0xdc>
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db12      	blt.n	8001164 <draw_ellipse+0xdc>
			draw_dot(POS(x, y), c);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4413      	add	r3, r2
 8001146:	b29a      	uxth	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	0419      	lsls	r1, r3, #16
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	440b      	add	r3, r1
 8001150:	0c1b      	lsrs	r3, r3, #16
 8001152:	4916      	ldr	r1, [pc, #88]	; (80011ac <draw_ellipse+0x124>)
 8001154:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001158:	fb00 f202 	mul.w	r2, r0, r2
 800115c:	4413      	add	r3, r2
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (float t = .0f; t < dpi; t += 1e-3)
 8001164:	edd7 7a07 	vldr	s15, [r7, #28]
 8001168:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80011a0 <draw_ellipse+0x118>
 8001170:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001174:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001178:	edc7 7a07 	vstr	s15, [r7, #28]
 800117c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001180:	edd7 7a06 	vldr	s15, [r7, #24]
 8001184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d48b      	bmi.n	80010a6 <draw_ellipse+0x1e>
	}
}
 800118e:	bf00      	nop
 8001190:	bf00      	nop
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	ecbd 8b04 	vpop	{d8-d9}
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f3af 8000 	nop.w
 80011a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011a4:	3f50624d 	.word	0x3f50624d
 80011a8:	40c90fdb 	.word	0x40c90fdb
 80011ac:	240121b4 	.word	0x240121b4

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_MspInit+0x30>)
 80011b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_MspInit+0x30>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_MspInit+0x30>)
 80011c8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	58024400 	.word	0x58024400

080011e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	; 0xe0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	22b8      	movs	r2, #184	; 0xb8
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fd95 	bl	8006d34 <memset>
  if(hi2c->Instance==I2C1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <HAL_I2C_MspInit+0xbc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d141      	bne.n	8001298 <HAL_I2C_MspInit+0xb4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001214:	2308      	movs	r3, #8
 8001216:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4618      	mov	r0, r3
 8001224:	f002 fa7e 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800122e:	f7ff fd43 	bl	8000cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 8001234:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 8001244:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001250:	23c0      	movs	r3, #192	; 0xc0
 8001252:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001268:	2304      	movs	r3, #4
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_I2C_MspInit+0xc4>)
 8001276:	f000 fc93 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 800127c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 8001282:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001286:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_I2C_MspInit+0xc0>)
 800128c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	37e0      	adds	r7, #224	; 0xe0
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40005400 	.word	0x40005400
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020400 	.word	0x58020400

080012ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0bc      	sub	sp, #240	; 0xf0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	22b8      	movs	r2, #184	; 0xb8
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f005 fd31 	bl	8006d34 <memset>
  if(hltdc->Instance==LTDC)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_LTDC_MspInit+0x284>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	f040 8125 	bne.w	8001528 <HAL_LTDC_MspInit+0x27c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80012e4:	2301      	movs	r3, #1
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80012e8:	2312      	movs	r3, #18
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 3;
 80012f4:	2303      	movs	r3, #3
 80012f6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80012f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012fe:	2300      	movs	r3, #0
 8001300:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4618      	mov	r0, r3
 800130c:	f002 fa0a 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_LTDC_MspInit+0x6e>
    {
      Error_Handler();
 8001316:	f7ff fccf 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800131a:	4b86      	ldr	r3, [pc, #536]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800131c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001320:	4a84      	ldr	r2, [pc, #528]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 800132a:	4b82      	ldr	r3, [pc, #520]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800132c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	623b      	str	r3, [r7, #32]
 8001336:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800133a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800133e:	4a7d      	ldr	r2, [pc, #500]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001340:	f043 0310 	orr.w	r3, r3, #16
 8001344:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001348:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800134a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001358:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800135c:	4a75      	ldr	r2, [pc, #468]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001366:	4b73      	ldr	r3, [pc, #460]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001368:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b6f      	ldr	r3, [pc, #444]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001376:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800137a:	4a6e      	ldr	r2, [pc, #440]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001384:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b68      	ldr	r3, [pc, #416]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 8001394:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001398:	4a66      	ldr	r2, [pc, #408]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013a2:	4b64      	ldr	r3, [pc, #400]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 80013a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b0:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 80013b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013b6:	4a5f      	ldr	r2, [pc, #380]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 80013b8:	f043 0308 	orr.w	r3, r3, #8
 80013bc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80013c0:	4b5c      	ldr	r3, [pc, #368]	; (8001534 <HAL_LTDC_MspInit+0x288>)
 80013c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    PD2     ------> LTDC_B7
    PD6     ------> LTDC_B2
    PB8     ------> LTDC_B6
    PE0     ------> LTDC_R0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_11
 80013ce:	f64d 0371 	movw	r3, #55409	; 0xd871
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e8:	230e      	movs	r3, #14
 80013ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f2:	4619      	mov	r1, r3
 80013f4:	4850      	ldr	r0, [pc, #320]	; (8001538 <HAL_LTDC_MspInit+0x28c>)
 80013f6:	f000 fbd3 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 80013fa:	f240 43e3 	movw	r3, #1251	; 0x4e3
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001414:	230e      	movs	r3, #14
 8001416:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800141e:	4619      	mov	r1, r3
 8001420:	4846      	ldr	r0, [pc, #280]	; (800153c <HAL_LTDC_MspInit+0x290>)
 8001422:	f000 fbbd 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001426:	237c      	movs	r3, #124	; 0x7c
 8001428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800143e:	230e      	movs	r3, #14
 8001440:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001448:	4619      	mov	r1, r3
 800144a:	483d      	ldr	r0, [pc, #244]	; (8001540 <HAL_LTDC_MspInit+0x294>)
 800144c:	f000 fba8 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001468:	2309      	movs	r3, #9
 800146a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001472:	4619      	mov	r1, r3
 8001474:	4833      	ldr	r0, [pc, #204]	; (8001544 <HAL_LTDC_MspInit+0x298>)
 8001476:	f000 fb93 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_8;
 800147a:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 800147e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001494:	230e      	movs	r3, #14
 8001496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800149e:	4619      	mov	r1, r3
 80014a0:	4828      	ldr	r0, [pc, #160]	; (8001544 <HAL_LTDC_MspInit+0x298>)
 80014a2:	f000 fb7d 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_6;
 80014a6:	f240 4341 	movw	r3, #1089	; 0x441
 80014aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014c0:	230e      	movs	r3, #14
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ca:	4619      	mov	r1, r3
 80014cc:	481e      	ldr	r0, [pc, #120]	; (8001548 <HAL_LTDC_MspInit+0x29c>)
 80014ce:	f000 fb67 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80014ec:	2309      	movs	r3, #9
 80014ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014f6:	4619      	mov	r1, r3
 80014f8:	4811      	ldr	r0, [pc, #68]	; (8001540 <HAL_LTDC_MspInit+0x294>)
 80014fa:	f000 fb51 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014fe:	2304      	movs	r3, #4
 8001500:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001516:	2309      	movs	r3, #9
 8001518:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001520:	4619      	mov	r1, r3
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <HAL_LTDC_MspInit+0x29c>)
 8001524:	f000 fb3c 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001528:	bf00      	nop
 800152a:	37f0      	adds	r7, #240	; 0xf0
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	50001000 	.word	0x50001000
 8001534:	58024400 	.word	0x58024400
 8001538:	58021000 	.word	0x58021000
 800153c:	58020800 	.word	0x58020800
 8001540:	58020000 	.word	0x58020000
 8001544:	58020400 	.word	0x58020400
 8001548:	58020c00 	.word	0x58020c00

0800154c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0b8      	sub	sp, #224	; 0xe0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	22b8      	movs	r2, #184	; 0xb8
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f005 fbe1 	bl	8006d34 <memset>
  if(huart->Instance==USART3)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a25      	ldr	r2, [pc, #148]	; (800160c <HAL_UART_MspInit+0xc0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d142      	bne.n	8001602 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4618      	mov	r0, r3
 800158c:	f002 f8ca 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001596:	f7ff fb8f 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800159a:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_UART_MspInit+0xc4>)
 800159c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_UART_MspInit+0xc4>)
 80015a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_MspInit+0xc4>)
 80015ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80015b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0xc4>)
 80015ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_UART_MspInit+0xc4>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0xc4>)
 80015ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f0:	2307      	movs	r3, #7
 80015f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_UART_MspInit+0xc8>)
 80015fe:	f000 facf 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	37e0      	adds	r7, #224	; 0xe0
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40004800 	.word	0x40004800
 8001610:	58024400 	.word	0x58024400
 8001614:	58020c00 	.word	0x58020c00

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f948 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(I2C1_INT_Pin))
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d004      	beq.n	800168a <EXTI9_5_IRQHandler+0x1e>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <EXTI9_5_IRQHandler+0x30>)
 8001686:	f000 fc54 	bl	8001f32 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_OVCR_Pin);
 800168a:	2080      	movs	r0, #128	; 0x80
 800168c:	f000 fc6b 	bl	8001f66 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C1_INT_Pin);
 8001690:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001694:	f000 fc67 	bl	8001f66 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58020400 	.word	0x58020400

080016a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  if(__HAL_GPIO_EXTI_GET_FLAG(B1_Pin))
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <EXTI15_10_IRQHandler+0x1e>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80016b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <EXTI15_10_IRQHandler+0x2c>)
 80016ba:	f000 fc3a 	bl	8001f32 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016c2:	f000 fc50 	bl	8001f66 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	58020400 	.word	0x58020400

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <SystemInit+0xd0>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a31      	ldr	r2, [pc, #196]	; (80017a0 <SystemInit+0xd0>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <SystemInit+0xd4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d807      	bhi.n	8001700 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <SystemInit+0xd4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 030f 	bic.w	r3, r3, #15
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <SystemInit+0xd4>)
 80016fa:	f043 0303 	orr.w	r3, r3, #3
 80016fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001700:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <SystemInit+0xd8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <SystemInit+0xd8>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <SystemInit+0xd8>)
 800170e:	2200      	movs	r2, #0
 8001710:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <SystemInit+0xd8>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4924      	ldr	r1, [pc, #144]	; (80017a8 <SystemInit+0xd8>)
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <SystemInit+0xdc>)
 800171a:	4013      	ands	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <SystemInit+0xd4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <SystemInit+0xd4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 030f 	bic.w	r3, r3, #15
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <SystemInit+0xd4>)
 8001734:	f043 0303 	orr.w	r3, r3, #3
 8001738:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <SystemInit+0xd8>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <SystemInit+0xd8>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <SystemInit+0xd8>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <SystemInit+0xd8>)
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <SystemInit+0xe0>)
 8001750:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001752:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <SystemInit+0xd8>)
 8001754:	4a17      	ldr	r2, [pc, #92]	; (80017b4 <SystemInit+0xe4>)
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <SystemInit+0xd8>)
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <SystemInit+0xe8>)
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <SystemInit+0xd8>)
 8001760:	2200      	movs	r2, #0
 8001762:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <SystemInit+0xd8>)
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <SystemInit+0xe8>)
 8001768:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <SystemInit+0xd8>)
 800176c:	2200      	movs	r2, #0
 800176e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <SystemInit+0xd8>)
 8001772:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <SystemInit+0xe8>)
 8001774:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <SystemInit+0xd8>)
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SystemInit+0xd8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a09      	ldr	r2, [pc, #36]	; (80017a8 <SystemInit+0xd8>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001786:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <SystemInit+0xd8>)
 800178a:	2200      	movs	r2, #0
 800178c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <SystemInit+0xec>)
 8001790:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00
 80017a4:	52002000 	.word	0x52002000
 80017a8:	58024400 	.word	0x58024400
 80017ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80017b0:	02020200 	.word	0x02020200
 80017b4:	01ff0000 	.word	0x01ff0000
 80017b8:	01010280 	.word	0x01010280
 80017bc:	52004000 	.word	0x52004000

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017c4:	f7ff ff84 	bl	80016d0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	; (8001800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	; (800180c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f005 fa7d 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7fe feff 	bl	80005f4 <main>
  bx  lr
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80017fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001800:	24012014 	.word	0x24012014
  ldr r2, =_sidata
 8001804:	08007078 	.word	0x08007078
  ldr r2, =_sbss
 8001808:	24012014 	.word	0x24012014
  ldr r4, =_ebss
 800180c:	240fc7b8 	.word	0x240fc7b8

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800181a:	2003      	movs	r0, #3
 800181c:	f000 f980 	bl	8001b20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001820:	f001 fdaa 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8001824:	4602      	mov	r2, r0
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_Init+0x68>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	4913      	ldr	r1, [pc, #76]	; (8001880 <HAL_Init+0x6c>)
 8001832:	5ccb      	ldrb	r3, [r1, r3]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <HAL_Init+0x68>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_Init+0x6c>)
 8001848:	5cd3      	ldrb	r3, [r2, r3]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_Init+0x70>)
 8001856:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001858:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_Init+0x74>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800185e:	2000      	movs	r0, #0
 8001860:	f000 f814 	bl	800188c <HAL_InitTick>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e002      	b.n	8001874 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800186e:	f7ff fc9f 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	58024400 	.word	0x58024400
 8001880:	08006e54 	.word	0x08006e54
 8001884:	24012008 	.word	0x24012008
 8001888:	24012004 	.word	0x24012004

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_InitTick+0x60>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e021      	b.n	80018e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_InitTick+0x64>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_InitTick+0x60>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 f965 	bl	8001b86 <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00e      	b.n	80018e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b0f      	cmp	r3, #15
 80018ca:	d80a      	bhi.n	80018e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018cc:	2200      	movs	r2, #0
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f000 f92f 	bl	8001b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <HAL_InitTick+0x68>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	24012010 	.word	0x24012010
 80018f0:	24012004 	.word	0x24012004
 80018f4:	2401200c 	.word	0x2401200c

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_IncTick+0x20>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x24>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4413      	add	r3, r2
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_IncTick+0x24>)
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	24012010 	.word	0x24012010
 800191c:	240fc7b4 	.word	0x240fc7b4

08001920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return uwTick;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_GetTick+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	240fc7b4 	.word	0x240fc7b4

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff ffee 	bl	8001920 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffde 	bl	8001920 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	24012010 	.word	0x24012010

08001980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x40>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00
 80019c4:	05fa0000 	.word	0x05fa0000

080019c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	f003 0307 	and.w	r3, r3, #7
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	db0b      	blt.n	8001a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	f003 021f 	and.w	r2, r3, #31
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <__NVIC_EnableIRQ+0x38>)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	2001      	movs	r0, #1
 8001a06:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aec:	d301      	bcc.n	8001af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aee:	2301      	movs	r3, #1
 8001af0:	e00f      	b.n	8001b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <SysTick_Config+0x40>)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afa:	210f      	movs	r1, #15
 8001afc:	f04f 30ff 	mov.w	r0, #4294967295
 8001b00:	f7ff ff8e 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <SysTick_Config+0x40>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <SysTick_Config+0x40>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	e000e010 	.word	0xe000e010

08001b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f7ff ff29 	bl	8001980 <__NVIC_SetPriorityGrouping>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff40 	bl	80019c8 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff33 	bl	80019e4 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa4 	bl	8001adc <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <HAL_GPIO_Init+0x234>)
 8001bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bb2:	e194      	b.n	8001ede <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8186 	beq.w	8001ed8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <HAL_GPIO_Init+0x44>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d130      	bne.n	8001c46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	2203      	movs	r2, #3
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 0201 	and.w	r2, r3, #1
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d017      	beq.n	8001c82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d123      	bne.n	8001cd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	08da      	lsrs	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3208      	adds	r2, #8
 8001cd0:	69b9      	ldr	r1, [r7, #24]
 8001cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0203 	and.w	r2, r3, #3
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80e0 	beq.w	8001ed8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x238>)
 8001d1a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d1e:	4a2e      	ldr	r2, [pc, #184]	; (8001dd8 <HAL_GPIO_Init+0x238>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_GPIO_Init+0x238>)
 8001d2a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d36:	4a29      	ldr	r2, [pc, #164]	; (8001ddc <HAL_GPIO_Init+0x23c>)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a20      	ldr	r2, [pc, #128]	; (8001de0 <HAL_GPIO_Init+0x240>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d052      	beq.n	8001e08 <HAL_GPIO_Init+0x268>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_GPIO_Init+0x244>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_GPIO_Init+0x22e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_GPIO_Init+0x248>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d02b      	beq.n	8001dca <HAL_GPIO_Init+0x22a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x24c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d025      	beq.n	8001dc6 <HAL_GPIO_Init+0x226>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1c      	ldr	r2, [pc, #112]	; (8001df0 <HAL_GPIO_Init+0x250>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d01f      	beq.n	8001dc2 <HAL_GPIO_Init+0x222>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x254>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_GPIO_Init+0x21e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	; (8001df8 <HAL_GPIO_Init+0x258>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d013      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_GPIO_Init+0x25c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d00d      	beq.n	8001db6 <HAL_GPIO_Init+0x216>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_GPIO_Init+0x260>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d007      	beq.n	8001db2 <HAL_GPIO_Init+0x212>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <HAL_GPIO_Init+0x264>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d101      	bne.n	8001dae <HAL_GPIO_Init+0x20e>
 8001daa:	2309      	movs	r3, #9
 8001dac:	e02d      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dae:	230a      	movs	r3, #10
 8001db0:	e02b      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001db2:	2308      	movs	r3, #8
 8001db4:	e029      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001db6:	2307      	movs	r3, #7
 8001db8:	e027      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dba:	2306      	movs	r3, #6
 8001dbc:	e025      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e023      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e021      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e01f      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e01d      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e01b      	b.n	8001e0a <HAL_GPIO_Init+0x26a>
 8001dd2:	bf00      	nop
 8001dd4:	58000080 	.word	0x58000080
 8001dd8:	58024400 	.word	0x58024400
 8001ddc:	58000400 	.word	0x58000400
 8001de0:	58020000 	.word	0x58020000
 8001de4:	58020400 	.word	0x58020400
 8001de8:	58020800 	.word	0x58020800
 8001dec:	58020c00 	.word	0x58020c00
 8001df0:	58021000 	.word	0x58021000
 8001df4:	58021400 	.word	0x58021400
 8001df8:	58021800 	.word	0x58021800
 8001dfc:	58021c00 	.word	0x58021c00
 8001e00:	58022000 	.word	0x58022000
 8001e04:	58022400 	.word	0x58022400
 8001e08:	2300      	movs	r3, #0
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	4093      	lsls	r3, r2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1a:	4938      	ldr	r1, [pc, #224]	; (8001efc <HAL_GPIO_Init+0x35c>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f47f ae63 	bne.w	8001bb4 <HAL_GPIO_Init+0x14>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	bf00      	nop
 8001ef2:	3724      	adds	r7, #36	; 0x24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	58000400 	.word	0x58000400

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f44:	887a      	ldrh	r2, [r7, #2]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	041a      	lsls	r2, r3, #16
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	400b      	ands	r3, r1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d008      	beq.n	8001f92 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f804 	bl	8001f9a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e07f      	b.n	80020c2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff f904 	bl	80011e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	e006      	b.n	8002038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d104      	bne.n	800204a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_I2C_Init+0x11c>)
 8002056:	430b      	orrs	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002068:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69d9      	ldr	r1, [r3, #28]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	02008000 	.word	0x02008000

080020d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d138      	bne.n	8002158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e032      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	e000      	b.n	800215a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
  }
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b20      	cmp	r3, #32
 800217a:	d139      	bne.n	80021f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002186:	2302      	movs	r3, #2
 8002188:	e033      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2224      	movs	r2, #36	; 0x24
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	e000      	b.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021f0:	2302      	movs	r3, #2
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0bf      	b.n	8002392 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff f840 	bl	80012ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002242:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6999      	ldr	r1, [r3, #24]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002258:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6899      	ldr	r1, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b4a      	ldr	r3, [pc, #296]	; (800239c <HAL_LTDC_Init+0x19c>)
 8002274:	400b      	ands	r3, r1
 8002276:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68d9      	ldr	r1, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b3e      	ldr	r3, [pc, #248]	; (800239c <HAL_LTDC_Init+0x19c>)
 80022a2:	400b      	ands	r3, r1
 80022a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	041b      	lsls	r3, r3, #16
 80022ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b33      	ldr	r3, [pc, #204]	; (800239c <HAL_LTDC_Init+0x19c>)
 80022d0:	400b      	ands	r3, r1
 80022d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6959      	ldr	r1, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_LTDC_Init+0x19c>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	041b      	lsls	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6959      	ldr	r1, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0206 	orr.w	r2, r2, #6
 800236e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	f000f800 	.word	0xf000f800

080023a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_LTDC_ConfigLayer+0x1a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e02c      	b.n	8002414 <HAL_LTDC_ConfigLayer+0x74>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2134      	movs	r1, #52	; 0x34
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	4614      	mov	r4, r2
 80023de:	461d      	mov	r5, r3
 80023e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ec:	682b      	ldr	r3, [r5, #0]
 80023ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f811 	bl	800241c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bdb0      	pop	{r4, r5, r7, pc}

0800241c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	4413      	add	r3, r2
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	01db      	lsls	r3, r3, #7
 8002448:	4413      	add	r3, r2
 800244a:	3384      	adds	r3, #132	; 0x84
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	4611      	mov	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	01d2      	lsls	r2, r2, #7
 8002458:	440a      	add	r2, r1
 800245a:	3284      	adds	r2, #132	; 0x84
 800245c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002460:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002472:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002474:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	440b      	add	r3, r1
 8002482:	3384      	adds	r3, #132	; 0x84
 8002484:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800248a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800249a:	4413      	add	r3, r2
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	4413      	add	r3, r2
 80024ac:	3384      	adds	r3, #132	; 0x84
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	4611      	mov	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	01d2      	lsls	r2, r2, #7
 80024ba:	440a      	add	r2, r1
 80024bc:	3284      	adds	r2, #132	; 0x84
 80024be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80024c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024d2:	4413      	add	r3, r2
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	01db      	lsls	r3, r3, #7
 80024e0:	440b      	add	r3, r1
 80024e2:	3384      	adds	r3, #132	; 0x84
 80024e4:	4619      	mov	r1, r3
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	01db      	lsls	r3, r3, #7
 80024f6:	4413      	add	r3, r2
 80024f8:	3384      	adds	r3, #132	; 0x84
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4611      	mov	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	01d2      	lsls	r2, r2, #7
 8002506:	440a      	add	r2, r1
 8002508:	3284      	adds	r2, #132	; 0x84
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	01db      	lsls	r3, r3, #7
 800251a:	4413      	add	r3, r2
 800251c:	3384      	adds	r3, #132	; 0x84
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002536:	041b      	lsls	r3, r3, #16
 8002538:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	01db      	lsls	r3, r3, #7
 800254c:	4413      	add	r3, r2
 800254e:	3384      	adds	r3, #132	; 0x84
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	4413      	add	r3, r2
 800255e:	3384      	adds	r3, #132	; 0x84
 8002560:	461a      	mov	r2, r3
 8002562:	2300      	movs	r3, #0
 8002564:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256c:	461a      	mov	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	431a      	orrs	r2, r3
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	431a      	orrs	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4619      	mov	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	01db      	lsls	r3, r3, #7
 8002580:	440b      	add	r3, r1
 8002582:	3384      	adds	r3, #132	; 0x84
 8002584:	4619      	mov	r1, r3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	01db      	lsls	r3, r3, #7
 8002596:	4413      	add	r3, r2
 8002598:	3384      	adds	r3, #132	; 0x84
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	4611      	mov	r1, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	01d2      	lsls	r2, r2, #7
 80025a6:	440a      	add	r2, r1
 80025a8:	3284      	adds	r2, #132	; 0x84
 80025aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	01db      	lsls	r3, r3, #7
 80025ba:	4413      	add	r3, r2
 80025bc:	3384      	adds	r3, #132	; 0x84
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	01db      	lsls	r3, r3, #7
 80025d0:	4413      	add	r3, r2
 80025d2:	3384      	adds	r3, #132	; 0x84
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	01db      	lsls	r3, r3, #7
 80025e0:	440b      	add	r3, r1
 80025e2:	3384      	adds	r3, #132	; 0x84
 80025e4:	4619      	mov	r1, r3
 80025e6:	4b58      	ldr	r3, [pc, #352]	; (8002748 <LTDC_SetConfig+0x32c>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	69da      	ldr	r2, [r3, #28]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	68f9      	ldr	r1, [r7, #12]
 80025f6:	6809      	ldr	r1, [r1, #0]
 80025f8:	4608      	mov	r0, r1
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	01c9      	lsls	r1, r1, #7
 80025fe:	4401      	add	r1, r0
 8002600:	3184      	adds	r1, #132	; 0x84
 8002602:	4313      	orrs	r3, r2
 8002604:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	01db      	lsls	r3, r3, #7
 8002610:	4413      	add	r3, r2
 8002612:	3384      	adds	r3, #132	; 0x84
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	01db      	lsls	r3, r3, #7
 8002620:	4413      	add	r3, r2
 8002622:	3384      	adds	r3, #132	; 0x84
 8002624:	461a      	mov	r2, r3
 8002626:	2300      	movs	r3, #0
 8002628:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	01db      	lsls	r3, r3, #7
 8002634:	4413      	add	r3, r2
 8002636:	3384      	adds	r3, #132	; 0x84
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002648:	2304      	movs	r3, #4
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e01b      	b.n	8002686 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d102      	bne.n	800265c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002656:	2303      	movs	r3, #3
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e014      	b.n	8002686 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b04      	cmp	r3, #4
 8002662:	d00b      	beq.n	800267c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002668:	2b02      	cmp	r3, #2
 800266a:	d007      	beq.n	800267c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002670:	2b03      	cmp	r3, #3
 8002672:	d003      	beq.n	800267c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002678:	2b07      	cmp	r3, #7
 800267a:	d102      	bne.n	8002682 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800267c:	2302      	movs	r3, #2
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e001      	b.n	8002686 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	01db      	lsls	r3, r3, #7
 8002690:	4413      	add	r3, r2
 8002692:	3384      	adds	r3, #132	; 0x84
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	4611      	mov	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	01d2      	lsls	r2, r2, #7
 80026a0:	440a      	add	r2, r1
 80026a2:	3284      	adds	r2, #132	; 0x84
 80026a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80026a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1acb      	subs	r3, r1, r3
 80026c0:	69f9      	ldr	r1, [r7, #28]
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	3307      	adds	r3, #7
 80026c8:	68f9      	ldr	r1, [r7, #12]
 80026ca:	6809      	ldr	r1, [r1, #0]
 80026cc:	4608      	mov	r0, r1
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	01c9      	lsls	r1, r1, #7
 80026d2:	4401      	add	r1, r0
 80026d4:	3184      	adds	r1, #132	; 0x84
 80026d6:	4313      	orrs	r3, r2
 80026d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	4413      	add	r3, r2
 80026e6:	3384      	adds	r3, #132	; 0x84
 80026e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	01db      	lsls	r3, r3, #7
 80026f4:	440b      	add	r3, r1
 80026f6:	3384      	adds	r3, #132	; 0x84
 80026f8:	4619      	mov	r1, r3
 80026fa:	4b14      	ldr	r3, [pc, #80]	; (800274c <LTDC_SetConfig+0x330>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	01db      	lsls	r3, r3, #7
 800270a:	4413      	add	r3, r2
 800270c:	3384      	adds	r3, #132	; 0x84
 800270e:	461a      	mov	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	01db      	lsls	r3, r3, #7
 8002720:	4413      	add	r3, r2
 8002722:	3384      	adds	r3, #132	; 0x84
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	4611      	mov	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	01d2      	lsls	r2, r2, #7
 8002730:	440a      	add	r2, r1
 8002732:	3284      	adds	r2, #132	; 0x84
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	fffff8f8 	.word	0xfffff8f8
 800274c:	fffff800 	.word	0xfffff800

08002750 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	2b06      	cmp	r3, #6
 8002762:	d00a      	beq.n	800277a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e040      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e03e      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002782:	491f      	ldr	r1, [pc, #124]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800278a:	f7ff f8c9 	bl	8001920 <HAL_GetTick>
 800278e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002790:	e009      	b.n	80027a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002792:	f7ff f8c5 	bl	8001920 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a0:	d901      	bls.n	80027a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e028      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b2:	d1ee      	bne.n	8002792 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b1e      	cmp	r3, #30
 80027b8:	d008      	beq.n	80027cc <HAL_PWREx_ConfigSupply+0x7c>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b2e      	cmp	r3, #46	; 0x2e
 80027be:	d005      	beq.n	80027cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b1d      	cmp	r3, #29
 80027c4:	d002      	beq.n	80027cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b2d      	cmp	r3, #45	; 0x2d
 80027ca:	d114      	bne.n	80027f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80027cc:	f7ff f8a8 	bl	8001920 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027d2:	e009      	b.n	80027e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027d4:	f7ff f8a4 	bl	8001920 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027e2:	d901      	bls.n	80027e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d1ee      	bne.n	80027d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	58024800 	.word	0x58024800

08002804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3f4      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80b3 	beq.w	800298a <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002824:	4b95      	ldr	r3, [pc, #596]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800282e:	4b93      	ldr	r3, [pc, #588]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002836:	2b10      	cmp	r3, #16
 8002838:	d007      	beq.n	800284a <HAL_RCC_OscConfig+0x46>
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b18      	cmp	r3, #24
 800283e:	d112      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8098 	beq.w	8002988 <HAL_RCC_OscConfig+0x184>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	f040 8093 	bne.w	8002988 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e3cc      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x7a>
 8002870:	4b82      	ldr	r3, [pc, #520]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a81      	ldr	r2, [pc, #516]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e058      	b.n	8002930 <HAL_RCC_OscConfig+0x12c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d112      	bne.n	80028ac <HAL_RCC_OscConfig+0xa8>
 8002886:	4b7d      	ldr	r3, [pc, #500]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7c      	ldr	r2, [pc, #496]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a79      	ldr	r2, [pc, #484]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002898:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a76      	ldr	r2, [pc, #472]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e041      	b.n	8002930 <HAL_RCC_OscConfig+0x12c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b4:	d112      	bne.n	80028dc <HAL_RCC_OscConfig+0xd8>
 80028b6:	4b71      	ldr	r3, [pc, #452]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a70      	ldr	r2, [pc, #448]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6d      	ldr	r2, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b6b      	ldr	r3, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e029      	b.n	8002930 <HAL_RCC_OscConfig+0x12c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80028e4:	d112      	bne.n	800290c <HAL_RCC_OscConfig+0x108>
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a64      	ldr	r2, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80028f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e011      	b.n	8002930 <HAL_RCC_OscConfig+0x12c>
 800290c:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800291e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b55      	ldr	r3, [pc, #340]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a54      	ldr	r2, [pc, #336]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800292a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fff2 	bl	8001920 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002940:	f7fe ffee 	bl	8001920 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e356      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x13c>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe ffde 	bl	8001920 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe ffda 	bl	8001920 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e342      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x164>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 808d 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002998:	4b38      	ldr	r3, [pc, #224]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d007      	beq.n	80029be <HAL_RCC_OscConfig+0x1ba>
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2b18      	cmp	r3, #24
 80029b2:	d137      	bne.n	8002a24 <HAL_RCC_OscConfig+0x220>
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d132      	bne.n	8002a24 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029be:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e314      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 0219 	bic.w	r2, r3, #25
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4926      	ldr	r1, [pc, #152]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029e8:	f7fe ff9a 	bl	8001920 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f0:	f7fe ff96 	bl	8001920 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e2fe      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	4917      	ldr	r1, [pc, #92]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a22:	e046      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d029      	beq.n	8002a80 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 0219 	bic.w	r2, r3, #25
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4910      	ldr	r1, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe ff6f 	bl	8001920 <HAL_GetTick>
 8002a42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7fe ff6b 	bl	8001920 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e2d3      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	4902      	ldr	r1, [pc, #8]	; (8002a7c <HAL_RCC_OscConfig+0x278>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
 8002a78:	e01b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2ae>
 8002a7a:	bf00      	nop
 8002a7c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a80:	4b97      	ldr	r3, [pc, #604]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a96      	ldr	r2, [pc, #600]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe ff48 	bl	8001920 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe ff44 	bl	8001920 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e2ac      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa6:	4b8e      	ldr	r3, [pc, #568]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d06a      	beq.n	8002b94 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac8:	4b85      	ldr	r3, [pc, #532]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d007      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x2e0>
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	2b18      	cmp	r3, #24
 8002ad8:	d11b      	bne.n	8002b12 <HAL_RCC_OscConfig+0x30e>
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d116      	bne.n	8002b12 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae4:	4b7e      	ldr	r3, [pc, #504]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x2f8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b80      	cmp	r3, #128	; 0x80
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e281      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002afc:	4b78      	ldr	r3, [pc, #480]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	4975      	ldr	r1, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b10:	e040      	b.n	8002b94 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d023      	beq.n	8002b62 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b1a:	4b71      	ldr	r3, [pc, #452]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a70      	ldr	r2, [pc, #448]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7fe fefb 	bl	8001920 <HAL_GetTick>
 8002b2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b2e:	f7fe fef7 	bl	8001920 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e25f      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b40:	4b67      	ldr	r3, [pc, #412]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b4c:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	4961      	ldr	r1, [pc, #388]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e018      	b.n	8002b94 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5e      	ldr	r2, [pc, #376]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe fed7 	bl	8001920 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b76:	f7fe fed3 	bl	8001920 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e23b      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b88:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d036      	beq.n	8002c0e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d019      	beq.n	8002bdc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe feb4 	bl	8001920 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe feb0 	bl	8001920 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e218      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bce:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x3b8>
 8002bda:	e018      	b.n	8002c0e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b40      	ldr	r3, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	4a3f      	ldr	r2, [pc, #252]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe fe9a 	bl	8001920 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fe96 	bl	8001920 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1fe      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c02:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d036      	beq.n	8002c88 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c22:	4b2f      	ldr	r3, [pc, #188]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a2e      	ldr	r2, [pc, #184]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fe77 	bl	8001920 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7fe fe73 	bl	8001920 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1db      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c48:	4b25      	ldr	r3, [pc, #148]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x432>
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c56:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fe5d 	bl	8001920 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c6a:	f7fe fe59 	bl	8001920 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e1c1      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80af 	beq.w	8002df4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <HAL_RCC_OscConfig+0x4e0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <HAL_RCC_OscConfig+0x4e0>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fe3d 	bl	8001920 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fe39 	bl	8001920 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1a1      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_OscConfig+0x4e0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x4e4>
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a02      	ldr	r2, [pc, #8]	; (8002ce0 <HAL_RCC_OscConfig+0x4dc>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e05b      	b.n	8002d96 <HAL_RCC_OscConfig+0x592>
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58024800 	.word	0x58024800
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d112      	bne.n	8002d16 <HAL_RCC_OscConfig+0x512>
 8002cf0:	4b9d      	ldr	r3, [pc, #628]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf4:	4a9c      	ldr	r2, [pc, #624]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfc:	4b9a      	ldr	r3, [pc, #616]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	4a99      	ldr	r2, [pc, #612]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	6713      	str	r3, [r2, #112]	; 0x70
 8002d08:	4b97      	ldr	r3, [pc, #604]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	4a96      	ldr	r2, [pc, #600]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	; 0x70
 8002d14:	e03f      	b.n	8002d96 <HAL_RCC_OscConfig+0x592>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d112      	bne.n	8002d44 <HAL_RCC_OscConfig+0x540>
 8002d1e:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	4a91      	ldr	r2, [pc, #580]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2a:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a8e      	ldr	r2, [pc, #568]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a8b      	ldr	r2, [pc, #556]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
 8002d42:	e028      	b.n	8002d96 <HAL_RCC_OscConfig+0x592>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b85      	cmp	r3, #133	; 0x85
 8002d4a:	d112      	bne.n	8002d72 <HAL_RCC_OscConfig+0x56e>
 8002d4c:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d50:	4a85      	ldr	r2, [pc, #532]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	; 0x70
 8002d58:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5c:	4a82      	ldr	r2, [pc, #520]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d62:	6713      	str	r3, [r2, #112]	; 0x70
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a7f      	ldr	r2, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	e011      	b.n	8002d96 <HAL_RCC_OscConfig+0x592>
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d015      	beq.n	8002dca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fe fdbf 	bl	8001920 <HAL_GetTick>
 8002da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002da6:	f7fe fdbb 	bl	8001920 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e121      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ee      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5a2>
 8002dc8:	e014      	b.n	8002df4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7fe fda9 	bl	8001920 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe fda5 	bl	8001920 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e10b      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002de8:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1ee      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8100 	beq.w	8002ffe <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dfe:	4b5a      	ldr	r3, [pc, #360]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e06:	2b18      	cmp	r3, #24
 8002e08:	f000 80bb 	beq.w	8002f82 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f040 8095 	bne.w	8002f40 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e16:	4b54      	ldr	r3, [pc, #336]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fd7d 	bl	8001920 <HAL_GetTick>
 8002e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fd79 	bl	8001920 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e0e1      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e3c:	4b4a      	ldr	r3, [pc, #296]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1f0      	bne.n	8002e2a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e48:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4c:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x768>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	4942      	ldr	r1, [pc, #264]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	628b      	str	r3, [r1, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e70:	3b01      	subs	r3, #1
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	041b      	lsls	r3, r3, #16
 8002e80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e92:	4935      	ldr	r1, [pc, #212]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e98:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	4a32      	ldr	r2, [pc, #200]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea8:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x76c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	492d      	ldr	r1, [pc, #180]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f023 020c 	bic.w	r2, r3, #12
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4928      	ldr	r1, [pc, #160]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f023 0202 	bic.w	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4924      	ldr	r1, [pc, #144]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002edc:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	4a1e      	ldr	r2, [pc, #120]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ef4:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a18      	ldr	r2, [pc, #96]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a15      	ldr	r2, [pc, #84]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd02 	bl	8001920 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fcfe 	bl	8001920 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e066      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x71c>
 8002f3e:	e05e      	b.n	8002ffe <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f40:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a08      	ldr	r2, [pc, #32]	; (8002f68 <HAL_RCC_OscConfig+0x764>)
 8002f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fce8 	bl	8001920 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f52:	e00f      	b.n	8002f74 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fce4 	bl	8001920 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e04c      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
 8002f66:	bf00      	nop
 8002f68:	58024400 	.word	0x58024400
 8002f6c:	fffffc0c 	.word	0xfffffc0c
 8002f70:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_RCC_OscConfig+0x804>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e9      	bne.n	8002f54 <HAL_RCC_OscConfig+0x750>
 8002f80:	e03d      	b.n	8002ffe <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f82:	4b21      	ldr	r3, [pc, #132]	; (8003008 <HAL_RCC_OscConfig+0x804>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_OscConfig+0x804>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d031      	beq.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f003 0203 	and.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d12a      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d122      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d11a      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	0a5b      	lsrs	r3, r3, #9
 8002fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d111      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d108      	bne.n	8002ffa <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	0e1b      	lsrs	r3, r3, #24
 8002fec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3730      	adds	r7, #48	; 0x30
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400

0800300c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e19c      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b8a      	ldr	r3, [pc, #552]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d910      	bls.n	8003050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 020f 	bic.w	r2, r3, #15
 8003036:	4985      	ldr	r1, [pc, #532]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b83      	ldr	r3, [pc, #524]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e184      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800306c:	4b78      	ldr	r3, [pc, #480]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	4975      	ldr	r1, [pc, #468]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d010      	beq.n	80030ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	4b70      	ldr	r3, [pc, #448]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003096:	429a      	cmp	r2, r3
 8003098:	d908      	bls.n	80030ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800309a:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	496a      	ldr	r1, [pc, #424]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d010      	beq.n	80030da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d908      	bls.n	80030da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	495e      	ldr	r1, [pc, #376]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d010      	beq.n	8003108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d908      	bls.n	8003108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	4953      	ldr	r1, [pc, #332]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003104:	4313      	orrs	r3, r2
 8003106:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d010      	beq.n	8003136 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	429a      	cmp	r2, r3
 8003122:	d908      	bls.n	8003136 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b4a      	ldr	r3, [pc, #296]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f023 020f 	bic.w	r2, r3, #15
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4947      	ldr	r1, [pc, #284]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003132:	4313      	orrs	r3, r2
 8003134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d055      	beq.n	80031ee <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003142:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003150:	4313      	orrs	r3, r2
 8003152:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d107      	bne.n	800316c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800315c:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d121      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0f6      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d115      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ea      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800318c:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0de      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319c:	4b2c      	ldr	r3, [pc, #176]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0d6      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f023 0207 	bic.w	r2, r3, #7
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4925      	ldr	r1, [pc, #148]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe fbaf 	bl	8001920 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c6:	f7fe fbab 	bl	8001920 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e0be      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d1eb      	bne.n	80031c6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	429a      	cmp	r2, r3
 8003208:	d208      	bcs.n	800321c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f023 020f 	bic.w	r2, r3, #15
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	490e      	ldr	r1, [pc, #56]	; (8003250 <HAL_RCC_ClockConfig+0x244>)
 8003218:	4313      	orrs	r3, r2
 800321a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d214      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4906      	ldr	r1, [pc, #24]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_ClockConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e086      	b.n	800335a <HAL_RCC_ClockConfig+0x34e>
 800324c:	52002000 	.word	0x52002000
 8003250:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d010      	beq.n	8003282 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326c:	429a      	cmp	r2, r3
 800326e:	d208      	bcs.n	8003282 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003270:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4939      	ldr	r1, [pc, #228]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 800327e:	4313      	orrs	r3, r2
 8003280:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329a:	429a      	cmp	r2, r3
 800329c:	d208      	bcs.n	80032b0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	492e      	ldr	r1, [pc, #184]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b28      	ldr	r3, [pc, #160]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d208      	bcs.n	80032de <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4922      	ldr	r1, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d010      	beq.n	800330c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	4b1d      	ldr	r3, [pc, #116]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d208      	bcs.n	800330c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4917      	ldr	r1, [pc, #92]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 8003308:	4313      	orrs	r3, r2
 800330a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800330c:	f000 f834 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	4912      	ldr	r1, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x35c>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800332a:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x358>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x35c>)
 8003334:	5cd3      	ldrb	r3, [r2, r3]
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	4a0a      	ldr	r2, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x360>)
 8003342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003344:	4a0a      	ldr	r2, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x364>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_RCC_ClockConfig+0x368>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fa9c 	bl	800188c <HAL_InitTick>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	58024400 	.word	0x58024400
 8003368:	08006e54 	.word	0x08006e54
 800336c:	24012008 	.word	0x24012008
 8003370:	24012004 	.word	0x24012004
 8003374:	2401200c 	.word	0x2401200c

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337e:	4bb3      	ldr	r3, [pc, #716]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003386:	2b18      	cmp	r3, #24
 8003388:	f200 8155 	bhi.w	8003636 <HAL_RCC_GetSysClockFreq+0x2be>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <HAL_RCC_GetSysClockFreq+0x1c>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033f9 	.word	0x080033f9
 8003398:	08003637 	.word	0x08003637
 800339c:	08003637 	.word	0x08003637
 80033a0:	08003637 	.word	0x08003637
 80033a4:	08003637 	.word	0x08003637
 80033a8:	08003637 	.word	0x08003637
 80033ac:	08003637 	.word	0x08003637
 80033b0:	08003637 	.word	0x08003637
 80033b4:	0800341f 	.word	0x0800341f
 80033b8:	08003637 	.word	0x08003637
 80033bc:	08003637 	.word	0x08003637
 80033c0:	08003637 	.word	0x08003637
 80033c4:	08003637 	.word	0x08003637
 80033c8:	08003637 	.word	0x08003637
 80033cc:	08003637 	.word	0x08003637
 80033d0:	08003637 	.word	0x08003637
 80033d4:	08003425 	.word	0x08003425
 80033d8:	08003637 	.word	0x08003637
 80033dc:	08003637 	.word	0x08003637
 80033e0:	08003637 	.word	0x08003637
 80033e4:	08003637 	.word	0x08003637
 80033e8:	08003637 	.word	0x08003637
 80033ec:	08003637 	.word	0x08003637
 80033f0:	08003637 	.word	0x08003637
 80033f4:	0800342b 	.word	0x0800342b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f8:	4b94      	ldr	r3, [pc, #592]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003404:	4b91      	ldr	r3, [pc, #580]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	08db      	lsrs	r3, r3, #3
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	4a90      	ldr	r2, [pc, #576]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003416:	e111      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003418:	4b8d      	ldr	r3, [pc, #564]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800341a:	61bb      	str	r3, [r7, #24]
    break;
 800341c:	e10e      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800341e:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003420:	61bb      	str	r3, [r7, #24]
    break;
 8003422:	e10b      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003424:	4b8c      	ldr	r3, [pc, #560]	; (8003658 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003426:	61bb      	str	r3, [r7, #24]
    break;
 8003428:	e108      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800342a:	4b88      	ldr	r3, [pc, #544]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003434:	4b85      	ldr	r3, [pc, #532]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003440:	4b82      	ldr	r3, [pc, #520]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800344a:	4b80      	ldr	r3, [pc, #512]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003462:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80e1 	beq.w	8003630 <HAL_RCC_GetSysClockFreq+0x2b8>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b02      	cmp	r3, #2
 8003472:	f000 8083 	beq.w	800357c <HAL_RCC_GetSysClockFreq+0x204>
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b02      	cmp	r3, #2
 800347a:	f200 80a1 	bhi.w	80035c0 <HAL_RCC_GetSysClockFreq+0x248>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x114>
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d056      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x1c0>
 800348a:	e099      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800348c:	4b6f      	ldr	r3, [pc, #444]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003498:	4b6c      	ldr	r3, [pc, #432]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	08db      	lsrs	r3, r3, #3
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	4a6b      	ldr	r2, [pc, #428]	; (8003650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	ee07 3a90 	vmov	s15, r3
 80034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800365c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034f2:	e087      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003660 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003506:	4b51      	ldr	r3, [pc, #324]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003516:	ed97 6a02 	vldr	s12, [r7, #8]
 800351a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800365c <HAL_RCC_GetSysClockFreq+0x2e4>
 800351e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003536:	e065      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003664 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354a:	4b40      	ldr	r3, [pc, #256]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355a:	ed97 6a02 	vldr	s12, [r7, #8]
 800355e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800365c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800357a:	e043      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003668 <HAL_RCC_GetSysClockFreq+0x2f0>
 800358a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358e:	4b2f      	ldr	r3, [pc, #188]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359e:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800365c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035be:	e021      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003664 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800365c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003602:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	0a5b      	lsrs	r3, r3, #9
 800360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360e:	3301      	adds	r3, #1
 8003610:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800361c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003628:	ee17 3a90 	vmov	r3, s15
 800362c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800362e:	e005      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	61bb      	str	r3, [r7, #24]
    break;
 8003634:	e002      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003636:	4b07      	ldr	r3, [pc, #28]	; (8003654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003638:	61bb      	str	r3, [r7, #24]
    break;
 800363a:	bf00      	nop
  }

  return sysclockfreq;
 800363c:	69bb      	ldr	r3, [r7, #24]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	03d09000 	.word	0x03d09000
 8003654:	003d0900 	.word	0x003d0900
 8003658:	007a1200 	.word	0x007a1200
 800365c:	46000000 	.word	0x46000000
 8003660:	4c742400 	.word	0x4c742400
 8003664:	4a742400 	.word	0x4a742400
 8003668:	4af42400 	.word	0x4af42400

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003672:	f7ff fe81 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003676:	4602      	mov	r2, r0
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <HAL_RCC_GetHCLKFreq+0x50>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	490f      	ldr	r1, [pc, #60]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	fa22 f303 	lsr.w	r3, r2, r3
 800368e:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003690:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_RCC_GetHCLKFreq+0x50>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036aa:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036b0:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	58024400 	.word	0x58024400
 80036c0:	08006e54 	.word	0x08006e54
 80036c4:	24012008 	.word	0x24012008
 80036c8:	24012004 	.word	0x24012004

080036cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80036d0:	f7ff ffcc 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036d4:	4602      	mov	r2, r0
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	4904      	ldr	r1, [pc, #16]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e2:	5ccb      	ldrb	r3, [r1, r3]
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	58024400 	.word	0x58024400
 80036f4:	08006e54 	.word	0x08006e54

080036f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80036fc:	f7ff ffb6 	bl	800366c <HAL_RCC_GetHCLKFreq>
 8003700:	4602      	mov	r2, r0
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	4904      	ldr	r1, [pc, #16]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800370e:	5ccb      	ldrb	r3, [r1, r3]
 8003710:	f003 031f 	and.w	r3, r3, #31
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	58024400 	.word	0x58024400
 8003720:	08006e54 	.word	0x08006e54

08003724 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003730:	2300      	movs	r3, #0
 8003732:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d03f      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003748:	d02a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800374a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374e:	d824      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003754:	d018      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375a:	d81e      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003760:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003766:	e018      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b9f      	ldr	r3, [pc, #636]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	4a9e      	ldr	r2, [pc, #632]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003774:	e015      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f001 f99b 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3324      	adds	r3, #36	; 0x24
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fa44 	bl	8004c1c <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a2:	7dfb      	ldrb	r3, [r7, #23]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037a8:	4b8f      	ldr	r3, [pc, #572]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037b4:	498c      	ldr	r1, [pc, #560]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	650b      	str	r3, [r1, #80]	; 0x50
 80037ba:	e001      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037bc:	7dfb      	ldrb	r3, [r7, #23]
 80037be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d03d      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d826      	bhi.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037f1 	.word	0x080037f1
 80037e0:	080037ff 	.word	0x080037ff
 80037e4:	08003811 	.word	0x08003811
 80037e8:	08003829 	.word	0x08003829
 80037ec:	08003829 	.word	0x08003829
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f0:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	4a7c      	ldr	r2, [pc, #496]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80037f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037fc:	e015      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3304      	adds	r3, #4
 8003802:	2100      	movs	r1, #0
 8003804:	4618      	mov	r0, r3
 8003806:	f001 f957 	bl	8004ab8 <RCCEx_PLL2_Config>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800380e:	e00c      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3324      	adds	r3, #36	; 0x24
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fa00 	bl	8004c1c <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	75fb      	strb	r3, [r7, #23]
      break;
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003828:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d109      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003830:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	496a      	ldr	r1, [pc, #424]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	650b      	str	r3, [r1, #80]	; 0x50
 8003842:	e001      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003850:	2b00      	cmp	r3, #0
 8003852:	d04a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800385c:	d031      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800385e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003862:	d82b      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003868:	d02d      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800386a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386e:	d825      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003870:	2bc0      	cmp	r3, #192	; 0xc0
 8003872:	d02a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003874:	2bc0      	cmp	r3, #192	; 0xc0
 8003876:	d821      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d016      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d81d      	bhi.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d007      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003888:	e018      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388a:	4b57      	ldr	r3, [pc, #348]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	4a56      	ldr	r2, [pc, #344]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003896:	e019      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3304      	adds	r3, #4
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 f90a 	bl	8004ab8 <RCCEx_PLL2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80038a8:	e010      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3324      	adds	r3, #36	; 0x24
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 f9b3 	bl	8004c1c <RCCEx_PLL3_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 80038ba:	e007      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	75fb      	strb	r3, [r7, #23]
      break;
 80038c0:	e004      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e002      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e000      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 80038ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80038d2:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038de:	4942      	ldr	r1, [pc, #264]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	650b      	str	r3, [r1, #80]	; 0x50
 80038e4:	e001      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04f      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80038fe:	d036      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003900:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003904:	d830      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800390a:	d032      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 800390c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003910:	d82a      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003912:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003916:	d02e      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003918:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800391c:	d824      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003922:	d018      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d81e      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800392e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003932:	d007      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003934:	e018      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003942:	e019      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f001 f8b4 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003954:	e010      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3324      	adds	r3, #36	; 0x24
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f001 f95d 	bl	8004c1c <RCCEx_PLL3_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003966:	e007      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
      break;
 800396c:	e004      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800396e:	bf00      	nop
 8003970:	e002      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003972:	bf00      	nop
 8003974:	e000      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800397e:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003982:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	4917      	ldr	r1, [pc, #92]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	650b      	str	r3, [r1, #80]	; 0x50
 8003990:	e001      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d034      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a6:	2b30      	cmp	r3, #48	; 0x30
 80039a8:	d01c      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 80039aa:	2b30      	cmp	r3, #48	; 0x30
 80039ac:	d817      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d00c      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d813      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d018      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80039ba:	2b10      	cmp	r3, #16
 80039bc:	d10f      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80039ca:	e010      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f870 	bl	8004ab8 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80039dc:	e007      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	75fb      	strb	r3, [r7, #23]
      break;
 80039e2:	e004      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 80039e4:	bf00      	nop
 80039e6:	e002      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039e8:	58024400 	.word	0x58024400
      break;
 80039ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d109      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80039f4:	4b9b      	ldr	r3, [pc, #620]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a00:	4998      	ldr	r1, [pc, #608]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a06:	e001      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d047      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a20:	d030      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a26:	d82a      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a2c:	d02c      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8003a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a32:	d824      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d018      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3e:	d81e      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d007      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003a4a:	e018      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4c:	4b85      	ldr	r3, [pc, #532]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a84      	ldr	r2, [pc, #528]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a58:	e017      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	2100      	movs	r1, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 f829 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a6a:	e00e      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3324      	adds	r3, #36	; 0x24
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f001 f8d2 	bl	8004c1c <RCCEx_PLL3_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a7c:	e005      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
      break;
 8003a82:	e002      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003a84:	bf00      	nop
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a90:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9c:	4971      	ldr	r1, [pc, #452]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	650b      	str	r3, [r1, #80]	; 0x50
 8003aa2:	e001      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d049      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003abc:	d02e      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003abe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac2:	d828      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ac4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac8:	d02a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ace:	d822      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad4:	d026      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ada:	d81c      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae0:	d010      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae6:	d816      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af0:	d111      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ffdd 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b02:	e012      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f886 	bl	8004c1c <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b14:	e009      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1a:	e006      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003b1c:	bf00      	nop
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003b20:	bf00      	nop
 8003b22:	e002      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003b24:	bf00      	nop
 8003b26:	e000      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8003b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d109      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b3c:	4949      	ldr	r1, [pc, #292]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	650b      	str	r3, [r1, #80]	; 0x50
 8003b42:	e001      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d053      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b5a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003b5e:	d034      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b60:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003b64:	d82e      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b6a:	d030      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b70:	d828      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d02c      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d822      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b82:	d028      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8003b84:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b88:	d81c      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8003b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b94:	d816      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01f      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8003b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3304      	adds	r3, #4
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ff86 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bb0:	e014      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3324      	adds	r3, #36	; 0x24
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 f82f 	bl	8004c1c <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003bc2:	e00b      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc8:	e008      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8003bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf0:	491c      	ldr	r1, [pc, #112]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bf6:	e001      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d031      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c10:	d00e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c16:	d814      	bhi.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c20:	d10f      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c2e:	e00c      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 ff3e 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c40:	e003      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
      break;
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8003c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5c:	4901      	ldr	r1, [pc, #4]	; (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	650b      	str	r3, [r1, #80]	; 0x50
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8003c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d032      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d81b      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003cbf 	.word	0x08003cbf
 8003c8c:	08003c99 	.word	0x08003c99
 8003c90:	08003ca7 	.word	0x08003ca7
 8003c94:	08003cbf 	.word	0x08003cbf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4bb2      	ldr	r3, [pc, #712]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4ab1      	ldr	r2, [pc, #708]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 ff03 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7dfb      	ldrb	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cc6:	4ba7      	ldr	r3, [pc, #668]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	f023 0203 	bic.w	r2, r3, #3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	49a4      	ldr	r1, [pc, #656]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cd8:	e001      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8086 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cec:	4b9e      	ldr	r3, [pc, #632]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a9d      	ldr	r2, [pc, #628]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fe12 	bl	8001920 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cfe:	e009      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d00:	f7fd fe0e 	bl	8001920 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b64      	cmp	r3, #100	; 0x64
 8003d0c:	d902      	bls.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	75fb      	strb	r3, [r7, #23]
        break;
 8003d12:	e005      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d14:	4b94      	ldr	r3, [pc, #592]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0ef      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d166      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d26:	4b8f      	ldr	r3, [pc, #572]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d30:	4053      	eors	r3, r2
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d013      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d3a:	4b8a      	ldr	r3, [pc, #552]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d42:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d44:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	4a86      	ldr	r2, [pc, #536]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d50:	4b84      	ldr	r3, [pc, #528]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d5c:	4a81      	ldr	r2, [pc, #516]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d6c:	d115      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fd fdd7 	bl	8001920 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d74:	e00b      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd fdd3 	bl	8001920 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d902      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8003d8c:	e005      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d8e:	4b75      	ldr	r3, [pc, #468]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0ed      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d126      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dae:	d10d      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 8003db0:	4b6c      	ldr	r3, [pc, #432]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dbe:	0919      	lsrs	r1, r3, #4
 8003dc0:	4b6a      	ldr	r3, [pc, #424]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	4967      	ldr	r1, [pc, #412]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	610b      	str	r3, [r1, #16]
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003dcc:	4b65      	ldr	r3, [pc, #404]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	4a64      	ldr	r2, [pc, #400]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dd2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dd6:	6113      	str	r3, [r2, #16]
 8003dd8:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de6:	495f      	ldr	r1, [pc, #380]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	670b      	str	r3, [r1, #112]	; 0x70
 8003dec:	e004      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	75bb      	strb	r3, [r7, #22]
 8003df2:	e001      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d07f      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0a:	2b28      	cmp	r3, #40	; 0x28
 8003e0c:	d866      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8003e0e:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003ee3 	.word	0x08003ee3
 8003e18:	08003edd 	.word	0x08003edd
 8003e1c:	08003edd 	.word	0x08003edd
 8003e20:	08003edd 	.word	0x08003edd
 8003e24:	08003edd 	.word	0x08003edd
 8003e28:	08003edd 	.word	0x08003edd
 8003e2c:	08003edd 	.word	0x08003edd
 8003e30:	08003edd 	.word	0x08003edd
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08003edd 	.word	0x08003edd
 8003e3c:	08003edd 	.word	0x08003edd
 8003e40:	08003edd 	.word	0x08003edd
 8003e44:	08003edd 	.word	0x08003edd
 8003e48:	08003edd 	.word	0x08003edd
 8003e4c:	08003edd 	.word	0x08003edd
 8003e50:	08003edd 	.word	0x08003edd
 8003e54:	08003ecb 	.word	0x08003ecb
 8003e58:	08003edd 	.word	0x08003edd
 8003e5c:	08003edd 	.word	0x08003edd
 8003e60:	08003edd 	.word	0x08003edd
 8003e64:	08003edd 	.word	0x08003edd
 8003e68:	08003edd 	.word	0x08003edd
 8003e6c:	08003edd 	.word	0x08003edd
 8003e70:	08003edd 	.word	0x08003edd
 8003e74:	08003ee3 	.word	0x08003ee3
 8003e78:	08003edd 	.word	0x08003edd
 8003e7c:	08003edd 	.word	0x08003edd
 8003e80:	08003edd 	.word	0x08003edd
 8003e84:	08003edd 	.word	0x08003edd
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003edd 	.word	0x08003edd
 8003e94:	08003ee3 	.word	0x08003ee3
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003edd 	.word	0x08003edd
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003edd 	.word	0x08003edd
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003ee3 	.word	0x08003ee3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fdfa 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	; 0x24
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fea3 	bl	8004c1c <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8003ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee4:	7dfb      	ldrb	r3, [r7, #23]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10a      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef8:	491a      	ldr	r1, [pc, #104]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	654b      	str	r3, [r1, #84]	; 0x54
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7dfb      	ldrb	r3, [r7, #23]
 8003f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d03f      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	d821      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8003f18:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8003f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1e:	bf00      	nop
 8003f20:	08003f71 	.word	0x08003f71
 8003f24:	08003f39 	.word	0x08003f39
 8003f28:	08003f4b 	.word	0x08003f4b
 8003f2c:	08003f71 	.word	0x08003f71
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f71 	.word	0x08003f71
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fdba 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f48:	e013      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3324      	adds	r3, #36	; 0x24
 8003f4e:	2101      	movs	r1, #1
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fe63 	bl	8004c1c <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f60:	e007      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
 8003f68:	58024800 	.word	0x58024800
 8003f6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f78:	4b9f      	ldr	r3, [pc, #636]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f023 0207 	bic.w	r2, r3, #7
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	499c      	ldr	r1, [pc, #624]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	654b      	str	r3, [r1, #84]	; 0x54
 8003f8a:	e001      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d039      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d820      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8003fa6:	a201      	add	r2, pc, #4	; (adr r2, 8003fac <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8003fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fac:	08003fef 	.word	0x08003fef
 8003fb0:	08003fc5 	.word	0x08003fc5
 8003fb4:	08003fd7 	.word	0x08003fd7
 8003fb8:	08003fef 	.word	0x08003fef
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08003fef 	.word	0x08003fef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fd74 	bl	8004ab8 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fe1d 	bl	8004c1c <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ff6:	4b80      	ldr	r3, [pc, #512]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	f023 0207 	bic.w	r2, r3, #7
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004004:	497c      	ldr	r1, [pc, #496]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	658b      	str	r3, [r1, #88]	; 0x58
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d04b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004022:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004026:	d02e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800402c:	d828      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004032:	d02a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d822      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800403a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403e:	d026      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004040:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004044:	d81c      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800404a:	d010      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004050:	d816      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01d      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405a:	d111      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fd28 	bl	8004ab8 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800406c:	e012      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fdd1 	bl	8004c1c <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800407e:	e009      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
      break;
 8004084:	e006      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004086:	bf00      	nop
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004092:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409a:	4b57      	ldr	r3, [pc, #348]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a8:	4953      	ldr	r1, [pc, #332]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	654b      	str	r3, [r1, #84]	; 0x54
 80040ae:	e001      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d04b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ca:	d02e      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80040cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040d0:	d828      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d02a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d822      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80040de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e2:	d026      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80040e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e8:	d81c      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80040ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ee:	d010      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d816      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01d      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80040fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fe:	d111      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fcd6 	bl	8004ab8 <RCCEx_PLL2_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004110:	e012      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd7f 	bl	8004c1c <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004122:	e009      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	75fb      	strb	r3, [r7, #23]
      break;
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004136:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004138:	7dfb      	ldrb	r3, [r7, #23]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800413e:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800414c:	492a      	ldr	r1, [pc, #168]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	658b      	str	r3, [r1, #88]	; 0x58
 8004152:	e001      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d04d      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800416a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004170:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004174:	d828      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417a:	d02a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004180:	d822      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004182:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004186:	d026      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004188:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800418c:	d81c      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800418e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004192:	d010      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004198:	d816      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041a2:	d111      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fc84 	bl	8004ab8 <RCCEx_PLL2_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3324      	adds	r3, #36	; 0x24
 80041ba:	2102      	movs	r1, #2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd2d 	bl	8004c1c <RCCEx_PLL3_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041c6:	e009      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e006      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80041ce:	bf00      	nop
 80041d0:	e004      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80041d2:	bf00      	nop
 80041d4:	e002      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e000      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80041da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041f0:	4901      	ldr	r1, [pc, #4]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	658b      	str	r3, [r1, #88]	; 0x58
 80041f6:	e003      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80041f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	d10a      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3324      	adds	r3, #36	; 0x24
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fcfc 	bl	8004c1c <RCCEx_PLL3_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800422e:	4b8c      	ldr	r3, [pc, #560]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	4988      	ldr	r1, [pc, #544]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3324      	adds	r3, #36	; 0x24
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fcdb 	bl	8004c1c <RCCEx_PLL3_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004270:	4b7b      	ldr	r3, [pc, #492]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427e:	4978      	ldr	r1, [pc, #480]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d034      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429a:	d01d      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800429c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042a0:	d817      	bhi.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80042ac:	e011      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fbff 	bl	8004ab8 <RCCEx_PLL2_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042be:	e00c      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3324      	adds	r3, #36	; 0x24
 80042c4:	2102      	movs	r1, #2
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fca8 	bl	8004c1c <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
      break;
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e0:	4b5f      	ldr	r3, [pc, #380]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80042ee:	495c      	ldr	r1, [pc, #368]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	658b      	str	r3, [r1, #88]	; 0x58
 80042f4:	e001      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d033      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004310:	d01c      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004312:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004316:	d816      	bhi.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800431e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004322:	d007      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004326:	4b4e      	ldr	r3, [pc, #312]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	4a4d      	ldr	r2, [pc, #308]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3324      	adds	r3, #36	; 0x24
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fc6e 	bl	8004c1c <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	75fb      	strb	r3, [r7, #23]
      break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800434c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004354:	4b42      	ldr	r3, [pc, #264]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004362:	493f      	ldr	r1, [pc, #252]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	654b      	str	r3, [r1, #84]	; 0x54
 8004368:	e001      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d029      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004386:	d007      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004388:	e00f      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438a:	4b35      	ldr	r3, [pc, #212]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a34      	ldr	r2, [pc, #208]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004396:	e00b      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb8a 	bl	8004ab8 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80043a8:	e002      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
      break;
 80043ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043b6:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	4927      	ldr	r1, [pc, #156]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043c8:	e001      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3324      	adds	r3, #36	; 0x24
 80043de:	2102      	movs	r1, #2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fc1b 	bl	8004c1c <RCCEx_PLL3_Config>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d035      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004406:	d017      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440c:	d811      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800440e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004412:	d013      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004418:	d80b      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d010      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	d106      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a0d      	ldr	r2, [pc, #52]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004430:	e007      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
      break;
 8004436:	e004      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004456:	4902      	ldr	r1, [pc, #8]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004458:	4313      	orrs	r3, r2
 800445a:	654b      	str	r3, [r1, #84]	; 0x54
 800445c:	e004      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800445e:	bf00      	nop
 8004460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d008      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004474:	4b30      	ldr	r3, [pc, #192]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004480:	492d      	ldr	r1, [pc, #180]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004482:	4313      	orrs	r3, r2
 8004484:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004492:	4b29      	ldr	r3, [pc, #164]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449e:	4926      	ldr	r1, [pc, #152]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80044b0:	4b21      	ldr	r3, [pc, #132]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	491e      	ldr	r1, [pc, #120]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ce:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044d8:	6113      	str	r3, [r2, #16]
 80044da:	4b17      	ldr	r3, [pc, #92]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80044e4:	4914      	ldr	r1, [pc, #80]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da08      	bge.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044f2:	4b11      	ldr	r3, [pc, #68]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80044f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	490e      	ldr	r1, [pc, #56]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004500:	4313      	orrs	r3, r2
 8004502:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	4906      	ldr	r1, [pc, #24]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004520:	4313      	orrs	r3, r2
 8004522:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004524:	7dbb      	ldrb	r3, [r7, #22]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	58024400 	.word	0x58024400

0800453c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004540:	f7ff f894 	bl	800366c <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4904      	ldr	r1, [pc, #16]	; (8004564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	58024400 	.word	0x58024400
 8004564:	08006e54 	.word	0x08006e54

08004568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004568:	b480      	push	{r7}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004570:	4ba1      	ldr	r3, [pc, #644]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800457a:	4b9f      	ldr	r3, [pc, #636]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	0b1b      	lsrs	r3, r3, #12
 8004580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004586:	4b9c      	ldr	r3, [pc, #624]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004592:	4b99      	ldr	r3, [pc, #612]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	fb02 f303 	mul.w	r3, r2, r3
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 8111 	beq.w	80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f000 8083 	beq.w	80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	f200 80a1 	bhi.w	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d056      	beq.n	8004680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045d2:	e099      	b.n	8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d4:	4b88      	ldr	r3, [pc, #544]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02d      	beq.n	800463c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045e0:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	4a84      	ldr	r2, [pc, #528]	; (80047fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460a:	4b7b      	ldr	r3, [pc, #492]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800460c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461a:	ed97 6a03 	vldr	s12, [r7, #12]
 800461e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004636:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800463a:	e087      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	ee07 3a90 	vmov	s15, r3
 8004642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800464a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464e:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800467e:	e065      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800468e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004692:	4b59      	ldr	r3, [pc, #356]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046c2:	e043      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800480c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046d6:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046de:	ee07 3a90 	vmov	s15, r3
 80046e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004706:	e021      	b.n	800474c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800471a:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800472a:	ed97 6a03 	vldr	s12, [r7, #12]
 800472e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800473a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800473e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800474a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800474c:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	0a5b      	lsrs	r3, r3, #9
 8004752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004766:	edd7 6a07 	vldr	s13, [r7, #28]
 800476a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004772:	ee17 2a90 	vmov	r2, s15
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	0c1b      	lsrs	r3, r3, #16
 8004780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004794:	edd7 6a07 	vldr	s13, [r7, #28]
 8004798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a0:	ee17 2a90 	vmov	r2, s15
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	0e1b      	lsrs	r3, r3, #24
 80047ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ce:	ee17 2a90 	vmov	r2, s15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047d6:	e008      	b.n	80047ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	03d09000 	.word	0x03d09000
 8004800:	46000000 	.word	0x46000000
 8004804:	4c742400 	.word	0x4c742400
 8004808:	4a742400 	.word	0x4a742400
 800480c:	4af42400 	.word	0x4af42400

08004810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004818:	4ba1      	ldr	r3, [pc, #644]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004822:	4b9f      	ldr	r3, [pc, #636]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	0d1b      	lsrs	r3, r3, #20
 8004828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800482e:	4b9c      	ldr	r3, [pc, #624]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	0a1b      	lsrs	r3, r3, #8
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800483a:	4b99      	ldr	r3, [pc, #612]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	08db      	lsrs	r3, r3, #3
 8004840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8111 	beq.w	8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	f000 8083 	beq.w	800496c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b02      	cmp	r3, #2
 800486a:	f200 80a1 	bhi.w	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d056      	beq.n	8004928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800487a:	e099      	b.n	80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800487c:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02d      	beq.n	80048e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004888:	4b85      	ldr	r3, [pc, #532]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	08db      	lsrs	r3, r3, #3
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	4a84      	ldr	r2, [pc, #528]	; (8004aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048e2:	e087      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	ee07 3a90 	vmov	s15, r3
 80048ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f6:	4b6a      	ldr	r3, [pc, #424]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004906:	ed97 6a03 	vldr	s12, [r7, #12]
 800490a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800490e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800491a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004926:	e065      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004932:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493a:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494a:	ed97 6a03 	vldr	s12, [r7, #12]
 800494e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800495e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800496a:	e043      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800497a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497e:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004986:	ee07 3a90 	vmov	s15, r3
 800498a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004992:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049ae:	e021      	b.n	80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80049f4:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	0a5b      	lsrs	r3, r3, #9
 80049fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a1a:	ee17 2a90 	vmov	r2, s15
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004a22:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	0c1b      	lsrs	r3, r3, #16
 8004a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a76:	ee17 2a90 	vmov	r2, s15
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a7e:	e008      	b.n	8004a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
}
 8004a92:	bf00      	nop
 8004a94:	3724      	adds	r7, #36	; 0x24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	58024400 	.word	0x58024400
 8004aa4:	03d09000 	.word	0x03d09000
 8004aa8:	46000000 	.word	0x46000000
 8004aac:	4c742400 	.word	0x4c742400
 8004ab0:	4a742400 	.word	0x4a742400
 8004ab4:	4af42400 	.word	0x4af42400

08004ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ac6:	4b53      	ldr	r3, [pc, #332]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d101      	bne.n	8004ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e099      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ad6:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a4e      	ldr	r2, [pc, #312]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae2:	f7fc ff1d 	bl	8001920 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ae8:	e008      	b.n	8004afc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004aea:	f7fc ff19 	bl	8001920 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e086      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004afc:	4b45      	ldr	r3, [pc, #276]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b08:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	493f      	ldr	r1, [pc, #252]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	041b      	lsls	r3, r3, #16
 8004b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b4c:	4931      	ldr	r1, [pc, #196]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b52:	4b30      	ldr	r3, [pc, #192]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	492d      	ldr	r1, [pc, #180]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f023 0220 	bic.w	r2, r3, #32
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4928      	ldr	r1, [pc, #160]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b76:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	4a26      	ldr	r2, [pc, #152]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b86:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <RCCEx_PLL2_Config+0x160>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	69d2      	ldr	r2, [r2, #28]
 8004b8e:	00d2      	lsls	r2, r2, #3
 8004b90:	4920      	ldr	r1, [pc, #128]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b96:	4b1f      	ldr	r3, [pc, #124]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 0310 	orr.w	r3, r3, #16
 8004ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ba8:	4b1a      	ldr	r3, [pc, #104]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	4a19      	ldr	r2, [pc, #100]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bb4:	e00f      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bbc:	4b15      	ldr	r3, [pc, #84]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a14      	ldr	r2, [pc, #80]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc8:	e005      	b.n	8004bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bca:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be2:	f7fc fe9d 	bl	8001920 <HAL_GetTick>
 8004be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004be8:	e008      	b.n	8004bfc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004bea:	f7fc fe99 	bl	8001920 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bfc:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <RCCEx_PLL2_Config+0x15c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	58024400 	.word	0x58024400
 8004c18:	ffff0007 	.word	0xffff0007

08004c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c2a:	4b53      	ldr	r3, [pc, #332]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d101      	bne.n	8004c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e099      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a4e      	ldr	r2, [pc, #312]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c46:	f7fc fe6b 	bl	8001920 <HAL_GetTick>
 8004c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c4e:	f7fc fe67 	bl	8001920 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e086      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c60:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	051b      	lsls	r3, r3, #20
 8004c7a:	493f      	ldr	r1, [pc, #252]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	025b      	lsls	r3, r3, #9
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cb0:	4931      	ldr	r1, [pc, #196]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	492d      	ldr	r1, [pc, #180]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4928      	ldr	r1, [pc, #160]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cea:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <RCCEx_PLL3_Config+0x160>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	69d2      	ldr	r2, [r2, #28]
 8004cf2:	00d2      	lsls	r2, r2, #3
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d18:	e00f      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d106      	bne.n	8004d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d20:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d2c:	e005      	b.n	8004d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d2e:	4b12      	ldr	r3, [pc, #72]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d3a:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d46:	f7fc fdeb 	bl	8001920 <HAL_GetTick>
 8004d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d4c:	e008      	b.n	8004d60 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004d4e:	f7fc fde7 	bl	8001920 <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d901      	bls.n	8004d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e006      	b.n	8004d6e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <RCCEx_PLL3_Config+0x15c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f0      	beq.n	8004d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	ffff0007 	.word	0xffff0007

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e042      	b.n	8004e18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fbd1 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	; 0x24
 8004dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0201 	bic.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f82c 	bl	8004e20 <UART_SetConfig>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e022      	b.n	8004e18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fe8c 	bl	8005af8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689a      	ldr	r2, [r3, #8]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 ff13 	bl	8005c3c <UART_CheckIdleState>
 8004e16:	4603      	mov	r3, r0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e24:	b092      	sub	sp, #72	; 0x48
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	4bbe      	ldr	r3, [pc, #760]	; (8005148 <UART_SetConfig+0x328>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4ab3      	ldr	r2, [pc, #716]	; (800514c <UART_SetConfig+0x32c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d004      	beq.n	8004e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	4baf      	ldr	r3, [pc, #700]	; (8005150 <UART_SetConfig+0x330>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f023 010f 	bic.w	r1, r3, #15
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4aa6      	ldr	r2, [pc, #664]	; (8005154 <UART_SetConfig+0x334>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d177      	bne.n	8004fb0 <UART_SetConfig+0x190>
 8004ec0:	4ba5      	ldr	r3, [pc, #660]	; (8005158 <UART_SetConfig+0x338>)
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec8:	2b28      	cmp	r3, #40	; 0x28
 8004eca:	d86d      	bhi.n	8004fa8 <UART_SetConfig+0x188>
 8004ecc:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0xb4>)
 8004ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed2:	bf00      	nop
 8004ed4:	08004f79 	.word	0x08004f79
 8004ed8:	08004fa9 	.word	0x08004fa9
 8004edc:	08004fa9 	.word	0x08004fa9
 8004ee0:	08004fa9 	.word	0x08004fa9
 8004ee4:	08004fa9 	.word	0x08004fa9
 8004ee8:	08004fa9 	.word	0x08004fa9
 8004eec:	08004fa9 	.word	0x08004fa9
 8004ef0:	08004fa9 	.word	0x08004fa9
 8004ef4:	08004f81 	.word	0x08004f81
 8004ef8:	08004fa9 	.word	0x08004fa9
 8004efc:	08004fa9 	.word	0x08004fa9
 8004f00:	08004fa9 	.word	0x08004fa9
 8004f04:	08004fa9 	.word	0x08004fa9
 8004f08:	08004fa9 	.word	0x08004fa9
 8004f0c:	08004fa9 	.word	0x08004fa9
 8004f10:	08004fa9 	.word	0x08004fa9
 8004f14:	08004f89 	.word	0x08004f89
 8004f18:	08004fa9 	.word	0x08004fa9
 8004f1c:	08004fa9 	.word	0x08004fa9
 8004f20:	08004fa9 	.word	0x08004fa9
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	08004fa9 	.word	0x08004fa9
 8004f2c:	08004fa9 	.word	0x08004fa9
 8004f30:	08004fa9 	.word	0x08004fa9
 8004f34:	08004f91 	.word	0x08004f91
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004f99 	.word	0x08004f99
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004fa9 	.word	0x08004fa9
 8004f64:	08004fa9 	.word	0x08004fa9
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fa9 	.word	0x08004fa9
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e326      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004f80:	2304      	movs	r3, #4
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f86:	e322      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8e:	e31e      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004f90:	2310      	movs	r3, #16
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f96:	e31a      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004f98:	2320      	movs	r3, #32
 8004f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f9e:	e316      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fa6:	e312      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fae:	e30e      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a69      	ldr	r2, [pc, #420]	; (800515c <UART_SetConfig+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d130      	bne.n	800501c <UART_SetConfig+0x1fc>
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <UART_SetConfig+0x338>)
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d826      	bhi.n	8005014 <UART_SetConfig+0x1f4>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0x1ac>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fe5 	.word	0x08004fe5
 8004fd0:	08004fed 	.word	0x08004fed
 8004fd4:	08004ff5 	.word	0x08004ff5
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e2f0      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e2ec      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffa:	e2e8      	b.n	80055ce <UART_SetConfig+0x7ae>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005002:	e2e4      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005004:	2320      	movs	r3, #32
 8005006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800500a:	e2e0      	b.n	80055ce <UART_SetConfig+0x7ae>
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005012:	e2dc      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800501a:	e2d8      	b.n	80055ce <UART_SetConfig+0x7ae>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a4f      	ldr	r2, [pc, #316]	; (8005160 <UART_SetConfig+0x340>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d130      	bne.n	8005088 <UART_SetConfig+0x268>
 8005026:	4b4c      	ldr	r3, [pc, #304]	; (8005158 <UART_SetConfig+0x338>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b05      	cmp	r3, #5
 8005030:	d826      	bhi.n	8005080 <UART_SetConfig+0x260>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <UART_SetConfig+0x218>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005051 	.word	0x08005051
 800503c:	08005059 	.word	0x08005059
 8005040:	08005061 	.word	0x08005061
 8005044:	08005069 	.word	0x08005069
 8005048:	08005071 	.word	0x08005071
 800504c:	08005079 	.word	0x08005079
 8005050:	2300      	movs	r3, #0
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e2ba      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005058:	2304      	movs	r3, #4
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e2b6      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005060:	2308      	movs	r3, #8
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005066:	e2b2      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005068:	2310      	movs	r3, #16
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e2ae      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005070:	2320      	movs	r3, #32
 8005072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005076:	e2aa      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507e:	e2a6      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005086:	e2a2      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a35      	ldr	r2, [pc, #212]	; (8005164 <UART_SetConfig+0x344>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d130      	bne.n	80050f4 <UART_SetConfig+0x2d4>
 8005092:	4b31      	ldr	r3, [pc, #196]	; (8005158 <UART_SetConfig+0x338>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	2b05      	cmp	r3, #5
 800509c:	d826      	bhi.n	80050ec <UART_SetConfig+0x2cc>
 800509e:	a201      	add	r2, pc, #4	; (adr r2, 80050a4 <UART_SetConfig+0x284>)
 80050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a4:	080050bd 	.word	0x080050bd
 80050a8:	080050c5 	.word	0x080050c5
 80050ac:	080050cd 	.word	0x080050cd
 80050b0:	080050d5 	.word	0x080050d5
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e284      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050c4:	2304      	movs	r3, #4
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e280      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050cc:	2308      	movs	r3, #8
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e27c      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050d4:	2310      	movs	r3, #16
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e278      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050dc:	2320      	movs	r3, #32
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e2:	e274      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050e4:	2340      	movs	r3, #64	; 0x40
 80050e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ea:	e270      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f2:	e26c      	b.n	80055ce <UART_SetConfig+0x7ae>
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1b      	ldr	r2, [pc, #108]	; (8005168 <UART_SetConfig+0x348>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d142      	bne.n	8005184 <UART_SetConfig+0x364>
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <UART_SetConfig+0x338>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b05      	cmp	r3, #5
 8005108:	d838      	bhi.n	800517c <UART_SetConfig+0x35c>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x2f0>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005129 	.word	0x08005129
 8005114:	08005131 	.word	0x08005131
 8005118:	08005139 	.word	0x08005139
 800511c:	08005141 	.word	0x08005141
 8005120:	0800516d 	.word	0x0800516d
 8005124:	08005175 	.word	0x08005175
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e24e      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005130:	2304      	movs	r3, #4
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005136:	e24a      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005138:	2308      	movs	r3, #8
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513e:	e246      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005140:	2310      	movs	r3, #16
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005146:	e242      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005148:	cfff69f3 	.word	0xcfff69f3
 800514c:	58000c00 	.word	0x58000c00
 8005150:	11fff4ff 	.word	0x11fff4ff
 8005154:	40011000 	.word	0x40011000
 8005158:	58024400 	.word	0x58024400
 800515c:	40004400 	.word	0x40004400
 8005160:	40004800 	.word	0x40004800
 8005164:	40004c00 	.word	0x40004c00
 8005168:	40005000 	.word	0x40005000
 800516c:	2320      	movs	r3, #32
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e22c      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005174:	2340      	movs	r3, #64	; 0x40
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800517a:	e228      	b.n	80055ce <UART_SetConfig+0x7ae>
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e224      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4ab1      	ldr	r2, [pc, #708]	; (8005450 <UART_SetConfig+0x630>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d176      	bne.n	800527c <UART_SetConfig+0x45c>
 800518e:	4bb1      	ldr	r3, [pc, #708]	; (8005454 <UART_SetConfig+0x634>)
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005196:	2b28      	cmp	r3, #40	; 0x28
 8005198:	d86c      	bhi.n	8005274 <UART_SetConfig+0x454>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0x380>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	08005245 	.word	0x08005245
 80051a4:	08005275 	.word	0x08005275
 80051a8:	08005275 	.word	0x08005275
 80051ac:	08005275 	.word	0x08005275
 80051b0:	08005275 	.word	0x08005275
 80051b4:	08005275 	.word	0x08005275
 80051b8:	08005275 	.word	0x08005275
 80051bc:	08005275 	.word	0x08005275
 80051c0:	0800524d 	.word	0x0800524d
 80051c4:	08005275 	.word	0x08005275
 80051c8:	08005275 	.word	0x08005275
 80051cc:	08005275 	.word	0x08005275
 80051d0:	08005275 	.word	0x08005275
 80051d4:	08005275 	.word	0x08005275
 80051d8:	08005275 	.word	0x08005275
 80051dc:	08005275 	.word	0x08005275
 80051e0:	08005255 	.word	0x08005255
 80051e4:	08005275 	.word	0x08005275
 80051e8:	08005275 	.word	0x08005275
 80051ec:	08005275 	.word	0x08005275
 80051f0:	08005275 	.word	0x08005275
 80051f4:	08005275 	.word	0x08005275
 80051f8:	08005275 	.word	0x08005275
 80051fc:	08005275 	.word	0x08005275
 8005200:	0800525d 	.word	0x0800525d
 8005204:	08005275 	.word	0x08005275
 8005208:	08005275 	.word	0x08005275
 800520c:	08005275 	.word	0x08005275
 8005210:	08005275 	.word	0x08005275
 8005214:	08005275 	.word	0x08005275
 8005218:	08005275 	.word	0x08005275
 800521c:	08005275 	.word	0x08005275
 8005220:	08005265 	.word	0x08005265
 8005224:	08005275 	.word	0x08005275
 8005228:	08005275 	.word	0x08005275
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	08005275 	.word	0x08005275
 800523c:	08005275 	.word	0x08005275
 8005240:	0800526d 	.word	0x0800526d
 8005244:	2301      	movs	r3, #1
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e1c0      	b.n	80055ce <UART_SetConfig+0x7ae>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e1bc      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e1b8      	b.n	80055ce <UART_SetConfig+0x7ae>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005262:	e1b4      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005264:	2320      	movs	r3, #32
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800526a:	e1b0      	b.n	80055ce <UART_SetConfig+0x7ae>
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005272:	e1ac      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800527a:	e1a8      	b.n	80055ce <UART_SetConfig+0x7ae>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a75      	ldr	r2, [pc, #468]	; (8005458 <UART_SetConfig+0x638>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d130      	bne.n	80052e8 <UART_SetConfig+0x4c8>
 8005286:	4b73      	ldr	r3, [pc, #460]	; (8005454 <UART_SetConfig+0x634>)
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b05      	cmp	r3, #5
 8005290:	d826      	bhi.n	80052e0 <UART_SetConfig+0x4c0>
 8005292:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <UART_SetConfig+0x478>)
 8005294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005298:	080052b1 	.word	0x080052b1
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	080052c1 	.word	0x080052c1
 80052a4:	080052c9 	.word	0x080052c9
 80052a8:	080052d1 	.word	0x080052d1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e18a      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052b8:	2304      	movs	r3, #4
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e186      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052c0:	2308      	movs	r3, #8
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e182      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052c8:	2310      	movs	r3, #16
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ce:	e17e      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052d0:	2320      	movs	r3, #32
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052d6:	e17a      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052de:	e176      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052e6:	e172      	b.n	80055ce <UART_SetConfig+0x7ae>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5b      	ldr	r2, [pc, #364]	; (800545c <UART_SetConfig+0x63c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d130      	bne.n	8005354 <UART_SetConfig+0x534>
 80052f2:	4b58      	ldr	r3, [pc, #352]	; (8005454 <UART_SetConfig+0x634>)
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d826      	bhi.n	800534c <UART_SetConfig+0x52c>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <UART_SetConfig+0x4e4>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	0800531d 	.word	0x0800531d
 8005308:	08005325 	.word	0x08005325
 800530c:	0800532d 	.word	0x0800532d
 8005310:	08005335 	.word	0x08005335
 8005314:	0800533d 	.word	0x0800533d
 8005318:	08005345 	.word	0x08005345
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e154      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e150      	b.n	80055ce <UART_SetConfig+0x7ae>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e14c      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533a:	e148      	b.n	80055ce <UART_SetConfig+0x7ae>
 800533c:	2320      	movs	r3, #32
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005342:	e144      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005344:	2340      	movs	r3, #64	; 0x40
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534a:	e140      	b.n	80055ce <UART_SetConfig+0x7ae>
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005352:	e13c      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a41      	ldr	r2, [pc, #260]	; (8005460 <UART_SetConfig+0x640>)
 800535a:	4293      	cmp	r3, r2
 800535c:	f040 8082 	bne.w	8005464 <UART_SetConfig+0x644>
 8005360:	4b3c      	ldr	r3, [pc, #240]	; (8005454 <UART_SetConfig+0x634>)
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005368:	2b28      	cmp	r3, #40	; 0x28
 800536a:	d86d      	bhi.n	8005448 <UART_SetConfig+0x628>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x554>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005419 	.word	0x08005419
 8005378:	08005449 	.word	0x08005449
 800537c:	08005449 	.word	0x08005449
 8005380:	08005449 	.word	0x08005449
 8005384:	08005449 	.word	0x08005449
 8005388:	08005449 	.word	0x08005449
 800538c:	08005449 	.word	0x08005449
 8005390:	08005449 	.word	0x08005449
 8005394:	08005421 	.word	0x08005421
 8005398:	08005449 	.word	0x08005449
 800539c:	08005449 	.word	0x08005449
 80053a0:	08005449 	.word	0x08005449
 80053a4:	08005449 	.word	0x08005449
 80053a8:	08005449 	.word	0x08005449
 80053ac:	08005449 	.word	0x08005449
 80053b0:	08005449 	.word	0x08005449
 80053b4:	08005429 	.word	0x08005429
 80053b8:	08005449 	.word	0x08005449
 80053bc:	08005449 	.word	0x08005449
 80053c0:	08005449 	.word	0x08005449
 80053c4:	08005449 	.word	0x08005449
 80053c8:	08005449 	.word	0x08005449
 80053cc:	08005449 	.word	0x08005449
 80053d0:	08005449 	.word	0x08005449
 80053d4:	08005431 	.word	0x08005431
 80053d8:	08005449 	.word	0x08005449
 80053dc:	08005449 	.word	0x08005449
 80053e0:	08005449 	.word	0x08005449
 80053e4:	08005449 	.word	0x08005449
 80053e8:	08005449 	.word	0x08005449
 80053ec:	08005449 	.word	0x08005449
 80053f0:	08005449 	.word	0x08005449
 80053f4:	08005439 	.word	0x08005439
 80053f8:	08005449 	.word	0x08005449
 80053fc:	08005449 	.word	0x08005449
 8005400:	08005449 	.word	0x08005449
 8005404:	08005449 	.word	0x08005449
 8005408:	08005449 	.word	0x08005449
 800540c:	08005449 	.word	0x08005449
 8005410:	08005449 	.word	0x08005449
 8005414:	08005441 	.word	0x08005441
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e0d6      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e0d2      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800542e:	e0ce      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005436:	e0ca      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005438:	2320      	movs	r3, #32
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800543e:	e0c6      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005446:	e0c2      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005448:	2380      	movs	r3, #128	; 0x80
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e0be      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005450:	40011400 	.word	0x40011400
 8005454:	58024400 	.word	0x58024400
 8005458:	40007800 	.word	0x40007800
 800545c:	40007c00 	.word	0x40007c00
 8005460:	40011800 	.word	0x40011800
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4aad      	ldr	r2, [pc, #692]	; (8005720 <UART_SetConfig+0x900>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d176      	bne.n	800555c <UART_SetConfig+0x73c>
 800546e:	4bad      	ldr	r3, [pc, #692]	; (8005724 <UART_SetConfig+0x904>)
 8005470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005476:	2b28      	cmp	r3, #40	; 0x28
 8005478:	d86c      	bhi.n	8005554 <UART_SetConfig+0x734>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x660>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	08005525 	.word	0x08005525
 8005484:	08005555 	.word	0x08005555
 8005488:	08005555 	.word	0x08005555
 800548c:	08005555 	.word	0x08005555
 8005490:	08005555 	.word	0x08005555
 8005494:	08005555 	.word	0x08005555
 8005498:	08005555 	.word	0x08005555
 800549c:	08005555 	.word	0x08005555
 80054a0:	0800552d 	.word	0x0800552d
 80054a4:	08005555 	.word	0x08005555
 80054a8:	08005555 	.word	0x08005555
 80054ac:	08005555 	.word	0x08005555
 80054b0:	08005555 	.word	0x08005555
 80054b4:	08005555 	.word	0x08005555
 80054b8:	08005555 	.word	0x08005555
 80054bc:	08005555 	.word	0x08005555
 80054c0:	08005535 	.word	0x08005535
 80054c4:	08005555 	.word	0x08005555
 80054c8:	08005555 	.word	0x08005555
 80054cc:	08005555 	.word	0x08005555
 80054d0:	08005555 	.word	0x08005555
 80054d4:	08005555 	.word	0x08005555
 80054d8:	08005555 	.word	0x08005555
 80054dc:	08005555 	.word	0x08005555
 80054e0:	0800553d 	.word	0x0800553d
 80054e4:	08005555 	.word	0x08005555
 80054e8:	08005555 	.word	0x08005555
 80054ec:	08005555 	.word	0x08005555
 80054f0:	08005555 	.word	0x08005555
 80054f4:	08005555 	.word	0x08005555
 80054f8:	08005555 	.word	0x08005555
 80054fc:	08005555 	.word	0x08005555
 8005500:	08005545 	.word	0x08005545
 8005504:	08005555 	.word	0x08005555
 8005508:	08005555 	.word	0x08005555
 800550c:	08005555 	.word	0x08005555
 8005510:	08005555 	.word	0x08005555
 8005514:	08005555 	.word	0x08005555
 8005518:	08005555 	.word	0x08005555
 800551c:	08005555 	.word	0x08005555
 8005520:	0800554d 	.word	0x0800554d
 8005524:	2301      	movs	r3, #1
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552a:	e050      	b.n	80055ce <UART_SetConfig+0x7ae>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005532:	e04c      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553a:	e048      	b.n	80055ce <UART_SetConfig+0x7ae>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005542:	e044      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005544:	2320      	movs	r3, #32
 8005546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800554a:	e040      	b.n	80055ce <UART_SetConfig+0x7ae>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005552:	e03c      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800555a:	e038      	b.n	80055ce <UART_SetConfig+0x7ae>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a71      	ldr	r2, [pc, #452]	; (8005728 <UART_SetConfig+0x908>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d130      	bne.n	80055c8 <UART_SetConfig+0x7a8>
 8005566:	4b6f      	ldr	r3, [pc, #444]	; (8005724 <UART_SetConfig+0x904>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b05      	cmp	r3, #5
 8005570:	d826      	bhi.n	80055c0 <UART_SetConfig+0x7a0>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <UART_SetConfig+0x758>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	08005591 	.word	0x08005591
 800557c:	08005599 	.word	0x08005599
 8005580:	080055a1 	.word	0x080055a1
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055b1 	.word	0x080055b1
 800558c:	080055b9 	.word	0x080055b9
 8005590:	2302      	movs	r3, #2
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005596:	e01a      	b.n	80055ce <UART_SetConfig+0x7ae>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e016      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e012      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e00e      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055b0:	2320      	movs	r3, #32
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e00a      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055b8:	2340      	movs	r3, #64	; 0x40
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e006      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e002      	b.n	80055ce <UART_SetConfig+0x7ae>
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a55      	ldr	r2, [pc, #340]	; (8005728 <UART_SetConfig+0x908>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	f040 80f8 	bne.w	80057ca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055de:	2b20      	cmp	r3, #32
 80055e0:	dc46      	bgt.n	8005670 <UART_SetConfig+0x850>
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	db75      	blt.n	80056d2 <UART_SetConfig+0x8b2>
 80055e6:	3b02      	subs	r3, #2
 80055e8:	2b1e      	cmp	r3, #30
 80055ea:	d872      	bhi.n	80056d2 <UART_SetConfig+0x8b2>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x7d4>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005677 	.word	0x08005677
 80055f8:	080056d3 	.word	0x080056d3
 80055fc:	0800567f 	.word	0x0800567f
 8005600:	080056d3 	.word	0x080056d3
 8005604:	080056d3 	.word	0x080056d3
 8005608:	080056d3 	.word	0x080056d3
 800560c:	0800568f 	.word	0x0800568f
 8005610:	080056d3 	.word	0x080056d3
 8005614:	080056d3 	.word	0x080056d3
 8005618:	080056d3 	.word	0x080056d3
 800561c:	080056d3 	.word	0x080056d3
 8005620:	080056d3 	.word	0x080056d3
 8005624:	080056d3 	.word	0x080056d3
 8005628:	080056d3 	.word	0x080056d3
 800562c:	0800569f 	.word	0x0800569f
 8005630:	080056d3 	.word	0x080056d3
 8005634:	080056d3 	.word	0x080056d3
 8005638:	080056d3 	.word	0x080056d3
 800563c:	080056d3 	.word	0x080056d3
 8005640:	080056d3 	.word	0x080056d3
 8005644:	080056d3 	.word	0x080056d3
 8005648:	080056d3 	.word	0x080056d3
 800564c:	080056d3 	.word	0x080056d3
 8005650:	080056d3 	.word	0x080056d3
 8005654:	080056d3 	.word	0x080056d3
 8005658:	080056d3 	.word	0x080056d3
 800565c:	080056d3 	.word	0x080056d3
 8005660:	080056d3 	.word	0x080056d3
 8005664:	080056d3 	.word	0x080056d3
 8005668:	080056d3 	.word	0x080056d3
 800566c:	080056c5 	.word	0x080056c5
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d02a      	beq.n	80056ca <UART_SetConfig+0x8aa>
 8005674:	e02d      	b.n	80056d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005676:	f7fe ff61 	bl	800453c <HAL_RCCEx_GetD3PCLK1Freq>
 800567a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800567c:	e02f      	b.n	80056de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800567e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe ff70 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800568c:	e027      	b.n	80056de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800568e:	f107 0318 	add.w	r3, r7, #24
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff f8bc 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800569c:	e01f      	b.n	80056de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <UART_SetConfig+0x904>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <UART_SetConfig+0x904>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	08db      	lsrs	r3, r3, #3
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	4a1d      	ldr	r2, [pc, #116]	; (800572c <UART_SetConfig+0x90c>)
 80056b6:	fa22 f303 	lsr.w	r3, r2, r3
 80056ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056bc:	e00f      	b.n	80056de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80056be:	4b1b      	ldr	r3, [pc, #108]	; (800572c <UART_SetConfig+0x90c>)
 80056c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c2:	e00c      	b.n	80056de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056c4:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <UART_SetConfig+0x910>)
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056c8:	e009      	b.n	80056de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056d0:	e005      	b.n	80056de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80056dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 81ee 	beq.w	8005ac2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <UART_SetConfig+0x914>)
 80056ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	4413      	add	r3, r2
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	429a      	cmp	r2, r3
 8005708:	d305      	bcc.n	8005716 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	429a      	cmp	r2, r3
 8005714:	d910      	bls.n	8005738 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800571c:	e1d1      	b.n	8005ac2 <UART_SetConfig+0xca2>
 800571e:	bf00      	nop
 8005720:	40011c00 	.word	0x40011c00
 8005724:	58024400 	.word	0x58024400
 8005728:	58000c00 	.word	0x58000c00
 800572c:	03d09000 	.word	0x03d09000
 8005730:	003d0900 	.word	0x003d0900
 8005734:	08006e64 	.word	0x08006e64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800573a:	2200      	movs	r2, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	60fa      	str	r2, [r7, #12]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	4ac0      	ldr	r2, [pc, #768]	; (8005a48 <UART_SetConfig+0xc28>)
 8005746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574a:	b29b      	uxth	r3, r3
 800574c:	2200      	movs	r2, #0
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005756:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800575a:	f7fa fdc9 	bl	80002f0 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	020b      	lsls	r3, r1, #8
 8005770:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005774:	0202      	lsls	r2, r0, #8
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	6849      	ldr	r1, [r1, #4]
 800577a:	0849      	lsrs	r1, r1, #1
 800577c:	2000      	movs	r0, #0
 800577e:	460c      	mov	r4, r1
 8005780:	4605      	mov	r5, r0
 8005782:	eb12 0804 	adds.w	r8, r2, r4
 8005786:	eb43 0905 	adc.w	r9, r3, r5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	469a      	mov	sl, r3
 8005792:	4693      	mov	fp, r2
 8005794:	4652      	mov	r2, sl
 8005796:	465b      	mov	r3, fp
 8005798:	4640      	mov	r0, r8
 800579a:	4649      	mov	r1, r9
 800579c:	f7fa fda8 	bl	80002f0 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4613      	mov	r3, r2
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ae:	d308      	bcc.n	80057c2 <UART_SetConfig+0x9a2>
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b6:	d204      	bcs.n	80057c2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057be:	60da      	str	r2, [r3, #12]
 80057c0:	e17f      	b.n	8005ac2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80057c8:	e17b      	b.n	8005ac2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d2:	f040 80bd 	bne.w	8005950 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80057d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80057da:	2b20      	cmp	r3, #32
 80057dc:	dc48      	bgt.n	8005870 <UART_SetConfig+0xa50>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	db7b      	blt.n	80058da <UART_SetConfig+0xaba>
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d879      	bhi.n	80058da <UART_SetConfig+0xaba>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <UART_SetConfig+0x9cc>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	08005877 	.word	0x08005877
 80057f0:	0800587f 	.word	0x0800587f
 80057f4:	080058db 	.word	0x080058db
 80057f8:	080058db 	.word	0x080058db
 80057fc:	08005887 	.word	0x08005887
 8005800:	080058db 	.word	0x080058db
 8005804:	080058db 	.word	0x080058db
 8005808:	080058db 	.word	0x080058db
 800580c:	08005897 	.word	0x08005897
 8005810:	080058db 	.word	0x080058db
 8005814:	080058db 	.word	0x080058db
 8005818:	080058db 	.word	0x080058db
 800581c:	080058db 	.word	0x080058db
 8005820:	080058db 	.word	0x080058db
 8005824:	080058db 	.word	0x080058db
 8005828:	080058db 	.word	0x080058db
 800582c:	080058a7 	.word	0x080058a7
 8005830:	080058db 	.word	0x080058db
 8005834:	080058db 	.word	0x080058db
 8005838:	080058db 	.word	0x080058db
 800583c:	080058db 	.word	0x080058db
 8005840:	080058db 	.word	0x080058db
 8005844:	080058db 	.word	0x080058db
 8005848:	080058db 	.word	0x080058db
 800584c:	080058db 	.word	0x080058db
 8005850:	080058db 	.word	0x080058db
 8005854:	080058db 	.word	0x080058db
 8005858:	080058db 	.word	0x080058db
 800585c:	080058db 	.word	0x080058db
 8005860:	080058db 	.word	0x080058db
 8005864:	080058db 	.word	0x080058db
 8005868:	080058db 	.word	0x080058db
 800586c:	080058cd 	.word	0x080058cd
 8005870:	2b40      	cmp	r3, #64	; 0x40
 8005872:	d02e      	beq.n	80058d2 <UART_SetConfig+0xab2>
 8005874:	e031      	b.n	80058da <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005876:	f7fd ff29 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 800587a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800587c:	e033      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800587e:	f7fd ff3b 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8005882:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005884:	e02f      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800588a:	4618      	mov	r0, r3
 800588c:	f7fe fe6c 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005894:	e027      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005896:	f107 0318 	add.w	r3, r7, #24
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe ffb8 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058a4:	e01f      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a6:	4b69      	ldr	r3, [pc, #420]	; (8005a4c <UART_SetConfig+0xc2c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058b2:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <UART_SetConfig+0xc2c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	08db      	lsrs	r3, r3, #3
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	4a64      	ldr	r2, [pc, #400]	; (8005a50 <UART_SetConfig+0xc30>)
 80058be:	fa22 f303 	lsr.w	r3, r2, r3
 80058c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058c4:	e00f      	b.n	80058e6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80058c6:	4b62      	ldr	r3, [pc, #392]	; (8005a50 <UART_SetConfig+0xc30>)
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058ca:	e00c      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058cc:	4b61      	ldr	r3, [pc, #388]	; (8005a54 <UART_SetConfig+0xc34>)
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d0:	e009      	b.n	80058e6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d8:	e005      	b.n	80058e6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80058e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80ea 	beq.w	8005ac2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f2:	4a55      	ldr	r2, [pc, #340]	; (8005a48 <UART_SetConfig+0xc28>)
 80058f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058f8:	461a      	mov	r2, r3
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005900:	005a      	lsls	r2, r3, #1
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	441a      	add	r2, r3
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	2b0f      	cmp	r3, #15
 8005918:	d916      	bls.n	8005948 <UART_SetConfig+0xb28>
 800591a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005920:	d212      	bcs.n	8005948 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	b29b      	uxth	r3, r3
 8005926:	f023 030f 	bic.w	r3, r3, #15
 800592a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	b29b      	uxth	r3, r3
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	b29a      	uxth	r2, r3
 8005938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800593a:	4313      	orrs	r3, r2
 800593c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	e0bc      	b.n	8005ac2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800594e:	e0b8      	b.n	8005ac2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005950:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005954:	2b20      	cmp	r3, #32
 8005956:	dc4b      	bgt.n	80059f0 <UART_SetConfig+0xbd0>
 8005958:	2b00      	cmp	r3, #0
 800595a:	f2c0 8087 	blt.w	8005a6c <UART_SetConfig+0xc4c>
 800595e:	2b20      	cmp	r3, #32
 8005960:	f200 8084 	bhi.w	8005a6c <UART_SetConfig+0xc4c>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <UART_SetConfig+0xb4c>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	080059f7 	.word	0x080059f7
 8005970:	080059ff 	.word	0x080059ff
 8005974:	08005a6d 	.word	0x08005a6d
 8005978:	08005a6d 	.word	0x08005a6d
 800597c:	08005a07 	.word	0x08005a07
 8005980:	08005a6d 	.word	0x08005a6d
 8005984:	08005a6d 	.word	0x08005a6d
 8005988:	08005a6d 	.word	0x08005a6d
 800598c:	08005a17 	.word	0x08005a17
 8005990:	08005a6d 	.word	0x08005a6d
 8005994:	08005a6d 	.word	0x08005a6d
 8005998:	08005a6d 	.word	0x08005a6d
 800599c:	08005a6d 	.word	0x08005a6d
 80059a0:	08005a6d 	.word	0x08005a6d
 80059a4:	08005a6d 	.word	0x08005a6d
 80059a8:	08005a6d 	.word	0x08005a6d
 80059ac:	08005a27 	.word	0x08005a27
 80059b0:	08005a6d 	.word	0x08005a6d
 80059b4:	08005a6d 	.word	0x08005a6d
 80059b8:	08005a6d 	.word	0x08005a6d
 80059bc:	08005a6d 	.word	0x08005a6d
 80059c0:	08005a6d 	.word	0x08005a6d
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a6d 	.word	0x08005a6d
 80059d0:	08005a6d 	.word	0x08005a6d
 80059d4:	08005a6d 	.word	0x08005a6d
 80059d8:	08005a6d 	.word	0x08005a6d
 80059dc:	08005a6d 	.word	0x08005a6d
 80059e0:	08005a6d 	.word	0x08005a6d
 80059e4:	08005a6d 	.word	0x08005a6d
 80059e8:	08005a6d 	.word	0x08005a6d
 80059ec:	08005a5f 	.word	0x08005a5f
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	d037      	beq.n	8005a64 <UART_SetConfig+0xc44>
 80059f4:	e03a      	b.n	8005a6c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f6:	f7fd fe69 	bl	80036cc <HAL_RCC_GetPCLK1Freq>
 80059fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059fc:	e03c      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fe:	f7fd fe7b 	bl	80036f8 <HAL_RCC_GetPCLK2Freq>
 8005a02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a04:	e038      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fdac 	bl	8004568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a14:	e030      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a16:	f107 0318 	add.w	r3, r7, #24
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fe fef8 	bl	8004810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a24:	e028      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <UART_SetConfig+0xc2c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0320 	and.w	r3, r3, #32
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d012      	beq.n	8005a58 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <UART_SetConfig+0xc2c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	4a04      	ldr	r2, [pc, #16]	; (8005a50 <UART_SetConfig+0xc30>)
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a44:	e018      	b.n	8005a78 <UART_SetConfig+0xc58>
 8005a46:	bf00      	nop
 8005a48:	08006e64 	.word	0x08006e64
 8005a4c:	58024400 	.word	0x58024400
 8005a50:	03d09000 	.word	0x03d09000
 8005a54:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <UART_SetConfig+0xccc>)
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a5c:	e00c      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <UART_SetConfig+0xcd0>)
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a62:	e009      	b.n	8005a78 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a6a:	e005      	b.n	8005a78 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a76:	bf00      	nop
    }

    if (pclk != 0U)
 8005a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d021      	beq.n	8005ac2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <UART_SetConfig+0xcd4>)
 8005a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	441a      	add	r2, r3
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	2b0f      	cmp	r3, #15
 8005aa6:	d909      	bls.n	8005abc <UART_SetConfig+0xc9c>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aae:	d205      	bcs.n	8005abc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e002      	b.n	8005ac2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005ade:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3748      	adds	r7, #72	; 0x48
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aec:	03d09000 	.word	0x03d09000
 8005af0:	003d0900 	.word	0x003d0900
 8005af4:	08006e64 	.word	0x08006e64

08005af8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bf6:	d10a      	bne.n	8005c0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c4c:	f7fb fe68 	bl	8001920 <HAL_GetTick>
 8005c50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d10e      	bne.n	8005c7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f82f 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e025      	b.n	8005cca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d10e      	bne.n	8005caa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f819 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e00f      	b.n	8005cca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b09c      	sub	sp, #112	; 0x70
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	e0a9      	b.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cea:	f000 80a5 	beq.w	8005e38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fb fe17 	bl	8001920 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x32>
 8005cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d140      	bne.n	8005d86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	e853 3f00 	ldrex	r3, [r3]
 8005d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d18:	667b      	str	r3, [r7, #100]	; 0x64
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d2a:	e841 2300 	strex	r3, r2, [r1]
 8005d2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1e6      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d48:	f023 0301 	bic.w	r3, r3, #1
 8005d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005d56:	64ba      	str	r2, [r7, #72]	; 0x48
 8005d58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e5      	bne.n	8005d36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e069      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d051      	beq.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005da2:	d149      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3308      	adds	r3, #8
 8005de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	613b      	str	r3, [r7, #16]
   return(result);
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3308      	adds	r3, #8
 8005dfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e00:	623a      	str	r2, [r7, #32]
 8005e02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	69f9      	ldr	r1, [r7, #28]
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e5      	bne.n	8005de0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2220      	movs	r2, #32
 8005e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e010      	b.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69da      	ldr	r2, [r3, #28]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4013      	ands	r3, r2
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	bf0c      	ite	eq
 8005e48:	2301      	moveq	r3, #1
 8005e4a:	2300      	movne	r3, #0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	f43f af46 	beq.w	8005ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3770      	adds	r7, #112	; 0x70
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e027      	b.n	8005ec8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0201 	bic.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ea6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e02d      	b.n	8005f48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f84f 	bl	8005fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e02d      	b.n	8005fc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0201 	bic.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f811 	bl	8005fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d108      	bne.n	8005fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fec:	e031      	b.n	8006052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fee:	2310      	movs	r3, #16
 8005ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ff2:	2310      	movs	r3, #16
 8005ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	0e5b      	lsrs	r3, r3, #25
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 0307 	and.w	r3, r3, #7
 8006004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0f5b      	lsrs	r3, r3, #29
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	7b3a      	ldrb	r2, [r7, #12]
 800601a:	4911      	ldr	r1, [pc, #68]	; (8006060 <UARTEx_SetNbDataToProcess+0x94>)
 800601c:	5c8a      	ldrb	r2, [r1, r2]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006022:	7b3a      	ldrb	r2, [r7, #12]
 8006024:	490f      	ldr	r1, [pc, #60]	; (8006064 <UARTEx_SetNbDataToProcess+0x98>)
 8006026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006028:	fb93 f3f2 	sdiv	r3, r3, r2
 800602c:	b29a      	uxth	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006034:	7bfb      	ldrb	r3, [r7, #15]
 8006036:	7b7a      	ldrb	r2, [r7, #13]
 8006038:	4909      	ldr	r1, [pc, #36]	; (8006060 <UARTEx_SetNbDataToProcess+0x94>)
 800603a:	5c8a      	ldrb	r2, [r1, r2]
 800603c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006040:	7b7a      	ldrb	r2, [r7, #13]
 8006042:	4908      	ldr	r1, [pc, #32]	; (8006064 <UARTEx_SetNbDataToProcess+0x98>)
 8006044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006046:	fb93 f3f2 	sdiv	r3, r3, r2
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	08006e7c 	.word	0x08006e7c
 8006064:	08006e84 	.word	0x08006e84

08006068 <cos>:
 8006068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800606a:	eeb0 7b40 	vmov.f64	d7, d0
 800606e:	ee17 3a90 	vmov	r3, s15
 8006072:	4a21      	ldr	r2, [pc, #132]	; (80060f8 <cos+0x90>)
 8006074:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006078:	4293      	cmp	r3, r2
 800607a:	dc06      	bgt.n	800608a <cos+0x22>
 800607c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80060f0 <cos+0x88>
 8006080:	b005      	add	sp, #20
 8006082:	f85d eb04 	ldr.w	lr, [sp], #4
 8006086:	f000 b9cb 	b.w	8006420 <__kernel_cos>
 800608a:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <cos+0x94>)
 800608c:	4293      	cmp	r3, r2
 800608e:	dd04      	ble.n	800609a <cos+0x32>
 8006090:	ee30 0b40 	vsub.f64	d0, d0, d0
 8006094:	b005      	add	sp, #20
 8006096:	f85d fb04 	ldr.w	pc, [sp], #4
 800609a:	4668      	mov	r0, sp
 800609c:	f000 f87c 	bl	8006198 <__ieee754_rem_pio2>
 80060a0:	f000 0003 	and.w	r0, r0, #3
 80060a4:	2801      	cmp	r0, #1
 80060a6:	d009      	beq.n	80060bc <cos+0x54>
 80060a8:	2802      	cmp	r0, #2
 80060aa:	d010      	beq.n	80060ce <cos+0x66>
 80060ac:	b9b0      	cbnz	r0, 80060dc <cos+0x74>
 80060ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060b2:	ed9d 0b00 	vldr	d0, [sp]
 80060b6:	f000 f9b3 	bl	8006420 <__kernel_cos>
 80060ba:	e7eb      	b.n	8006094 <cos+0x2c>
 80060bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060c0:	ed9d 0b00 	vldr	d0, [sp]
 80060c4:	f000 fcb0 	bl	8006a28 <__kernel_sin>
 80060c8:	eeb1 0b40 	vneg.f64	d0, d0
 80060cc:	e7e2      	b.n	8006094 <cos+0x2c>
 80060ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060d2:	ed9d 0b00 	vldr	d0, [sp]
 80060d6:	f000 f9a3 	bl	8006420 <__kernel_cos>
 80060da:	e7f5      	b.n	80060c8 <cos+0x60>
 80060dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80060e0:	ed9d 0b00 	vldr	d0, [sp]
 80060e4:	2001      	movs	r0, #1
 80060e6:	f000 fc9f 	bl	8006a28 <__kernel_sin>
 80060ea:	e7d3      	b.n	8006094 <cos+0x2c>
 80060ec:	f3af 8000 	nop.w
	...
 80060f8:	3fe921fb 	.word	0x3fe921fb
 80060fc:	7fefffff 	.word	0x7fefffff

08006100 <sin>:
 8006100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006102:	eeb0 7b40 	vmov.f64	d7, d0
 8006106:	ee17 3a90 	vmov	r3, s15
 800610a:	4a21      	ldr	r2, [pc, #132]	; (8006190 <sin+0x90>)
 800610c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006110:	4293      	cmp	r3, r2
 8006112:	dc07      	bgt.n	8006124 <sin+0x24>
 8006114:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8006188 <sin+0x88>
 8006118:	2000      	movs	r0, #0
 800611a:	b005      	add	sp, #20
 800611c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006120:	f000 bc82 	b.w	8006a28 <__kernel_sin>
 8006124:	4a1b      	ldr	r2, [pc, #108]	; (8006194 <sin+0x94>)
 8006126:	4293      	cmp	r3, r2
 8006128:	dd04      	ble.n	8006134 <sin+0x34>
 800612a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800612e:	b005      	add	sp, #20
 8006130:	f85d fb04 	ldr.w	pc, [sp], #4
 8006134:	4668      	mov	r0, sp
 8006136:	f000 f82f 	bl	8006198 <__ieee754_rem_pio2>
 800613a:	f000 0003 	and.w	r0, r0, #3
 800613e:	2801      	cmp	r0, #1
 8006140:	d00a      	beq.n	8006158 <sin+0x58>
 8006142:	2802      	cmp	r0, #2
 8006144:	d00f      	beq.n	8006166 <sin+0x66>
 8006146:	b9c0      	cbnz	r0, 800617a <sin+0x7a>
 8006148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800614c:	ed9d 0b00 	vldr	d0, [sp]
 8006150:	2001      	movs	r0, #1
 8006152:	f000 fc69 	bl	8006a28 <__kernel_sin>
 8006156:	e7ea      	b.n	800612e <sin+0x2e>
 8006158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800615c:	ed9d 0b00 	vldr	d0, [sp]
 8006160:	f000 f95e 	bl	8006420 <__kernel_cos>
 8006164:	e7e3      	b.n	800612e <sin+0x2e>
 8006166:	ed9d 1b02 	vldr	d1, [sp, #8]
 800616a:	ed9d 0b00 	vldr	d0, [sp]
 800616e:	2001      	movs	r0, #1
 8006170:	f000 fc5a 	bl	8006a28 <__kernel_sin>
 8006174:	eeb1 0b40 	vneg.f64	d0, d0
 8006178:	e7d9      	b.n	800612e <sin+0x2e>
 800617a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800617e:	ed9d 0b00 	vldr	d0, [sp]
 8006182:	f000 f94d 	bl	8006420 <__kernel_cos>
 8006186:	e7f5      	b.n	8006174 <sin+0x74>
	...
 8006190:	3fe921fb 	.word	0x3fe921fb
 8006194:	7fefffff 	.word	0x7fefffff

08006198 <__ieee754_rem_pio2>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	eeb0 7b40 	vmov.f64	d7, d0
 800619e:	ee17 5a90 	vmov	r5, s15
 80061a2:	4b99      	ldr	r3, [pc, #612]	; (8006408 <__ieee754_rem_pio2+0x270>)
 80061a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80061a8:	429e      	cmp	r6, r3
 80061aa:	b088      	sub	sp, #32
 80061ac:	4604      	mov	r4, r0
 80061ae:	dc07      	bgt.n	80061c0 <__ieee754_rem_pio2+0x28>
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	ed84 0b00 	vstr	d0, [r4]
 80061b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80061bc:	2000      	movs	r0, #0
 80061be:	e01b      	b.n	80061f8 <__ieee754_rem_pio2+0x60>
 80061c0:	4b92      	ldr	r3, [pc, #584]	; (800640c <__ieee754_rem_pio2+0x274>)
 80061c2:	429e      	cmp	r6, r3
 80061c4:	dc3b      	bgt.n	800623e <__ieee754_rem_pio2+0xa6>
 80061c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80061ca:	2d00      	cmp	r5, #0
 80061cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80063c8 <__ieee754_rem_pio2+0x230>
 80061d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80061d4:	dd19      	ble.n	800620a <__ieee754_rem_pio2+0x72>
 80061d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80061da:	429e      	cmp	r6, r3
 80061dc:	d00e      	beq.n	80061fc <__ieee754_rem_pio2+0x64>
 80061de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80063d0 <__ieee754_rem_pio2+0x238>
 80061e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80061e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80061ea:	ed84 5b00 	vstr	d5, [r4]
 80061ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80061f6:	2001      	movs	r0, #1
 80061f8:	b008      	add	sp, #32
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80063d8 <__ieee754_rem_pio2+0x240>
 8006200:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006204:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80063e0 <__ieee754_rem_pio2+0x248>
 8006208:	e7eb      	b.n	80061e2 <__ieee754_rem_pio2+0x4a>
 800620a:	429e      	cmp	r6, r3
 800620c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8006210:	d00e      	beq.n	8006230 <__ieee754_rem_pio2+0x98>
 8006212:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80063d0 <__ieee754_rem_pio2+0x238>
 8006216:	ee37 5b06 	vadd.f64	d5, d7, d6
 800621a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800621e:	ed84 5b00 	vstr	d5, [r4]
 8006222:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	ed84 7b02 	vstr	d7, [r4, #8]
 800622e:	e7e3      	b.n	80061f8 <__ieee754_rem_pio2+0x60>
 8006230:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80063d8 <__ieee754_rem_pio2+0x240>
 8006234:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006238:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80063e0 <__ieee754_rem_pio2+0x248>
 800623c:	e7eb      	b.n	8006216 <__ieee754_rem_pio2+0x7e>
 800623e:	4b74      	ldr	r3, [pc, #464]	; (8006410 <__ieee754_rem_pio2+0x278>)
 8006240:	429e      	cmp	r6, r3
 8006242:	dc70      	bgt.n	8006326 <__ieee754_rem_pio2+0x18e>
 8006244:	f000 fc48 	bl	8006ad8 <fabs>
 8006248:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800624c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80063e8 <__ieee754_rem_pio2+0x250>
 8006250:	eea0 7b06 	vfma.f64	d7, d0, d6
 8006254:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006258:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800625c:	ee17 0a90 	vmov	r0, s15
 8006260:	eeb1 4b45 	vneg.f64	d4, d5
 8006264:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80063c8 <__ieee754_rem_pio2+0x230>
 8006268:	eea5 0b47 	vfms.f64	d0, d5, d7
 800626c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80063d0 <__ieee754_rem_pio2+0x238>
 8006270:	281f      	cmp	r0, #31
 8006272:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006276:	ee30 6b47 	vsub.f64	d6, d0, d7
 800627a:	dc08      	bgt.n	800628e <__ieee754_rem_pio2+0xf6>
 800627c:	4b65      	ldr	r3, [pc, #404]	; (8006414 <__ieee754_rem_pio2+0x27c>)
 800627e:	1e42      	subs	r2, r0, #1
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	42b3      	cmp	r3, r6
 8006286:	d002      	beq.n	800628e <__ieee754_rem_pio2+0xf6>
 8006288:	ed84 6b00 	vstr	d6, [r4]
 800628c:	e026      	b.n	80062dc <__ieee754_rem_pio2+0x144>
 800628e:	ee16 3a90 	vmov	r3, s13
 8006292:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8006296:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800629a:	2b10      	cmp	r3, #16
 800629c:	ea4f 5226 	mov.w	r2, r6, asr #20
 80062a0:	ddf2      	ble.n	8006288 <__ieee754_rem_pio2+0xf0>
 80062a2:	eeb0 6b40 	vmov.f64	d6, d0
 80062a6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 80063d8 <__ieee754_rem_pio2+0x240>
 80062aa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 80063e0 <__ieee754_rem_pio2+0x248>
 80062ae:	eea4 6b07 	vfma.f64	d6, d4, d7
 80062b2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80062b6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80062ba:	eeb0 7b40 	vmov.f64	d7, d0
 80062be:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80062c2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80062c6:	ee13 3a90 	vmov	r3, s7
 80062ca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b31      	cmp	r3, #49	; 0x31
 80062d2:	dc17      	bgt.n	8006304 <__ieee754_rem_pio2+0x16c>
 80062d4:	eeb0 0b46 	vmov.f64	d0, d6
 80062d8:	ed84 3b00 	vstr	d3, [r4]
 80062dc:	ed94 6b00 	vldr	d6, [r4]
 80062e0:	2d00      	cmp	r5, #0
 80062e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80062e6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80062ea:	ed84 0b02 	vstr	d0, [r4, #8]
 80062ee:	da83      	bge.n	80061f8 <__ieee754_rem_pio2+0x60>
 80062f0:	eeb1 6b46 	vneg.f64	d6, d6
 80062f4:	eeb1 0b40 	vneg.f64	d0, d0
 80062f8:	ed84 6b00 	vstr	d6, [r4]
 80062fc:	ed84 0b02 	vstr	d0, [r4, #8]
 8006300:	4240      	negs	r0, r0
 8006302:	e779      	b.n	80061f8 <__ieee754_rem_pio2+0x60>
 8006304:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 80063f0 <__ieee754_rem_pio2+0x258>
 8006308:	eeb0 0b46 	vmov.f64	d0, d6
 800630c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8006310:	ee36 7b40 	vsub.f64	d7, d6, d0
 8006314:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80063f8 <__ieee754_rem_pio2+0x260>
 8006318:	eea4 7b03 	vfma.f64	d7, d4, d3
 800631c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8006320:	ee30 6b47 	vsub.f64	d6, d0, d7
 8006324:	e7b0      	b.n	8006288 <__ieee754_rem_pio2+0xf0>
 8006326:	4b3c      	ldr	r3, [pc, #240]	; (8006418 <__ieee754_rem_pio2+0x280>)
 8006328:	429e      	cmp	r6, r3
 800632a:	dd06      	ble.n	800633a <__ieee754_rem_pio2+0x1a2>
 800632c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8006330:	ed80 7b02 	vstr	d7, [r0, #8]
 8006334:	ed80 7b00 	vstr	d7, [r0]
 8006338:	e740      	b.n	80061bc <__ieee754_rem_pio2+0x24>
 800633a:	1532      	asrs	r2, r6, #20
 800633c:	ee10 0a10 	vmov	r0, s0
 8006340:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8006344:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8006348:	ec41 0b17 	vmov	d7, r0, r1
 800634c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006350:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8006400 <__ieee754_rem_pio2+0x268>
 8006354:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8006358:	ee37 7b46 	vsub.f64	d7, d7, d6
 800635c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006360:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006364:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8006368:	a902      	add	r1, sp, #8
 800636a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800636e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006372:	ed8d 6b04 	vstr	d6, [sp, #16]
 8006376:	ee27 7b05 	vmul.f64	d7, d7, d5
 800637a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800637e:	2603      	movs	r6, #3
 8006380:	4608      	mov	r0, r1
 8006382:	ed91 7b04 	vldr	d7, [r1, #16]
 8006386:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	4633      	mov	r3, r6
 8006390:	f1a1 0108 	sub.w	r1, r1, #8
 8006394:	f106 36ff 	add.w	r6, r6, #4294967295
 8006398:	d0f3      	beq.n	8006382 <__ieee754_rem_pio2+0x1ea>
 800639a:	4920      	ldr	r1, [pc, #128]	; (800641c <__ieee754_rem_pio2+0x284>)
 800639c:	9101      	str	r1, [sp, #4]
 800639e:	2102      	movs	r1, #2
 80063a0:	9100      	str	r1, [sp, #0]
 80063a2:	4621      	mov	r1, r4
 80063a4:	f000 f8a8 	bl	80064f8 <__kernel_rem_pio2>
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	f6bf af25 	bge.w	80061f8 <__ieee754_rem_pio2+0x60>
 80063ae:	ed94 7b00 	vldr	d7, [r4]
 80063b2:	eeb1 7b47 	vneg.f64	d7, d7
 80063b6:	ed84 7b00 	vstr	d7, [r4]
 80063ba:	ed94 7b02 	vldr	d7, [r4, #8]
 80063be:	eeb1 7b47 	vneg.f64	d7, d7
 80063c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80063c6:	e79b      	b.n	8006300 <__ieee754_rem_pio2+0x168>
 80063c8:	54400000 	.word	0x54400000
 80063cc:	3ff921fb 	.word	0x3ff921fb
 80063d0:	1a626331 	.word	0x1a626331
 80063d4:	3dd0b461 	.word	0x3dd0b461
 80063d8:	1a600000 	.word	0x1a600000
 80063dc:	3dd0b461 	.word	0x3dd0b461
 80063e0:	2e037073 	.word	0x2e037073
 80063e4:	3ba3198a 	.word	0x3ba3198a
 80063e8:	6dc9c883 	.word	0x6dc9c883
 80063ec:	3fe45f30 	.word	0x3fe45f30
 80063f0:	2e000000 	.word	0x2e000000
 80063f4:	3ba3198a 	.word	0x3ba3198a
 80063f8:	252049c1 	.word	0x252049c1
 80063fc:	397b839a 	.word	0x397b839a
 8006400:	00000000 	.word	0x00000000
 8006404:	41700000 	.word	0x41700000
 8006408:	3fe921fb 	.word	0x3fe921fb
 800640c:	4002d97b 	.word	0x4002d97b
 8006410:	413921fb 	.word	0x413921fb
 8006414:	08006e8c 	.word	0x08006e8c
 8006418:	7fefffff 	.word	0x7fefffff
 800641c:	08006f0c 	.word	0x08006f0c

08006420 <__kernel_cos>:
 8006420:	ee10 1a90 	vmov	r1, s1
 8006424:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8006428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800642c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8006430:	da05      	bge.n	800643e <__kernel_cos+0x1e>
 8006432:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006436:	ee17 3a90 	vmov	r3, s15
 800643a:	2b00      	cmp	r3, #0
 800643c:	d03d      	beq.n	80064ba <__kernel_cos+0x9a>
 800643e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8006442:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80064c0 <__kernel_cos+0xa0>
 8006446:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80064c8 <__kernel_cos+0xa8>
 800644a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800644e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80064d0 <__kernel_cos+0xb0>
 8006452:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006456:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80064d8 <__kernel_cos+0xb8>
 800645a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800645e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80064e0 <__kernel_cos+0xc0>
 8006462:	4b23      	ldr	r3, [pc, #140]	; (80064f0 <__kernel_cos+0xd0>)
 8006464:	eea6 7b03 	vfma.f64	d7, d6, d3
 8006468:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80064e8 <__kernel_cos+0xc8>
 800646c:	4299      	cmp	r1, r3
 800646e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8006472:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8006476:	ee26 5b03 	vmul.f64	d5, d6, d3
 800647a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800647e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8006482:	eea3 6b05 	vfma.f64	d6, d3, d5
 8006486:	dc04      	bgt.n	8006492 <__kernel_cos+0x72>
 8006488:	ee37 6b46 	vsub.f64	d6, d7, d6
 800648c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8006490:	4770      	bx	lr
 8006492:	4b18      	ldr	r3, [pc, #96]	; (80064f4 <__kernel_cos+0xd4>)
 8006494:	4299      	cmp	r1, r3
 8006496:	dc0d      	bgt.n	80064b4 <__kernel_cos+0x94>
 8006498:	2200      	movs	r2, #0
 800649a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800649e:	ec43 2b15 	vmov	d5, r2, r3
 80064a2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80064a6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80064aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80064ae:	ee30 0b47 	vsub.f64	d0, d0, d7
 80064b2:	4770      	bx	lr
 80064b4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80064b8:	e7f3      	b.n	80064a2 <__kernel_cos+0x82>
 80064ba:	eeb0 0b44 	vmov.f64	d0, d4
 80064be:	4770      	bx	lr
 80064c0:	be8838d4 	.word	0xbe8838d4
 80064c4:	bda8fae9 	.word	0xbda8fae9
 80064c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80064cc:	3e21ee9e 	.word	0x3e21ee9e
 80064d0:	809c52ad 	.word	0x809c52ad
 80064d4:	be927e4f 	.word	0xbe927e4f
 80064d8:	19cb1590 	.word	0x19cb1590
 80064dc:	3efa01a0 	.word	0x3efa01a0
 80064e0:	16c15177 	.word	0x16c15177
 80064e4:	bf56c16c 	.word	0xbf56c16c
 80064e8:	5555554c 	.word	0x5555554c
 80064ec:	3fa55555 	.word	0x3fa55555
 80064f0:	3fd33332 	.word	0x3fd33332
 80064f4:	3fe90000 	.word	0x3fe90000

080064f8 <__kernel_rem_pio2>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	ed2d 8b06 	vpush	{d8-d10}
 8006500:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8006504:	460f      	mov	r7, r1
 8006506:	9002      	str	r0, [sp, #8]
 8006508:	49c5      	ldr	r1, [pc, #788]	; (8006820 <__kernel_rem_pio2+0x328>)
 800650a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800650c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8006510:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	f112 0f14 	cmn.w	r2, #20
 800651a:	bfa8      	it	ge
 800651c:	2018      	movge	r0, #24
 800651e:	f103 31ff 	add.w	r1, r3, #4294967295
 8006522:	bfb8      	it	lt
 8006524:	2000      	movlt	r0, #0
 8006526:	f06f 0417 	mvn.w	r4, #23
 800652a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8006808 <__kernel_rem_pio2+0x310>
 800652e:	bfa4      	itt	ge
 8006530:	f1a2 0a03 	subge.w	sl, r2, #3
 8006534:	fb9a f0f0 	sdivge	r0, sl, r0
 8006538:	fb00 4404 	mla	r4, r0, r4, r4
 800653c:	1a46      	subs	r6, r0, r1
 800653e:	4414      	add	r4, r2
 8006540:	eb09 0c01 	add.w	ip, r9, r1
 8006544:	ad1a      	add	r5, sp, #104	; 0x68
 8006546:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800654a:	2200      	movs	r2, #0
 800654c:	4562      	cmp	r2, ip
 800654e:	dd10      	ble.n	8006572 <__kernel_rem_pio2+0x7a>
 8006550:	9a01      	ldr	r2, [sp, #4]
 8006552:	ab1a      	add	r3, sp, #104	; 0x68
 8006554:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8006558:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800655c:	f04f 0c00 	mov.w	ip, #0
 8006560:	45cc      	cmp	ip, r9
 8006562:	dc26      	bgt.n	80065b2 <__kernel_rem_pio2+0xba>
 8006564:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8006808 <__kernel_rem_pio2+0x310>
 8006568:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800656c:	4616      	mov	r6, r2
 800656e:	2500      	movs	r5, #0
 8006570:	e015      	b.n	800659e <__kernel_rem_pio2+0xa6>
 8006572:	42d6      	cmn	r6, r2
 8006574:	d409      	bmi.n	800658a <__kernel_rem_pio2+0x92>
 8006576:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006582:	eca5 7b02 	vstmia	r5!, {d7}
 8006586:	3201      	adds	r2, #1
 8006588:	e7e0      	b.n	800654c <__kernel_rem_pio2+0x54>
 800658a:	eeb0 7b46 	vmov.f64	d7, d6
 800658e:	e7f8      	b.n	8006582 <__kernel_rem_pio2+0x8a>
 8006590:	ecb8 5b02 	vldmia	r8!, {d5}
 8006594:	ed96 6b00 	vldr	d6, [r6]
 8006598:	3501      	adds	r5, #1
 800659a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800659e:	428d      	cmp	r5, r1
 80065a0:	f1a6 0608 	sub.w	r6, r6, #8
 80065a4:	ddf4      	ble.n	8006590 <__kernel_rem_pio2+0x98>
 80065a6:	ecaa 7b02 	vstmia	sl!, {d7}
 80065aa:	f10c 0c01 	add.w	ip, ip, #1
 80065ae:	3208      	adds	r2, #8
 80065b0:	e7d6      	b.n	8006560 <__kernel_rem_pio2+0x68>
 80065b2:	ab06      	add	r3, sp, #24
 80065b4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8006810 <__kernel_rem_pio2+0x318>
 80065b8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8006818 <__kernel_rem_pio2+0x320>
 80065bc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80065c0:	9303      	str	r3, [sp, #12]
 80065c2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80065c6:	464d      	mov	r5, r9
 80065c8:	00eb      	lsls	r3, r5, #3
 80065ca:	9304      	str	r3, [sp, #16]
 80065cc:	ab92      	add	r3, sp, #584	; 0x248
 80065ce:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80065d2:	f10d 0b18 	add.w	fp, sp, #24
 80065d6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80065d8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80065dc:	465e      	mov	r6, fp
 80065de:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80065e2:	4628      	mov	r0, r5
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f1a2 0208 	sub.w	r2, r2, #8
 80065ea:	dc4c      	bgt.n	8006686 <__kernel_rem_pio2+0x18e>
 80065ec:	4620      	mov	r0, r4
 80065ee:	9105      	str	r1, [sp, #20]
 80065f0:	f000 faf2 	bl	8006bd8 <scalbn>
 80065f4:	eeb0 8b40 	vmov.f64	d8, d0
 80065f8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80065fc:	ee28 0b00 	vmul.f64	d0, d8, d0
 8006600:	f000 fa76 	bl	8006af0 <floor>
 8006604:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8006608:	eea0 8b47 	vfms.f64	d8, d0, d7
 800660c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8006610:	2c00      	cmp	r4, #0
 8006612:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8006616:	ee17 8a90 	vmov	r8, s15
 800661a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800661e:	9905      	ldr	r1, [sp, #20]
 8006620:	dd43      	ble.n	80066aa <__kernel_rem_pio2+0x1b2>
 8006622:	1e68      	subs	r0, r5, #1
 8006624:	ab06      	add	r3, sp, #24
 8006626:	f1c4 0c18 	rsb	ip, r4, #24
 800662a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800662e:	fa46 f20c 	asr.w	r2, r6, ip
 8006632:	4490      	add	r8, r2
 8006634:	fa02 f20c 	lsl.w	r2, r2, ip
 8006638:	1ab6      	subs	r6, r6, r2
 800663a:	f1c4 0217 	rsb	r2, r4, #23
 800663e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8006642:	4116      	asrs	r6, r2
 8006644:	2e00      	cmp	r6, #0
 8006646:	dd3f      	ble.n	80066c8 <__kernel_rem_pio2+0x1d0>
 8006648:	f04f 0c00 	mov.w	ip, #0
 800664c:	f108 0801 	add.w	r8, r8, #1
 8006650:	4660      	mov	r0, ip
 8006652:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8006656:	4565      	cmp	r5, ip
 8006658:	dc6e      	bgt.n	8006738 <__kernel_rem_pio2+0x240>
 800665a:	2c00      	cmp	r4, #0
 800665c:	dd04      	ble.n	8006668 <__kernel_rem_pio2+0x170>
 800665e:	2c01      	cmp	r4, #1
 8006660:	d07f      	beq.n	8006762 <__kernel_rem_pio2+0x26a>
 8006662:	2c02      	cmp	r4, #2
 8006664:	f000 8087 	beq.w	8006776 <__kernel_rem_pio2+0x27e>
 8006668:	2e02      	cmp	r6, #2
 800666a:	d12d      	bne.n	80066c8 <__kernel_rem_pio2+0x1d0>
 800666c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8006670:	ee30 8b48 	vsub.f64	d8, d0, d8
 8006674:	b340      	cbz	r0, 80066c8 <__kernel_rem_pio2+0x1d0>
 8006676:	4620      	mov	r0, r4
 8006678:	9105      	str	r1, [sp, #20]
 800667a:	f000 faad 	bl	8006bd8 <scalbn>
 800667e:	9905      	ldr	r1, [sp, #20]
 8006680:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006684:	e020      	b.n	80066c8 <__kernel_rem_pio2+0x1d0>
 8006686:	ee20 7b09 	vmul.f64	d7, d0, d9
 800668a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800668e:	3801      	subs	r0, #1
 8006690:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8006694:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8006698:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800669c:	eca6 0a01 	vstmia	r6!, {s0}
 80066a0:	ed92 0b00 	vldr	d0, [r2]
 80066a4:	ee37 0b00 	vadd.f64	d0, d7, d0
 80066a8:	e79c      	b.n	80065e4 <__kernel_rem_pio2+0xec>
 80066aa:	d105      	bne.n	80066b8 <__kernel_rem_pio2+0x1c0>
 80066ac:	1e6a      	subs	r2, r5, #1
 80066ae:	ab06      	add	r3, sp, #24
 80066b0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80066b4:	15f6      	asrs	r6, r6, #23
 80066b6:	e7c5      	b.n	8006644 <__kernel_rem_pio2+0x14c>
 80066b8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80066bc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	da36      	bge.n	8006734 <__kernel_rem_pio2+0x23c>
 80066c6:	2600      	movs	r6, #0
 80066c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80066cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d0:	f040 80aa 	bne.w	8006828 <__kernel_rem_pio2+0x330>
 80066d4:	f105 3bff 	add.w	fp, r5, #4294967295
 80066d8:	4658      	mov	r0, fp
 80066da:	2200      	movs	r2, #0
 80066dc:	4548      	cmp	r0, r9
 80066de:	da52      	bge.n	8006786 <__kernel_rem_pio2+0x28e>
 80066e0:	2a00      	cmp	r2, #0
 80066e2:	f000 8081 	beq.w	80067e8 <__kernel_rem_pio2+0x2f0>
 80066e6:	ab06      	add	r3, sp, #24
 80066e8:	3c18      	subs	r4, #24
 80066ea:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8087 	beq.w	8006802 <__kernel_rem_pio2+0x30a>
 80066f4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80066f8:	4620      	mov	r0, r4
 80066fa:	f000 fa6d 	bl	8006bd8 <scalbn>
 80066fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006702:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8006810 <__kernel_rem_pio2+0x318>
 8006706:	a96a      	add	r1, sp, #424	; 0x1a8
 8006708:	f103 0208 	add.w	r2, r3, #8
 800670c:	1888      	adds	r0, r1, r2
 800670e:	4659      	mov	r1, fp
 8006710:	2900      	cmp	r1, #0
 8006712:	f280 80b7 	bge.w	8006884 <__kernel_rem_pio2+0x38c>
 8006716:	4659      	mov	r1, fp
 8006718:	2900      	cmp	r1, #0
 800671a:	f2c0 80d5 	blt.w	80068c8 <__kernel_rem_pio2+0x3d0>
 800671e:	a86a      	add	r0, sp, #424	; 0x1a8
 8006720:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8006724:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8006808 <__kernel_rem_pio2+0x310>
 8006728:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006824 <__kernel_rem_pio2+0x32c>
 800672c:	2400      	movs	r4, #0
 800672e:	ebab 0001 	sub.w	r0, fp, r1
 8006732:	e0be      	b.n	80068b2 <__kernel_rem_pio2+0x3ba>
 8006734:	2602      	movs	r6, #2
 8006736:	e787      	b.n	8006648 <__kernel_rem_pio2+0x150>
 8006738:	f8db 2000 	ldr.w	r2, [fp]
 800673c:	b958      	cbnz	r0, 8006756 <__kernel_rem_pio2+0x25e>
 800673e:	b122      	cbz	r2, 800674a <__kernel_rem_pio2+0x252>
 8006740:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8006744:	f8cb 2000 	str.w	r2, [fp]
 8006748:	2201      	movs	r2, #1
 800674a:	f10c 0c01 	add.w	ip, ip, #1
 800674e:	f10b 0b04 	add.w	fp, fp, #4
 8006752:	4610      	mov	r0, r2
 8006754:	e77f      	b.n	8006656 <__kernel_rem_pio2+0x15e>
 8006756:	ebae 0202 	sub.w	r2, lr, r2
 800675a:	f8cb 2000 	str.w	r2, [fp]
 800675e:	4602      	mov	r2, r0
 8006760:	e7f3      	b.n	800674a <__kernel_rem_pio2+0x252>
 8006762:	f105 3cff 	add.w	ip, r5, #4294967295
 8006766:	ab06      	add	r3, sp, #24
 8006768:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800676c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006770:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8006774:	e778      	b.n	8006668 <__kernel_rem_pio2+0x170>
 8006776:	f105 3cff 	add.w	ip, r5, #4294967295
 800677a:	ab06      	add	r3, sp, #24
 800677c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8006780:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8006784:	e7f4      	b.n	8006770 <__kernel_rem_pio2+0x278>
 8006786:	ab06      	add	r3, sp, #24
 8006788:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800678c:	3801      	subs	r0, #1
 800678e:	431a      	orrs	r2, r3
 8006790:	e7a4      	b.n	80066dc <__kernel_rem_pio2+0x1e4>
 8006792:	f10c 0c01 	add.w	ip, ip, #1
 8006796:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800679a:	2800      	cmp	r0, #0
 800679c:	d0f9      	beq.n	8006792 <__kernel_rem_pio2+0x29a>
 800679e:	9b04      	ldr	r3, [sp, #16]
 80067a0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80067a4:	eb0d 0203 	add.w	r2, sp, r3
 80067a8:	9b01      	ldr	r3, [sp, #4]
 80067aa:	18e8      	adds	r0, r5, r3
 80067ac:	ab1a      	add	r3, sp, #104	; 0x68
 80067ae:	1c6e      	adds	r6, r5, #1
 80067b0:	3a98      	subs	r2, #152	; 0x98
 80067b2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80067b6:	4465      	add	r5, ip
 80067b8:	42b5      	cmp	r5, r6
 80067ba:	f6ff af05 	blt.w	80065c8 <__kernel_rem_pio2+0xd0>
 80067be:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 80067c2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067ce:	f04f 0c00 	mov.w	ip, #0
 80067d2:	eca0 7b02 	vstmia	r0!, {d7}
 80067d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8006808 <__kernel_rem_pio2+0x310>
 80067da:	4680      	mov	r8, r0
 80067dc:	458c      	cmp	ip, r1
 80067de:	dd07      	ble.n	80067f0 <__kernel_rem_pio2+0x2f8>
 80067e0:	eca2 7b02 	vstmia	r2!, {d7}
 80067e4:	3601      	adds	r6, #1
 80067e6:	e7e7      	b.n	80067b8 <__kernel_rem_pio2+0x2c0>
 80067e8:	9a03      	ldr	r2, [sp, #12]
 80067ea:	f04f 0c01 	mov.w	ip, #1
 80067ee:	e7d2      	b.n	8006796 <__kernel_rem_pio2+0x29e>
 80067f0:	ecbe 5b02 	vldmia	lr!, {d5}
 80067f4:	ed38 6b02 	vldmdb	r8!, {d6}
 80067f8:	f10c 0c01 	add.w	ip, ip, #1
 80067fc:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006800:	e7ec      	b.n	80067dc <__kernel_rem_pio2+0x2e4>
 8006802:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006806:	e76e      	b.n	80066e6 <__kernel_rem_pio2+0x1ee>
	...
 8006814:	3e700000 	.word	0x3e700000
 8006818:	00000000 	.word	0x00000000
 800681c:	41700000 	.word	0x41700000
 8006820:	08007058 	.word	0x08007058
 8006824:	08007018 	.word	0x08007018
 8006828:	4260      	negs	r0, r4
 800682a:	eeb0 0b48 	vmov.f64	d0, d8
 800682e:	f000 f9d3 	bl	8006bd8 <scalbn>
 8006832:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006a10 <__kernel_rem_pio2+0x518>
 8006836:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800683a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683e:	db18      	blt.n	8006872 <__kernel_rem_pio2+0x37a>
 8006840:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8006a18 <__kernel_rem_pio2+0x520>
 8006844:	ee20 7b07 	vmul.f64	d7, d0, d7
 8006848:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800684c:	aa06      	add	r2, sp, #24
 800684e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8006852:	eea5 0b46 	vfms.f64	d0, d5, d6
 8006856:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800685a:	f105 0b01 	add.w	fp, r5, #1
 800685e:	ee10 3a10 	vmov	r3, s0
 8006862:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006866:	ee17 3a10 	vmov	r3, s14
 800686a:	3418      	adds	r4, #24
 800686c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8006870:	e740      	b.n	80066f4 <__kernel_rem_pio2+0x1fc>
 8006872:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8006876:	aa06      	add	r2, sp, #24
 8006878:	ee10 3a10 	vmov	r3, s0
 800687c:	46ab      	mov	fp, r5
 800687e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006882:	e737      	b.n	80066f4 <__kernel_rem_pio2+0x1fc>
 8006884:	ac06      	add	r4, sp, #24
 8006886:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800688a:	9401      	str	r4, [sp, #4]
 800688c:	ee07 4a90 	vmov	s15, r4
 8006890:	3901      	subs	r1, #1
 8006892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006896:	ee27 7b00 	vmul.f64	d7, d7, d0
 800689a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800689e:	ed20 7b02 	vstmdb	r0!, {d7}
 80068a2:	e735      	b.n	8006710 <__kernel_rem_pio2+0x218>
 80068a4:	ecbc 5b02 	vldmia	ip!, {d5}
 80068a8:	ecb5 6b02 	vldmia	r5!, {d6}
 80068ac:	3401      	adds	r4, #1
 80068ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 80068b2:	454c      	cmp	r4, r9
 80068b4:	dc01      	bgt.n	80068ba <__kernel_rem_pio2+0x3c2>
 80068b6:	4284      	cmp	r4, r0
 80068b8:	ddf4      	ble.n	80068a4 <__kernel_rem_pio2+0x3ac>
 80068ba:	ac42      	add	r4, sp, #264	; 0x108
 80068bc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80068c0:	ed80 7b00 	vstr	d7, [r0]
 80068c4:	3901      	subs	r1, #1
 80068c6:	e727      	b.n	8006718 <__kernel_rem_pio2+0x220>
 80068c8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80068ca:	2902      	cmp	r1, #2
 80068cc:	dc0a      	bgt.n	80068e4 <__kernel_rem_pio2+0x3ec>
 80068ce:	2900      	cmp	r1, #0
 80068d0:	dc2c      	bgt.n	800692c <__kernel_rem_pio2+0x434>
 80068d2:	d045      	beq.n	8006960 <__kernel_rem_pio2+0x468>
 80068d4:	f008 0007 	and.w	r0, r8, #7
 80068d8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80068dc:	ecbd 8b06 	vpop	{d8-d10}
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80068e6:	2a03      	cmp	r2, #3
 80068e8:	d1f4      	bne.n	80068d4 <__kernel_rem_pio2+0x3dc>
 80068ea:	aa42      	add	r2, sp, #264	; 0x108
 80068ec:	4413      	add	r3, r2
 80068ee:	461a      	mov	r2, r3
 80068f0:	4619      	mov	r1, r3
 80068f2:	4658      	mov	r0, fp
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f1a1 0108 	sub.w	r1, r1, #8
 80068fa:	dc54      	bgt.n	80069a6 <__kernel_rem_pio2+0x4ae>
 80068fc:	4659      	mov	r1, fp
 80068fe:	2901      	cmp	r1, #1
 8006900:	f1a2 0208 	sub.w	r2, r2, #8
 8006904:	dc5f      	bgt.n	80069c6 <__kernel_rem_pio2+0x4ce>
 8006906:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8006a20 <__kernel_rem_pio2+0x528>
 800690a:	3308      	adds	r3, #8
 800690c:	f1bb 0f01 	cmp.w	fp, #1
 8006910:	dc69      	bgt.n	80069e6 <__kernel_rem_pio2+0x4ee>
 8006912:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8006916:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800691a:	2e00      	cmp	r6, #0
 800691c:	d16a      	bne.n	80069f4 <__kernel_rem_pio2+0x4fc>
 800691e:	ed87 5b00 	vstr	d5, [r7]
 8006922:	ed87 6b02 	vstr	d6, [r7, #8]
 8006926:	ed87 7b04 	vstr	d7, [r7, #16]
 800692a:	e7d3      	b.n	80068d4 <__kernel_rem_pio2+0x3dc>
 800692c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006a20 <__kernel_rem_pio2+0x528>
 8006930:	ab42      	add	r3, sp, #264	; 0x108
 8006932:	441a      	add	r2, r3
 8006934:	465b      	mov	r3, fp
 8006936:	2b00      	cmp	r3, #0
 8006938:	da26      	bge.n	8006988 <__kernel_rem_pio2+0x490>
 800693a:	b35e      	cbz	r6, 8006994 <__kernel_rem_pio2+0x49c>
 800693c:	eeb1 7b46 	vneg.f64	d7, d6
 8006940:	ed87 7b00 	vstr	d7, [r7]
 8006944:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8006948:	aa44      	add	r2, sp, #272	; 0x110
 800694a:	2301      	movs	r3, #1
 800694c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006950:	459b      	cmp	fp, r3
 8006952:	da22      	bge.n	800699a <__kernel_rem_pio2+0x4a2>
 8006954:	b10e      	cbz	r6, 800695a <__kernel_rem_pio2+0x462>
 8006956:	eeb1 7b47 	vneg.f64	d7, d7
 800695a:	ed87 7b02 	vstr	d7, [r7, #8]
 800695e:	e7b9      	b.n	80068d4 <__kernel_rem_pio2+0x3dc>
 8006960:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006a20 <__kernel_rem_pio2+0x528>
 8006964:	ab42      	add	r3, sp, #264	; 0x108
 8006966:	441a      	add	r2, r3
 8006968:	f1bb 0f00 	cmp.w	fp, #0
 800696c:	da05      	bge.n	800697a <__kernel_rem_pio2+0x482>
 800696e:	b10e      	cbz	r6, 8006974 <__kernel_rem_pio2+0x47c>
 8006970:	eeb1 7b47 	vneg.f64	d7, d7
 8006974:	ed87 7b00 	vstr	d7, [r7]
 8006978:	e7ac      	b.n	80068d4 <__kernel_rem_pio2+0x3dc>
 800697a:	ed32 6b02 	vldmdb	r2!, {d6}
 800697e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006982:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006986:	e7ef      	b.n	8006968 <__kernel_rem_pio2+0x470>
 8006988:	ed32 7b02 	vldmdb	r2!, {d7}
 800698c:	3b01      	subs	r3, #1
 800698e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006992:	e7d0      	b.n	8006936 <__kernel_rem_pio2+0x43e>
 8006994:	eeb0 7b46 	vmov.f64	d7, d6
 8006998:	e7d2      	b.n	8006940 <__kernel_rem_pio2+0x448>
 800699a:	ecb2 6b02 	vldmia	r2!, {d6}
 800699e:	3301      	adds	r3, #1
 80069a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069a4:	e7d4      	b.n	8006950 <__kernel_rem_pio2+0x458>
 80069a6:	ed91 7b00 	vldr	d7, [r1]
 80069aa:	ed91 5b02 	vldr	d5, [r1, #8]
 80069ae:	3801      	subs	r0, #1
 80069b0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80069b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069b8:	ed81 6b00 	vstr	d6, [r1]
 80069bc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80069c0:	ed81 7b02 	vstr	d7, [r1, #8]
 80069c4:	e796      	b.n	80068f4 <__kernel_rem_pio2+0x3fc>
 80069c6:	ed92 7b00 	vldr	d7, [r2]
 80069ca:	ed92 5b02 	vldr	d5, [r2, #8]
 80069ce:	3901      	subs	r1, #1
 80069d0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80069d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80069d8:	ed82 6b00 	vstr	d6, [r2]
 80069dc:	ee37 7b05 	vadd.f64	d7, d7, d5
 80069e0:	ed82 7b02 	vstr	d7, [r2, #8]
 80069e4:	e78b      	b.n	80068fe <__kernel_rem_pio2+0x406>
 80069e6:	ed33 6b02 	vldmdb	r3!, {d6}
 80069ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80069ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069f2:	e78b      	b.n	800690c <__kernel_rem_pio2+0x414>
 80069f4:	eeb1 5b45 	vneg.f64	d5, d5
 80069f8:	eeb1 6b46 	vneg.f64	d6, d6
 80069fc:	ed87 5b00 	vstr	d5, [r7]
 8006a00:	eeb1 7b47 	vneg.f64	d7, d7
 8006a04:	ed87 6b02 	vstr	d6, [r7, #8]
 8006a08:	e78d      	b.n	8006926 <__kernel_rem_pio2+0x42e>
 8006a0a:	bf00      	nop
 8006a0c:	f3af 8000 	nop.w
 8006a10:	00000000 	.word	0x00000000
 8006a14:	41700000 	.word	0x41700000
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	3e700000 	.word	0x3e700000
	...

08006a28 <__kernel_sin>:
 8006a28:	ee10 3a90 	vmov	r3, s1
 8006a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a30:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006a34:	da04      	bge.n	8006a40 <__kernel_sin+0x18>
 8006a36:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8006a3a:	ee17 3a90 	vmov	r3, s15
 8006a3e:	b35b      	cbz	r3, 8006a98 <__kernel_sin+0x70>
 8006a40:	ee20 6b00 	vmul.f64	d6, d0, d0
 8006a44:	ee20 5b06 	vmul.f64	d5, d0, d6
 8006a48:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8006aa0 <__kernel_sin+0x78>
 8006a4c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006aa8 <__kernel_sin+0x80>
 8006a50:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006a54:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006ab0 <__kernel_sin+0x88>
 8006a58:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006a5c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006ab8 <__kernel_sin+0x90>
 8006a60:	eea7 4b06 	vfma.f64	d4, d7, d6
 8006a64:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8006ac0 <__kernel_sin+0x98>
 8006a68:	eea4 7b06 	vfma.f64	d7, d4, d6
 8006a6c:	b930      	cbnz	r0, 8006a7c <__kernel_sin+0x54>
 8006a6e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006ac8 <__kernel_sin+0xa0>
 8006a72:	eea6 4b07 	vfma.f64	d4, d6, d7
 8006a76:	eea4 0b05 	vfma.f64	d0, d4, d5
 8006a7a:	4770      	bx	lr
 8006a7c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8006a80:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006a84:	eea1 7b04 	vfma.f64	d7, d1, d4
 8006a88:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8006a8c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8006ad0 <__kernel_sin+0xa8>
 8006a90:	eea5 1b07 	vfma.f64	d1, d5, d7
 8006a94:	ee30 0b41 	vsub.f64	d0, d0, d1
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w
 8006aa0:	5acfd57c 	.word	0x5acfd57c
 8006aa4:	3de5d93a 	.word	0x3de5d93a
 8006aa8:	8a2b9ceb 	.word	0x8a2b9ceb
 8006aac:	be5ae5e6 	.word	0xbe5ae5e6
 8006ab0:	57b1fe7d 	.word	0x57b1fe7d
 8006ab4:	3ec71de3 	.word	0x3ec71de3
 8006ab8:	19c161d5 	.word	0x19c161d5
 8006abc:	bf2a01a0 	.word	0xbf2a01a0
 8006ac0:	1110f8a6 	.word	0x1110f8a6
 8006ac4:	3f811111 	.word	0x3f811111
 8006ac8:	55555549 	.word	0x55555549
 8006acc:	bfc55555 	.word	0xbfc55555
 8006ad0:	55555549 	.word	0x55555549
 8006ad4:	3fc55555 	.word	0x3fc55555

08006ad8 <fabs>:
 8006ad8:	ec51 0b10 	vmov	r0, r1, d0
 8006adc:	ee10 2a10 	vmov	r2, s0
 8006ae0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ae4:	ec43 2b10 	vmov	d0, r2, r3
 8006ae8:	4770      	bx	lr
 8006aea:	0000      	movs	r0, r0
 8006aec:	0000      	movs	r0, r0
	...

08006af0 <floor>:
 8006af0:	ee10 1a90 	vmov	r1, s1
 8006af4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006af8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006afc:	2b13      	cmp	r3, #19
 8006afe:	b530      	push	{r4, r5, lr}
 8006b00:	ee10 0a10 	vmov	r0, s0
 8006b04:	ee10 5a10 	vmov	r5, s0
 8006b08:	dc31      	bgt.n	8006b6e <floor+0x7e>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	da15      	bge.n	8006b3a <floor+0x4a>
 8006b0e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8006bc8 <floor+0xd8>
 8006b12:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	dd07      	ble.n	8006b30 <floor+0x40>
 8006b20:	2900      	cmp	r1, #0
 8006b22:	da4e      	bge.n	8006bc2 <floor+0xd2>
 8006b24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006b28:	4318      	orrs	r0, r3
 8006b2a:	d001      	beq.n	8006b30 <floor+0x40>
 8006b2c:	4928      	ldr	r1, [pc, #160]	; (8006bd0 <floor+0xe0>)
 8006b2e:	2000      	movs	r0, #0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4602      	mov	r2, r0
 8006b34:	ec43 2b10 	vmov	d0, r2, r3
 8006b38:	e020      	b.n	8006b7c <floor+0x8c>
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <floor+0xe4>)
 8006b3c:	411a      	asrs	r2, r3
 8006b3e:	ea01 0402 	and.w	r4, r1, r2
 8006b42:	4304      	orrs	r4, r0
 8006b44:	d01a      	beq.n	8006b7c <floor+0x8c>
 8006b46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8006bc8 <floor+0xd8>
 8006b4a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b4e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b56:	ddeb      	ble.n	8006b30 <floor+0x40>
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	bfbe      	ittt	lt
 8006b5c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8006b60:	fa40 f303 	asrlt.w	r3, r0, r3
 8006b64:	18c9      	addlt	r1, r1, r3
 8006b66:	ea21 0102 	bic.w	r1, r1, r2
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e7e0      	b.n	8006b30 <floor+0x40>
 8006b6e:	2b33      	cmp	r3, #51	; 0x33
 8006b70:	dd05      	ble.n	8006b7e <floor+0x8e>
 8006b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b76:	d101      	bne.n	8006b7c <floor+0x8c>
 8006b78:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006b7c:	bd30      	pop	{r4, r5, pc}
 8006b7e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8006b82:	f04f 32ff 	mov.w	r2, #4294967295
 8006b86:	40e2      	lsrs	r2, r4
 8006b88:	4202      	tst	r2, r0
 8006b8a:	d0f7      	beq.n	8006b7c <floor+0x8c>
 8006b8c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8006bc8 <floor+0xd8>
 8006b90:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006b94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	ddc8      	ble.n	8006b30 <floor+0x40>
 8006b9e:	2900      	cmp	r1, #0
 8006ba0:	da02      	bge.n	8006ba8 <floor+0xb8>
 8006ba2:	2b14      	cmp	r3, #20
 8006ba4:	d103      	bne.n	8006bae <floor+0xbe>
 8006ba6:	3101      	adds	r1, #1
 8006ba8:	ea20 0002 	bic.w	r0, r0, r2
 8006bac:	e7c0      	b.n	8006b30 <floor+0x40>
 8006bae:	2401      	movs	r4, #1
 8006bb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006bb4:	fa04 f303 	lsl.w	r3, r4, r3
 8006bb8:	4418      	add	r0, r3
 8006bba:	42a8      	cmp	r0, r5
 8006bbc:	bf38      	it	cc
 8006bbe:	1909      	addcc	r1, r1, r4
 8006bc0:	e7f2      	b.n	8006ba8 <floor+0xb8>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	4601      	mov	r1, r0
 8006bc6:	e7b3      	b.n	8006b30 <floor+0x40>
 8006bc8:	8800759c 	.word	0x8800759c
 8006bcc:	7e37e43c 	.word	0x7e37e43c
 8006bd0:	bff00000 	.word	0xbff00000
 8006bd4:	000fffff 	.word	0x000fffff

08006bd8 <scalbn>:
 8006bd8:	ee10 1a90 	vmov	r1, s1
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006be2:	b98c      	cbnz	r4, 8006c08 <scalbn+0x30>
 8006be4:	ee10 3a10 	vmov	r3, s0
 8006be8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006bec:	430b      	orrs	r3, r1
 8006bee:	d011      	beq.n	8006c14 <scalbn+0x3c>
 8006bf0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8006cb8 <scalbn+0xe0>
 8006bf4:	4b3c      	ldr	r3, [pc, #240]	; (8006ce8 <scalbn+0x110>)
 8006bf6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	da0b      	bge.n	8006c16 <scalbn+0x3e>
 8006bfe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8006cc0 <scalbn+0xe8>
 8006c02:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006c06:	e005      	b.n	8006c14 <scalbn+0x3c>
 8006c08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006c0c:	429c      	cmp	r4, r3
 8006c0e:	d107      	bne.n	8006c20 <scalbn+0x48>
 8006c10:	ee30 0b00 	vadd.f64	d0, d0, d0
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	ee10 1a90 	vmov	r1, s1
 8006c1a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006c1e:	3c36      	subs	r4, #54	; 0x36
 8006c20:	4404      	add	r4, r0
 8006c22:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8006c26:	429c      	cmp	r4, r3
 8006c28:	dd0d      	ble.n	8006c46 <scalbn+0x6e>
 8006c2a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8006cc8 <scalbn+0xf0>
 8006c2e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8006cd0 <scalbn+0xf8>
 8006c32:	eeb0 6b47 	vmov.f64	d6, d7
 8006c36:	ee10 3a90 	vmov	r3, s1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8006c40:	ee27 0b06 	vmul.f64	d0, d7, d6
 8006c44:	e7e6      	b.n	8006c14 <scalbn+0x3c>
 8006c46:	2c00      	cmp	r4, #0
 8006c48:	dd0a      	ble.n	8006c60 <scalbn+0x88>
 8006c4a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006c4e:	ec53 2b10 	vmov	r2, r3, d0
 8006c52:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006c56:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8006c5a:	ec43 2b10 	vmov	d0, r2, r3
 8006c5e:	e7d9      	b.n	8006c14 <scalbn+0x3c>
 8006c60:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8006c64:	da19      	bge.n	8006c9a <scalbn+0xc2>
 8006c66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006c6a:	4298      	cmp	r0, r3
 8006c6c:	ee10 3a90 	vmov	r3, s1
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c74:	dd09      	ble.n	8006c8a <scalbn+0xb2>
 8006c76:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8006cc8 <scalbn+0xf0>
 8006c7a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8006cd0 <scalbn+0xf8>
 8006c7e:	eeb0 7b40 	vmov.f64	d7, d0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8006c88:	e7bb      	b.n	8006c02 <scalbn+0x2a>
 8006c8a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8006cc0 <scalbn+0xe8>
 8006c8e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8006cd8 <scalbn+0x100>
 8006c92:	eeb0 7b40 	vmov.f64	d7, d0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	e7f4      	b.n	8006c84 <scalbn+0xac>
 8006c9a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8006c9e:	ec53 2b10 	vmov	r2, r3, d0
 8006ca2:	3436      	adds	r4, #54	; 0x36
 8006ca4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006ca8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8006cac:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8006ce0 <scalbn+0x108>
 8006cb0:	ec43 2b10 	vmov	d0, r2, r3
 8006cb4:	e7a5      	b.n	8006c02 <scalbn+0x2a>
 8006cb6:	bf00      	nop
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	43500000 	.word	0x43500000
 8006cc0:	c2f8f359 	.word	0xc2f8f359
 8006cc4:	01a56e1f 	.word	0x01a56e1f
 8006cc8:	8800759c 	.word	0x8800759c
 8006ccc:	7e37e43c 	.word	0x7e37e43c
 8006cd0:	8800759c 	.word	0x8800759c
 8006cd4:	fe37e43c 	.word	0xfe37e43c
 8006cd8:	c2f8f359 	.word	0xc2f8f359
 8006cdc:	81a56e1f 	.word	0x81a56e1f
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	3c900000 	.word	0x3c900000
 8006ce8:	ffff3cb0 	.word	0xffff3cb0

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4d0d      	ldr	r5, [pc, #52]	; (8006d24 <__libc_init_array+0x38>)
 8006cf0:	4c0d      	ldr	r4, [pc, #52]	; (8006d28 <__libc_init_array+0x3c>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	4d0b      	ldr	r5, [pc, #44]	; (8006d2c <__libc_init_array+0x40>)
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	; (8006d30 <__libc_init_array+0x44>)
 8006d00:	f000 f820 	bl	8006d44 <_init>
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	2600      	movs	r6, #0
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08007070 	.word	0x08007070
 8006d28:	08007070 	.word	0x08007070
 8006d2c:	08007070 	.word	0x08007070
 8006d30:	08007074 	.word	0x08007074

08006d34 <memset>:
 8006d34:	4402      	add	r2, r0
 8006d36:	4603      	mov	r3, r0
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d100      	bne.n	8006d3e <memset+0xa>
 8006d3c:	4770      	bx	lr
 8006d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d42:	e7f9      	b.n	8006d38 <memset+0x4>

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
